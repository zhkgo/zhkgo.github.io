<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>菜鸟的祖玛通关之路</title>
      <link href="/2024/11/20/passzuma/"/>
      <url>/2024/11/20/passzuma/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近忽然想体验一下老游戏，正好看到了一个绝版游戏保护工程里面有个祖玛游戏，想回忆一下童年就玩了一下。</p></blockquote><h2 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h2><p>祖玛是一款由PopCap Games开发的益智游戏，玩家需要通过发射彩色球来匹配相同颜色的球，以消除它们。游戏的目标是消除所有的球（冒险模式），或者在球到达底部之前消除所有的球（生存模式）。</p><p><img src="/images/img202411202221621.png" alt="祖玛"></p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2><p>虽然这是一个很古老的三消游戏，但是玩起来还是挺有意思的。 游戏体验非常丝滑上手就能玩。三消的爽感就在于消除的瞬间，看着彩色的球一颗颗的消失，非常的解压。这个游戏有点看眼神和手速，需要能快速观察到适合插入当前球的位置。对于我这个色弱来说，玩起来有点费劲，特别是分不清背上球的颜色，只有当前球的颜色可以知道找一样的。但是球朝着洞口向前滚动，洞口越张越大还是很有刺激感的。后面几关很快就给我上强度了，特别是第10大关之后的567关卡，球的速度变快，颜色变多，且增加了超级多的阻碍，一些角度的球射不了，或者距离太远，需要提前预判。最恶魔的是第12-7关，洞口的球根本射击不到，只能射击球出来的地方，这意味着每射一球都会导致后面的所有球往前移动一格，所以需要尽可能利用同色相吸的原理把后面的球吸回来。</p><h2 id="游戏攻略"><a href="#游戏攻略" class="headerlink" title="游戏攻略"></a>游戏攻略</h2><p>主要有以下几个注意点。</p><ol><li>一开始如果情况不太好可以先消灭一些数量多的球，不然你可能来不及各种技巧操作就嗝屁了。</li><li>能补单色优先补单色，这样后面需要的时候可以尽快消除，消除之后也更容易吸球连击。</li><li>功能球需要注意，它会闪烁提示你它的出现。各个功能球各有特色，特别是爆炸球、倒车球。</li><li>可以搞个修改器加命玩，免得每次都从X-1重新开始打。</li><li>实在打不过去的关卡，可以在不知所措时暂停慢慢思考球应该射哪里，这样可以节约很多时间。暂停看不到球的话，就点菜单离开，回来读档就能看到了。（我的12-7和13-1太空关就是这么过的）</li></ol><h2 id="通关感受"><a href="#通关感受" class="headerlink" title="通关感受"></a>通关感受</h2><p>最基本的其实是要看准射哪里，其次是要射击的准。可以稍微慢一点，但是尽量不能射歪。这个和我最近练习双拼有点像，打字可以慢一些，但是键盘得按准点，遇速则不达，当你的手形成正确的肌肉记忆的时候，自然就会快起来。<br><img src="/images/img202411202251257.png" alt="最后一关-外太空"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 祖玛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpaceSniffer导出sns文件存储格式分析</title>
      <link href="/2024/04/30/snsData/"/>
      <url>/2024/04/30/snsData/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在处理大型软件系统时，我们经常需要分析系统运行时的内存分布，了解哪些数据结构占用了大量内存。虽然可以通过数值进行观察，但这并不直观。这时，我想到了SpaceSniffer这款软件。SpaceSniffer主要用于磁盘空间的管理和可视化，它使用treemap进行可视化，即使面对大量文件也能保持流畅的体验。</p></blockquote><h2 id="思路简介"><a href="#思路简介" class="headerlink" title="思路简介"></a>思路简介</h2><p>我们的主要思路是根据SpaceSniffer导出的sns文件格式来构造内存分布，将其视为文件分布进行观察。由于没有找到任何公开的文档说明如何构造这种格式，我们只能通过观察二进制文件来进行分析。基本的方法是不断改变文件夹内容，导出二进制数据并观察其特征。</p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="创建一个以empty为名的空文件夹"><a href="#创建一个以empty为名的空文件夹" class="headerlink" title="创建一个以empty为名的空文件夹"></a>创建一个以empty为名的空文件夹</h3><p><img src="/images/img202405050004926.png" alt="空文件夹"></p><h3 id="创建file-txt"><a href="#创建file-txt" class="headerlink" title="创建file.txt"></a>创建file.txt</h3><p><img src="/images/img202405050007248.png"></p><p>有了以下观察结果和推测。</p><ul><li>两个二进制文件都以0x0203开头，0x0100结尾。</li><li>有一段二进制数据，解码出来是可见字符。</li><li>考虑到此时不变的内容只有文件夹名字，且增加的可见文字是以=号结尾，故猜测他们是base64编码后的文件/文件夹名。</li></ul><p>尝试解码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token comment" spellcheck="true"># base64解码</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'TDpcdG9vbHNcYW5hU25zXGVtcHR5'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output L:\tools\anaSns\empty</span></code></pre><p>发现输出的确实是扫描的文件夹所在的路径。再解码另一个字符串看看</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'ZmlsZS50eHQ='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output file.txt</span></code></pre><p>看起来已经找到了文件名所在。</p><h3 id="修改file-txt，向里面写入2个字母"><a href="#修改file-txt，向里面写入2个字母" class="headerlink" title="修改file.txt，向里面写入2个字母"></a>修改file.txt，向里面写入2个字母</h3><p><img src="/images/img202405050008657.png"></p><p>对此有以下观察和推断。</p><ul><li><p>二进制文件的长度没有变化，但在0x58行06列的值从0变为2，推测这可能是表示文件长度的字段。通过修改这个值并重新加载sns文件到SpaceSniffer，验证了这个推测。</p></li><li><p>在0x70行06列开始的位置，发现了一些变化。同样的字段出现了两次，推测这可能是文件的最后修改时间和访问时间。这个推测是通过反复观察SpaceSniffer界面并注意到写入两个字节的数据后，除了文件大小，变化的就只有这两个时间。</p></li><li><p>通过验证，确认这两个8字节的字段确实是文件的最后修改时间和访问时间。</p></li><li><p>在这两个字段之前的8字节没有变化，推测这是文件的创建时间。</p></li></ul><ol start="3"><li>empty目录下创建一个新的文件file2.txt，并写入100个字母。</li></ol><p><img src="/images/img202405050008852.png"></p><p>对此有以下观察和推断。</p><ul><li><p>每个文件名或文件夹名前面都有一段长度为4的二进制数据，这段数据的值与文件或文件夹名称的字节数非常接近。这可能是表示文件或文件夹名称长度的字段。</p></li><li><p>在这个字段之前，有一个统一的标记，是0x0203或0x0202，这可能是表示文件或文件夹开头的标记。</p></li><li><p>如果将0x0203或0x0202后面的4个字节看作是文件名称的字节长度，那么在文件名称后面紧跟着的一个数字就可能是表示文件或文件夹所占的空间大小。</p></li></ul><h3 id="empty目录下创建一个名为hahaha的新目录"><a href="#empty目录下创建一个名为hahaha的新目录" class="headerlink" title="empty目录下创建一个名为hahaha的新目录"></a>empty目录下创建一个名为hahaha的新目录</h3><p><img src="/images/img202405050010782.png"></p><p>通过对比该数据和以上数据，发现。</p><ul><li>0x0203表示文件夹开头，0x0202表示文件开头，0x0100表示文件夹或文件结尾。</li></ul><h3 id="在新目录下创建一个文件test-txt并写入10个字母"><a href="#在新目录下创建一个文件test-txt并写入10个字母" class="headerlink" title="在新目录下创建一个文件test.txt并写入10个字母"></a>在新目录下创建一个文件test.txt并写入10个字母</h3><p>再次观察并对比</p><p><img src="/images/img202405050010994.png"></p><h2 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h2><p>最后通过若干次对比确认以前的信息。<br>得出sns文件的构成如下：</p><ul><li>文件夹开头：<code>0x0203</code></li><li>文件夹结尾：<code>0x0100</code></li></ul><p>文件或文件夹的结构如下：</p><ul><li>头部（head）：<code>0x0203</code>（文件夹）或<code>0x0202</code>（文件），占用2字节</li><li>名称长度（lenOfName）：无符号32位整数（uint32），占用4字节</li><li>名称（Base64Filename）：Base64编码的文件名，长度可变</li><li>大小1（Size1）：无符号64位整数（uint64），占用8字节, 为节点内存大小</li><li>大小2（Size2）：无符号64位整数（uint64），占用8字节，推测为节点所占磁盘空间大小，对文件夹来说似乎无意义。</li><li>创建时间（CreationTime）：占用8字节</li><li>访问时间（AccessedTime）：占用8字节</li><li>修改时间（ModifiedTime）：占用8字节 时间的存储格式暂未分析</li><li>分隔符（sep）：<code>0x0000</code>，占用2字节</li><li>其他文件/目录（otherfile/directory）：可选</li><li>尾部（tail）：<code>0x1000</code></li></ul><p>对于文件夹，大小1和大小2都等于文件夹的大小。</p><p>对于文件，大小1等于文件的大小，大小2是补偿文件大小。大小1和大小2的和等于文件所占的真实磁盘空间。<br>其中对于文件夹 size1 = size2 = 文件夹大小<br>对于文件来说 size1= 文件大小 size2为补偿文件大小，size1+size2= 文件所占真实磁盘空间。</p><h2 id="生成代码实现"><a href="#生成代码实现" class="headerlink" title="生成代码实现"></a>生成代码实现</h2><p>接下来根据这个格式来尝试递归构建文件夹。<br>写出了如下类， 由于不知道时间，且时间暂时无意义，直接置为0。一开始使用python来写这个代码效率不尽如人意，后面改为使用c++。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 节点名</span>    uint64_t size<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 节点大小</span>    uint64_t paddingSize<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// paddingSize = 实际占用空间-size，只针对文件有效，文件夹通常=size</span>    <span class="token keyword">bool</span> isFile<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 是否是文件</span>    vector<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> childs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子节点</span>    Node<span class="token operator">*</span> parent<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 父节点</span>    <span class="token function">Node</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> uint64_t size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uint64_t paddingSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">paddingSize</span><span class="token punctuation">(</span>paddingSize<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> child <span class="token operator">:</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> child<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>child<span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"warning! child has parent\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> child<span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>child<span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child<span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>child<span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>isFile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        child<span class="token operator">-</span><span class="token operator">></span>parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>size <span class="token operator">+</span><span class="token operator">=</span> child<span class="token operator">-</span><span class="token operator">></span>size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span><span class="token function">updateSize</span><span class="token punctuation">(</span>child<span class="token operator">-</span><span class="token operator">></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">updateSize</span><span class="token punctuation">(</span>uint64_t size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>size <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>parent<span class="token operator">-</span><span class="token operator">></span><span class="token function">updateSize</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">toSns</span><span class="token punctuation">(</span>ofstream<span class="token operator">&amp;</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string encode_name <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        uint32_t len <span class="token operator">=</span> encode_name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 头部</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>isFile <span class="token operator">?</span> <span class="token number">0x02</span> <span class="token operator">:</span> <span class="token number">0x03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件名长度</span>        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件名</span>        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>encode_name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encode_name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 文件/文件夹大小</span>        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8 个字节表示被额外占用的磁盘空间，这边留空 暂时不知道啥用</span>        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>paddingSize<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>paddingSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 24 个字节表示文件的创建时间，访问时间，修改时间，这边留空</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2个字节表示分隔符</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>isFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span> child <span class="token operator">:</span> <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>childs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                child<span class="token operator">-</span><span class="token operator">></span><span class="token function">toSns</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 结束符</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="结果验证"><a href="#结果验证" class="headerlink" title="结果验证"></a>结果验证</h2><p> 最后通过以下代码尝试构造sns格式文件,并使用spacesniffer加载。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">nodeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ofstream <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"test.sns"</span><span class="token punctuation">,</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-</span><span class="token operator">></span><span class="token function">toSns</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/img202405050015451.png" alt="test.sns"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
            <tag> spaceSniffer </tag>
            
            <tag> 内存可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>war3小助手</title>
      <link href="/2024/01/17/war3helper/"/>
      <url>/2024/01/17/war3helper/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间在09平台打dota omg，被平台的匹配机制搞到了。我一个胜率50不到的菜鸡，经常给我在对面匹配几个70+,80+胜率大佬，自己这边又都是50不到。这种局实在不想打了，就想做一个工具来检测这种情况，在进入房间时发现高胜率的时候就退出匹配。</p></blockquote><h2 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h2><p>整个系统需要以下几个模块：</p><ol><li><p><strong>游戏阶段检测：</strong> 负责检测游戏当前的阶段，包括是否处于房间中、游戏中或者游戏未启动状态。</p></li><li><p><strong>玩家昵称获取：</strong> 负责获取房间内玩家的昵称信息。</p></li><li><p><strong>玩家胜率查询：</strong> 负责查询玩家昵称对应的游戏胜率以及局数信息。</p></li><li><p><strong>GUI界面展示：</strong> 负责通过用户界面展示当前房间内玩家的胜率信息。</p></li><li><p><strong>高胜率玩家警告：</strong> 当系统检测到高胜率玩家时，负责主动向玩家发送警告信息。</p></li></ol><h3 id="获取玩家昵称的方案"><a href="#获取玩家昵称的方案" class="headerlink" title="获取玩家昵称的方案"></a>获取玩家昵称的方案</h3><p>确定如何读取房间内玩家的昵称是关键问题，我考虑了三种方案：</p><ol><li><p><strong>抓取网络包</strong>： 这种方案通过监控网络包，从中解析出玩家昵称。然而，这需要在程序运行期间对网络一直进行监控，可能会对原有通信造成一定影响。因此，我暂时放弃了这个方案，但我相信如果有需要，也可以尝试解决这个问题。</p></li><li><p><strong>读取war3进程的内存</strong>： 这个方案通过读取游戏进程的内存，从对应的地址中解析出玩家昵称。考虑到我需要通过检测进程内容来确定游戏程序的运行状态，而且读取玩家的昵称也是顺带的事情，所以最终我选择了这个方案。</p></li><li><p><strong>orc识别</strong>： 这个方案需要在进入房间后进行orc识别，从识别结果中读取玩家昵称。然而，orc识别需要有特定时机来识别，如果采用用户主动触发识别，则需要占用快捷键；如果采用被动识别，则需要不断截图、不断识别，且不一定能准确识别到玩家昵称。因此，我首先放弃了这个方案。</p></li></ol><h3 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h3><p>在语言选择方面，最初我使用了Python来编写这个工具，但后来放弃了这个选择。主要原因是，想要读取其他进程内的数据需要通过Windows的UAC进行提权。虽然Python可以申请管理员权限提权，但在尝试过PyInstaller和Nuitka两种工具对Python程序进行打包时遇到了问题。打包后的Python程序可以提权，显示拥有管理员权限，但在<strong>申请Windows的sedebug权限时却一直失败</strong>，导致无法访问其他程序内存,有懂的读者可以说说解决方案，我搜索了很久也没找到为啥。因此，我决定改用C#来编写Windows程序，毕竟在Windows平台上编写程序，C#看起来更专业。<br><img src="/images/img202402080023579.png" alt="windows下申请uac权限"></p><h2 id="游戏阶段检测"><a href="#游戏阶段检测" class="headerlink" title="游戏阶段检测"></a>游戏阶段检测</h2><p>对于检测游戏阶段，其实还是比较容易的。只需要尝试搜索windows现有的进程中有没有war3.exe, 没有这个进程就是未启动。在房间中的话，可以搜到进程，并且在对应的内存地址存有玩家的昵称。在游戏中就直接笼统的判定，游戏已启动，但是没有检测到房间内的玩家名称地址偏移内存在合法名称。<br><img src="/images/img202402080015583.png" alt="游戏房间内"></p><h3 id="获取昵称的内存地址"><a href="#获取昵称的内存地址" class="headerlink" title="获取昵称的内存地址"></a>获取昵称的内存地址</h3><p>要获取房间内玩家的昵称，首先需要确定玩家昵称存储的内存地址。这需要使用一个工具，比如<a href="https://github.com/cheat-engine/cheat-engine" target="_blank" rel="noopener external nofollow noreferrer">Cheat Engine</a>。通过该工具，可以查找玩家昵称存储的内存地址。需要注意的是，找到的地址通常不是直接的内存地址，特别是对于字符串，通常是动态申请的内存地址来存储字符串，每次重启程序直接内存地址都会变化。因此，需要通过查找访问直接内存地址的代码所使用的间接地址来定位。而这个间接地址也可能是一个动态变化的地址，因此需要找到存储间接地址的间接地址，并存储对应的偏移。最终找到的静态地址通常是一个DLL文件加上一个偏移地址的组合。 不过这个过程比较曲折，复杂的游戏指针层数往往非常高，这时候就可以考虑使用<strong>指针地图法</strong>来寻找多级地址偏移。</p><h3 id="获取玩家胜率"><a href="#获取玩家胜率" class="headerlink" title="获取玩家胜率"></a>获取玩家胜率</h3><p>要通过昵称查找玩家的胜率，只需要访问平台官网，通过查询战绩的接口找到对应的API地址即可。通过查看robots协议，确定可以使用爬虫通过API地址来查询战绩。为了减少平台的压力，我把战绩存入数据库，不会重复查找一个玩家的战绩。毕竟，玩家的战绩变化相对缓慢，特别是游戏局数较多的玩家。当然，何时更新玩家的战绩可以稍后再考虑。毕竟因为查询频率较低（一局游戏就10个玩家，持续大概30分钟），直接不存储到数据库也是可行的。</p><h3 id="显示玩家胜率"><a href="#显示玩家胜率" class="headerlink" title="显示玩家胜率"></a>显示玩家胜率</h3><p>最后，GUI界面可以简陋一些，直接通过现有的C#组件在Visual Studio里拼凑即可。对于遇到高胜率玩家的门槛，可以自行设定。最后，通过<strong>Windows Toast</strong>来直接发送通知，提醒用户离开房间。这样，玩家就不必一直盯着我们的GUI界面，只需在需要时切出去查看胜率。<br><img src="/images/img202402072325969.png" alt="最终界面"><br>其实还有一个更加优雅的方案，就是直接修改war3的内存地址，将玩家的胜率显示在游戏内部。然而，这种操作存在一些问题：首先，内存地址可能不准确，修改到未知的区域可能导致程序崩溃；其次，不清楚这个地址是否还有其他用处，可能会导致一些数据与其他玩家不一致的问题，进而被主机踢出游戏；最后，该内存地址可能被用于反作弊检测，导致玩家掉线。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>查看胜率好像也没有啥用，打不过还是打不过，只能躲一些高胜率的，终究是菜了🥵。</p>]]></content>
      
      
      
        <tags>
            
            <tag> war3 </tag>
            
            <tag> cheatEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的服务器居然变巨慢？</title>
      <link href="/2023/03/11/serversoslow/"/>
      <url>/2023/03/11/serversoslow/</url>
      
        <content type="html"><![CDATA[<ul><li>今天在使用自己的网页时，忽然发现自己的服务器访问网页资源变得极其之慢，以致于不能正常使用。于是便开始排查原因。结果就是多数时候遇到的“就这？”</li></ul><p>首先，我需要确定是网络问题还是CPU负载问题，于是我通过netstat和top命令进行了确认。发现了大量来自全国各地的不明链接，故知道问题出在网络方面，而不是CPU被占满所导致的。</p><h2 id="1-排查n2n"><a href="#1-排查n2n" class="headerlink" title="1. 排查n2n"></a>1. 排查n2n</h2><p>接着，我考虑了一下是不是n2n虚拟局域网占用了我服务器的带宽，于是我停止了我的n2n访问，但问题并未得到解决。</p><h2 id="2-重启大法"><a href="#2-重启大法" class="headerlink" title="2. 重启大法"></a>2. 重启大法</h2><p>我随后重启了整个服务器，发现对服务器的访问流畅了很多。但是我发现有一些服务没有配置自启动，因此我需要一个一个手动启动服务。</p><p>最终，我发现一个代理服务占用了网速，于是我开始定位问题所在，并找到了解决该问题的方法。</p><h2 id="3-关闭局域网连接"><a href="#3-关闭局域网连接" class="headerlink" title="3. 关闭局域网连接"></a>3. 关闭局域网连接</h2><p>但是在完成这些工作之后，我面临着一个新问题，就是其他人正在利用我的服务。因此我需要关闭来自局域网的连接，以拒绝其他人的访问。在拒绝来自局域网的连接之后，我自己某个docker容器内部的另一个服务需要使用到这个服务器，因为对于docker容器的宿主机来说，docker容器内的服务是通过局域网连接过来的，所以我docker容器内的服务也无法走代理。该当如何解决呢？</p><h2 id="4-排查防火墙"><a href="#4-排查防火墙" class="headerlink" title="4. 排查防火墙"></a>4. 排查防火墙</h2><p>我的服务器是开启了防火墙的，正常来说，即便我允许来自局域网的连接，在我关闭对应端口的情况下，其他人也无法通过这个端口来访问我的服务。</p><ol><li><p>我通过宝塔面板加了一条规则，阻止了来自对应端口的所有互联网连接，发现没有生效，这个端口依旧畅通无阻。</p></li><li><p>手动通过iptables查询所有防火墙规则。</p></li></ol><pre><code>iptables -L</code></pre><p>当然如果需要知道规则的编号则可以用如下命令。</p><pre><code>iptables -v --line-numbers -L</code></pre><p>通过查询规则，并未发现有什么异常的地方。一方面是自己看，另一方面我也把我查询到的输出交给了chatgpt，让它来帮我分析是否这个端口能通过这一系列防火墙，chatgpt告诉我是不能通过的。而实际情况是通过了，那么问题出在哪里呢？</p><ol start="3"><li>发现预留端口。</li></ol><p>后来我回到宝塔面板，发现了预留端口，当时我为了方便，设置了一条规则统一将7000-8000的端口全部说放行，导致最后无论我如何增加规则，7000-8000端口依旧畅通无阻。这件事说明了<strong>留这种绿色通道还是要小心谨慎，不然时间过得久了就容易被自己忽视，留下安全隐患。</strong></p><h2 id="5-调整防火墙"><a href="#5-调整防火墙" class="headerlink" title="5. 调整防火墙"></a>5. 调整防火墙</h2><p>最后一步，我先删除了宝塔那边放行的一条规则。经过测试，7000-8000端口无法连通，再在服务层面允许来自局域网的连接。但是此时来自局域网的连接同样会被防火墙阻拦，所以其他人依旧无法使用我的服务。</p><p>然后我手动通过iptables来调整了防火墙，删除了某些规则，比如说入流量的第31条规则，用的是这个命令。</p><pre><code>iptables -D INPUT 31</code></pre><h2 id="6-放行指定ip"><a href="#6-放行指定ip" class="headerlink" title="6.放行指定ip"></a>6.放行指定ip</h2><p>当然只禁止肯定是不行的，因此需要放行自己的服务。因为docker容器的访问宿主机的原理是通过一个虚拟局域网来访问的，docker容器和宿主机均处于同一虚拟局域网，对此只需要找到对应容器的ip，对该ip添加规则放行即可。</p><pre><code>iptables -A INPUT -p tcp --dport 7890 -s 172.17.0.2 -j ACCEPT</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单总结一下就是，不要给自己的服务器留绿色通道，可能会造成意想不到的错误，第一时间应该尽可能关闭对外通道。虽然表面看起来比较简单，实际调试的过程更加复杂和曲折。</p><p><img src="/images/img202303121647171.png" alt="流量恢复正常"></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅探C++返回局部对象的过程</title>
      <link href="/2022/09/15/cppreturn/"/>
      <url>/2022/09/15/cppreturn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前学习到过在返回值的时候,c++会在返回局部对象的时候进行返回值优化，现在想通过实践来一谈究竟。</p></blockquote><h2 id="右值引用-第一层"><a href="#右值引用-第一层" class="headerlink" title="右值引用(第一层)"></a>右值引用(第一层)</h2><p>C++11新增了一种引用，可以引用右值，又称右值引用。这也为函数返回值的优化提供了条件。先看这样一段代码。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>A <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a1<span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a<span class="token punctuation">;</span>     a <span class="token operator">=</span> <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从程序设计者的角度来看，有一个显而易见的优化，就是DoA()中的变量a1是局部对象，在返回之后会被销毁，既然要被销毁，为何不使用右值引用来对这个a1对象中的一些元素加以利用，故在返回时会调用对象的右值引用构造函数或者移动赋值函数。<br>根据c++函数返回局部对象的过程，此时函数返回一个局部对象应该分为两步。</p><ol><li>局部对象 -&gt; 临时对象。 调用<strong>右值构造函数</strong>将局部对象a1临时构造在栈上新开辟的空间上。</li><li>临时对象-&gt; 外部对象。 调用<strong>移动赋值构造函数</strong>将临时对象赋值给调用处的左值。</li></ol><h2 id="返回值优化-第二层"><a href="#返回值优化-第二层" class="headerlink" title="返回值优化(第二层)"></a>返回值优化(第二层)</h2><p>为了验证上面的结果，我们采用g++(Ubuntu 7.5.0-3ubuntu1~18.04)对其进行编译运行。<br>输出结果如下。</p><pre><code>Create ACreate Amove assignmentDestroy ADestroy A</code></pre><p>在这里发现，少了一个调用右值构造函数的过程。这时候就要提到C++编译器的返回值优化(RVO)了，编译器在发现这个临时对象最终会作为右值传输给外部对象a,那么为什么不直接把这个局部对象传输给外部对象a呢？故编译器对此过程进行了优化，减少了一次右值构造函数的调用。</p><p>当然我们可以尝试看看关掉这个优化(编译时加入-fno-elide-constructors)，结果是否如我们之前所料呢？</p><pre><code>g++ test.cpp  -fno-elide-constructors output:Create ACreate AMove ADestroy Amove assignmentDestroy ADestroy A</code></pre><p>此时的输出结果就和我们之前预料的一样了。</p><h2 id="返回值优化-第三层"><a href="#返回值优化-第三层" class="headerlink" title="返回值优化(第三层)"></a>返回值优化(第三层)</h2><p>返回值优化就到此结束了吗？其实并没有。<br>看下面这样一段代码。想像一下有几个A类对象会被创建并最终销毁？</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>A <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a1<span class="token punctuation">;</span>    a1<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a <span class="token operator">=</span> <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你回答两个，说一个是局部对象a1,一个是外部对象a,那么你还是在第二层。而编译器的设计者想到了第三层。就是说既然这个局部对象a1迟早会被销毁，并且把他的所有内容交给一个尚未构造的外部对象a,为何不直接在外部对象a上构造这个局部对象。<br>所以此时只有一个A类对象被构造，输出如下。</p><pre><code>Create ADestroy A</code></pre><p>为了更加严格的验证这个不是因为其他原因导致的看似一个对象构造。我们把外部对象a和局部对象a1的地址也输出来。</p><pre><code>Create A0x7ffdb4b99c140x7ffdb4b99c14Destroy A</code></pre><p>可以发现，函数内部的对象和外部对象居然是同一个地址，也印证了之前的说法。</p><h2 id="返回值优化-第四层"><a href="#返回值优化-第四层" class="headerlink" title="返回值优化(第四层)"></a>返回值优化(第四层)</h2><p>那么第三层优化是否有条件限制呢？接着看下一段代码。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>A <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a1<span class="token punctuation">;</span>    A a2<span class="token punctuation">;</span>    a1<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a2<span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a <span class="token operator">=</span> <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于这样一个函数，在编译期间，编译期无法确定最终会返回a1还是a2对象，那么无论是将a1构造在a的地址上，还是将a2构造在a的地址上都是不合适的，因此会导致第三层优化失效。此时会构造a1、a2、a这三个对象。</p><p>再来看一段代码。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Create A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Destroy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Copy A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">A</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move A\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>A <span class="token operator">&amp;&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move assignment\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>A <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a1<span class="token punctuation">;</span>    A a2<span class="token punctuation">;</span>    a1<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a2<span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a <span class="token operator">=</span> <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于这样一段代码，我们知道对于if(1)这样的判断 编译器是会直接进行优化的, 显而易见最终直接返回的就是a2,可以把a2与a对象进行共享，这样就只需要构造两次A类对象(a1,a2)。<br>而实际上他却构造了三次，看看输出。</p><pre><code>Create ACreate AMove ADestroy ADestroy ADestroy A</code></pre><p>起初我以为是因为编译器的RVO在if优化之前，导致了编译器以为存在分支，使得第三层优化失效。<br>直到我把DoA()函数改成如下模样并运行。</p><pre class=" language-cpp"><code class="language-cpp">A <span class="token function">DoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A a1<span class="token punctuation">;</span>    A a2<span class="token punctuation">;</span>    a1<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a2<span class="token punctuation">;</span>    <span class="token keyword">return</span> a1<span class="token punctuation">;</span><span class="token punctuation">}</span>output<span class="token operator">:</span>Create ACreate AMove ADestroy ADestroy ADestroy A</code></pre><p>说明在没有if的情况下，依然会有三次构造，所以<strong>初步</strong>判断编译器只是简单的根据return的局部对象是否唯一来判断是否需要构造到外部变量上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再战脑控机器人大赛</title>
      <link href="/2022/09/02/bcicontest2/"/>
      <url>/2022/09/02/bcicontest2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>第二年也是我最后一年参加这个比赛了，感谢实验室每年都对我们参加比赛给予精神和经费上的大力支持。去年收获优秀算法经验，今年收获脑机图灵测试赛题冠军，综合并列第三名，也和其他赛队交流了更多算法。 今年多亏直博师弟的稳定发挥和师妹的用心比赛，最后感谢赞助方共计1.5w的奖金。希望以后我们脑机协同智能实验室一年更比一年强。</p></blockquote><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><p>第二年参加这个比赛了，对于这个比赛也是驾熟就轻。赛队名称用了学校+实验室名HDU_BCMI。今年赛队扩充了阵容，有个今年入学的直博师弟、还有研二师妹等。这次由于去年参加决赛取到了一些真经，就参加了全部五个赛道，更鲁棒。我选了ERP和MI两个赛道，然后把SSVEP和脑机图灵测试赛题交给了我师弟，最后情感脑机接口交给了师妹。<br>初赛A榜大家都表现很好，形成了1、2、3、4的格局，我在MI赛道拿到了第一名、ERP赛道拿到了第二名、师弟在SSVEP拿到了第三名、图灵赛道拿到了第四名，师妹也在情感脑机接口赛道拿到了第八名。</p><p><img src="/images/imgdd.png" alt="初赛A榜"></p><p>到了初赛B榜，我花的时间就变少了，基本就是在A榜的基础上略微调参，排名有所下降。我师弟的两个赛道倒是维持的不错。但是不出意外的，我们还是进了决赛，和各位名校大佬同台竞技。</p><p><img src="/images/imgcb7bcb0336c6d4ca4b730e8a2fac9253.jpg" alt="参赛队伍"></p><p><img src="/images/imga93a5a6a54a1a9f6e247d482bc8a51ef.jpg" alt="入围决赛队伍"></p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>今年决赛也有些小意外，师弟师妹有几个因为钱塘区疫情不能去北京，还有去到了北京，由于到达过钱塘区也导致不能进去赛场，最后进入赛场的竞只有我一人。我由于在滨江区华为实习，恰好躲过了杭州钱塘区的一例疫情。 好在后面几天通过申诉和行程调查确定了他们无风险，解除了北京健康宝的弹窗，能进赛场一起去看场。</p><p>在那边还有幸领到了不少腾讯的企鹅玩偶。<br><img src="/images/img8aed64d426275fdcc2b53389b72f3e96.jpg" alt="企鹅玩偶"></p><p>没想到还有大领导来看赛场看比赛。<br><img src="/images/img447bdfa3cca9e37534fc4d02efe9bda4.jpg" alt="比赛现场1"><br><img src="/images/imgbead0824bf938223d3ca56838ccf7374.jpg" alt="比赛现场2"></p><p>决赛现场也是意外频出，除了我师弟稳定发挥的图灵以外，其他都是意外频频。提交失败的情感、爆FPR的ssvep。好在最后还是有一个第一的图灵赛道拉分。最终也如愿以偿的登上了领奖台。</p><p><img src="/images/img19d7149fcd48803e453f1bfef0f21d11.jpg" alt="高光时刻"></p><p><img src="/images/imgc7e07a34c86ad194d30cc530ae81fbc8.jpg" alt="赛场外合照"><br><img src="/images/imgimg01f607fbd3839045a200e5932acfa70.jpg" alt="奖杯"><br>获奖名单也公布了。<br><img src="/images/img20220903093237.png" alt="获奖名单"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 世界机器人大赛 </tag>
            
            <tag> 脑控机器人 </tag>
            
            <tag> 腾讯云杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表中是否有环？</title>
      <link href="/2022/08/27/loopinlinklist/"/>
      <url>/2022/08/27/loopinlinklist/</url>
      
        <content type="html"><![CDATA[<h3 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>面试中碰到了这么一个问题，让我来判断一个链表中是否存在环，怎么做。</p><p>这一看就是一个简单题，应该有几种解法，考虑到要有个优化的思路，我第一时间提到的是方法一。</p><p><strong>方法一。</strong>借用哈希表来判断，每次访问一个节点，就把这个节点加入哈希表中。如果链表能顺利遍历到尾部，则无环。</p><p>否则必然会遇到一个节点已经在当前哈希表中，则说明链表有环。这个方法空间复杂度是O(n),时间复杂度也是O(n).</p><p><strong>方法二。</strong>采用快慢指针法，定义两个指针，开始从链表头部往下走，慢指针每次走一步，快指针每次走两步，这样如果链表无环，则快指针会优先碰到链表尾部，若链表有环，则快慢指针会相遇。这个方法把空间复杂度降低到了O(1).</p><h3 id="快慢指针法快指针走三步能判环吗？"><a href="#快慢指针法快指针走三步能判环吗？" class="headerlink" title="快慢指针法快指针走三步能判环吗？"></a>快慢指针法快指针走三步能判环吗？</h3><p>这个问题当时面试的时候其实也比较急，回答的比较草率，直觉上就判断说不能，以为会有个环导致快指针一直错过慢指针。</p><p>现在回过头来细想，也可以用于链表判环。</p><p>首先我去leetcode上找了这个题目提交了一下，发现走三步确实是可以通过题目的所有测试用例的。<a href="https://leetcode.cn/problems/linked-list-cycle/" target="_blank" rel="noopener external nofollow noreferrer">题目链接</a></p><p>接下来就需要来理论证明一下这个点，为什么可以？</p><p><strong>证明。</strong></p><p>若不存在环，则快指针可以走到最后，可以判断这一情况。</p><p>若存在环，假设环的长度为L，入环点编码为0，入环点的下一个点编码为1，直至编码完所有环上的点。假设慢指针入环时，快指针位于x（0&lt;=x&lt;L）的位置。接下来两个指针继续走动，走动了m次，那么此时 慢指针位于m%L的位置，快指针位于(3m+x)%L的位置。</p><p>接下来需要判断x的范围是否真的是（0&lt;=x&lt;L），其实这个x也是有约束的假设从头部到慢指针入环，共走动了n次，那么此时两个指针相差的步数是2n步，在环内的距离应当时2n%L。也就是说x=2n%L。</p><p>现在就需要判断对于任意x=2n%L，是否存在自然数m使得 $m\bmod L=(3m+x)\bmod L$. 也就是$m \equiv (3m+x) mod(L)$, 根据同余定理，若$L|(3m+x-m)$则上式成立。<br>代入x=2n%L,并且变换一下式子得到，$(2m+2n\bmod L)\bmod L=0$。<br>对于任意自然数n是否存在自然数m使得这个等式成立呢？<br>接着变换式子。<br>$(2m\bmod L+2n\bmod L)\bmod L=0$，似乎陷入了死胡同。</p><p>回过头来看，在慢指针第一次入环时，快指针多走了2n步，接下来走了m次的话，快指针会继续多走2m步。此时快指针多走的步数是2(n+m)步。若2(n+m)恰好多走了t圈，则$2(n+m)=tL$.<br>在n确定的情况下，$m= tL/2-n$ 显然，因为t可以无穷大，对于任意自然数n，都会存在一个m来满足这个条件。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>若快指针一次走k步呢？是否还能判断环？根据上面的公式$m= tL/(k-1) -n$。显然是可以的。</p><p>其实这题还有其他可以扩展的问题，内容丰富，不过这是后话了，这篇文章就先讲到这了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 判环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易Shell实现</title>
      <link href="/2022/05/30/easyshell/"/>
      <url>/2022/05/30/easyshell/</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>np<br>实现了一个简单的shell,  主要通过C语言来实现。<a href="https://github.com/zhkgo/codeTemplate/tree/main/inner_cpp/shellproject" target="_blank" rel="noopener external nofollow noreferrer">项目地址</a></p><p>主要有以下功能。</p><ol><li>向标准输出打印一个命令提示符</li><li>从标准输入读取一个命令</li><li>判断要执行哪些命令</li></ol><p>对内置命令进行了解析，主要包括。</p><p>1）<code>cd</code></p><pre class=" language-shell"><code class="language-shell">cd xxx</code></pre><p>进入某个目录（上述代码会进入<code>xxx</code>目录）——你可以查阅<code>chdir()</code>函数的用法。如果目录不存在，则要打印<code>xxx: No such file or directory</code>并换行，其中<code>xxx</code>表示输入的目录名称。</p><p>2）<code>exit</code></p><pre class=" language-shell"><code class="language-shell">exit</code></pre><p>退出 shell 程序，在<code>execute</code>函数中直接返回 000。在其他情况下，<code>execute</code>返回一个非零值即可。</p><p>3）显示历史命令</p><pre class=" language-shell"><code class="language-shell">!#</code></pre><p>所有输入的命令都保存在一个<code>log_t</code>中，这个命令的作用是显示所有输入过的命令，每个占一行。<strong>从栈底元素开始输出，<code>log_t</code>变量名为<code>Log</code>，定义在 shell.h 文件中，请勿修改。</strong></p><p><strong>注意，以<code>!</code>开头的所有命令都不会被放入命令栈中。</strong></p><p>4）根据前缀查找命令</p><pre class=" language-shell"><code class="language-shell">!prefix</code></pre><p>查找是否曾经输入过包含前缀<code>prefix</code>的命令，如果找到（<strong>如果有多个，只找最靠近栈底的一个</strong>），则执行这条命令，如果没有，则返回<code>No Match</code>换行。新执行的命令也会被放入栈顶。</p><p>5）<code>ls</code></p><pre class=" language-shell"><code class="language-shell">ls</code></pre><p>跟 bash shell 的<code>ls</code>命令一样，列举当年目录下所有子目录和文件——你可以直接用<code>system()</code>函数执行这个命令。</p><p>执行外部命令</p><p>需要使用<code>fork()</code>和<code>exec()</code>等函数来执行一个外部命令——如果执行失败，则输出<code>%s: no such command</code>换行。</p><p>如果外部命令无法执行，则输出<code>XXX: no such command</code>并换行，其中<code>XXX</code>表示输入的完整外部命令。注意，你必须确保无论执行成功还是失败，都 <strong>不要有额外的子进程留下</strong>。</p><p><strong>即使外部命令未正确执行，也依然将这条命令放入命令栈中。</strong></p><h2 id="实现部分"><a href="#实现部分" class="headerlink" title="实现部分"></a>实现部分</h2><p>主要实现了<code>shell.c</code>和<code>log.c</code>两个模块。</p><p><code>shell.c</code>负责解析读取到的命令。用到了<code>system</code>,<code>execv</code>,<code>fork</code>等系统调用。</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"shell.h"</span></span><span class="token comment" spellcheck="true">/** * shell的入口 */</span><span class="token keyword">void</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cwd<span class="token operator">=</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s$ "</span><span class="token punctuation">,</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">list_log</span><span class="token punctuation">(</span>log_t <span class="token operator">*</span>log<span class="token punctuation">)</span><span class="token punctuation">{</span>    node <span class="token operator">*</span>p<span class="token operator">=</span>log<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>p<span class="token operator">-></span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_cd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>arg <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bash: cd: too many arguments\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">chdir</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: No such file or directory\n"</span><span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_ls</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">parse_outer</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">;</span>        <span class="token keyword">int</span> c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>c<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">execv</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: no such command\n"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buffer<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'\0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">list_log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Log<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> <span class="token operator">*</span>res<span class="token operator">=</span><span class="token function">log_search</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Log<span class="token punctuation">,</span>buffer<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Match\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">log_push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Log<span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>tmp<span class="token operator">=</span><span class="token function">strtok</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token string">"cd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">parse_cd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">parse_ls</span><span class="token punctuation">(</span>Log<span class="token punctuation">.</span>tail<span class="token operator">-></span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">parse_outer</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>log.c</code>负责命令栈相关操作。</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** @file log.c */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"log.h"</span></span><span class="token comment" spellcheck="true">/**对log进行初始化，log的“构造函数” */</span><span class="token keyword">void</span> <span class="token function">log_init</span><span class="token punctuation">(</span>log_t <span class="token operator">*</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**销毁一个log，释放所有内存空间，log的“析构函数” */</span><span class="token keyword">void</span> <span class="token function">log_destroy</span><span class="token punctuation">(</span>log_t<span class="token operator">*</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">*</span>p<span class="token operator">=</span>l<span class="token operator">-></span>head<span class="token punctuation">;</span>    node <span class="token operator">*</span>nxt<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>        nxt<span class="token operator">=</span>p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token operator">-></span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>nxt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    l<span class="token operator">-></span>tail <span class="token operator">=</span> l<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**向log中推入一个字符串，你可以将log视为一个由链表组成的栈 */</span><span class="token keyword">void</span> <span class="token function">log_push</span><span class="token punctuation">(</span>log_t<span class="token operator">*</span> l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">*</span>cur <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token operator">-></span>cmd <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>cmd<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">-></span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        l<span class="token operator">-></span>head <span class="token operator">=</span> l<span class="token operator">-></span>tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        l<span class="token operator">-></span>tail<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>        l<span class="token operator">-></span>tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>prefix <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">++</span>str<span class="token punctuation">;</span>        <span class="token operator">++</span>prefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">*</span>prefix <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**搜索log中是否含有对应前缀的字符串 */</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">log_search</span><span class="token punctuation">(</span>log_t<span class="token operator">*</span> l<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">*</span>cur <span class="token operator">=</span> l<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">match</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>cmd<span class="token punctuation">,</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> cur<span class="token operator">-></span>cmd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔兽世界之开战-代码实现</title>
      <link href="/2022/05/05/worldofwarcraft3/"/>
      <url>/2022/05/05/worldofwarcraft3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>回忆起之前上过北大郭炜老师的课程，里面有个大作业借用了魔兽世界的一些IP,设计了一个类似红蓝双方对战的场景,正好自己写C++算法多，但是做项目少，就再次写一下这个作业，并且把每个模块抽离出来制作。</p></blockquote><p><a href="https://github.com/zhkgo/codeTemplate/tree/main/gameMoudle/World_of_Warcraft_3" target="_blank" rel="noopener external nofollow noreferrer">项目地址</a></p><h2 id="具体场景"><a href="#具体场景" class="headerlink" title="具体场景"></a>具体场景</h2><p><strong>描述</strong></p><p>魔兽世界的西面是红魔军的司令部，东面是蓝魔军的司令部。两个司令部之间是依次排列的若干城市，城市从西向东依次编号为1,2,3 …. N ( N &lt;= 20)。红魔军的司令部算作编号为0的城市，蓝魔军的司令部算作编号为N+1的城市。司令部有生命元，用于制造武士。</p><p>两军的司令部都会制造武士。武士一共有dragon 、ninja、iceman、lion、wolf 五种。每种武士都有编号、生命值、攻击力这三种属性。</p><p>双方的武士编号都是从1开始计算。红方制造出来的第n 个武士，编号就是n。同样，蓝方制造出来的第n 个武士，编号也是n。</p><p>武士在刚降生的时候有一个初始的生命值，生命值在战斗中会发生变化，如果生命值减少到0（生命值变为负数时应当做变为0处理），则武士死亡（消失）。</p><p>武士可以拥有武器。武器有三种，sword, bomb,和arrow，编号分别为0,1,2。</p><p>sword的攻击力是使用者当前攻击力的20%(去尾取整)。</p><p>bomb的攻击力是使用者当前攻击力的40%(去尾取整)，但是也会导致使用者受到攻击，对使用者的攻击力是对敌人取整后的攻击力的1/2(去尾取整)。Bomb一旦使用就没了。</p><p>arrow的攻击力是使用者当前攻击力的30%(去尾取整)。一个arrow用两次就没了。</p><p>武士降生后就朝对方司令部走，在经过的城市如果遇到敌人（同一时刻每个城市最多只可能有1个蓝武士和一个红武士），就会发生战斗。战斗的规则是：</p><ol><li>在奇数编号城市，红武士先发起攻击</li><li>在偶数编号城市，蓝武士先发起攻击</li><li>战斗开始前，双方先对自己的武器排好使用顺序，然后再一件一件地按顺序使用。编号小的武器，排在前面。若有多支arrow，用过的排在前面。排好序后，攻击者按此排序依次对敌人一件一件地使用武器。如果一种武器有多件，那就都要用上。每使用一件武器，被攻击者生命值要减去武器攻击力。如果任何一方生命值减为0或小于0即为死去。有一方死去，则战斗结束。</li><li>双方轮流使用武器，甲用过一件，就轮到乙用。某一方把自己所有的武器都用过一轮后，就从头开始再用一轮。如果某一方没有武器了，那就挨打直到死去或敌人武器用完。武器排序只在战斗前进行，战斗中不会重新排序。</li><li>如果双方武器都用完且都还活着，则战斗以平局结束。如果双方都死了，也算平局。</li><li>有可能由于武士自身攻击力太低，而导致武器攻击力为0。攻击力为0的武器也要使用。如果战斗中双方的生命值和武器的状态都不再发生变化，则战斗结束，算平局。</li><li>战斗的胜方获得对方手里的武器。武士手里武器总数不超过10件。缴获武器时，按照武器种类编号从小到大缴获。如果有多件arrow，优先缴获没用过的。</li><li>如果战斗开始前双方都没有武器，则战斗视为平局。如果先攻击方没有武器，则由后攻击方攻击。</li></ol><p>不同的武士有不同的特点。</p><p>编号为n的dragon降生时即获得编号为n%3 的武器。dragon在战斗结束后，如果还没有战死，就会欢呼。</p><p>编号为n的ninjia降生时即获得编号为n%3 和(n+1)%3的武器。ninja 使用bomb不会让自己受伤。</p><p>编号为n的iceman降生时即获得编号为n%3 的武器。iceman每前进一步，生命值减少10%(减少的量要去尾取整)。</p><p>编号为n的lion降生时即获得编号为n%3 的武器。lion 有“忠诚度”这个属性，其初始值等于它降生之后其司令部剩余生命元的数目。每前进一步忠诚度就降低K。忠诚度降至0或0以下，则该lion逃离战场,永远消失。但是已经到达敌人司令部的lion不会逃跑。lion在己方司令部可能逃跑。</p><p>wolf降生时没有武器，但是在战斗开始前会抢到敌人编号最小的那种武器。如果敌人有多件这样的武器，则全部抢来。Wolf手里武器也不能超过10件。如果敌人arrow太多没法都抢来，那就先抢没用过的。如果敌人也是wolf，则不抢武器。</p><p><strong>以下是不同时间会发生的不同事件：</strong></p><p>在每个整点，即每个小时的第0分， 双方的司令部中各有一个武士降生。</p><p>红方司令部按照iceman、lion、wolf、ninja、dragon 的顺序制造武士。</p><p>蓝方司令部按照lion、dragon、ninja、iceman、wolf 的顺序制造武士。</p><p>制造武士需要生命元。</p><p>制造一个初始生命值为m 的武士，司令部中的生命元就要减少m 个。</p><p>如果司令部中的生命元不足以制造某本该造的武士，那就从此停止制造武士。</p><p>在每个小时的第5分，该逃跑的lion就在这一时刻逃跑了。</p><p>在每个小时的第10分：所有的武士朝敌人司令部方向前进一步。即从己方司令部走到相邻城市，或从一个城市走到下一个城市。或从和敌军司令部相邻的城市到达敌军司令部。</p><p>在每个小时的第35分：在有wolf及其敌人的城市，wolf要抢夺对方的武器。</p><p>在每个小时的第40分：在有两个武士的城市，会发生战斗。</p><p>在每个小时的第50分，司令部报告它拥有的生命元数量。</p><p>在每个小时的第55分，每个武士报告其拥有的武器情况。</p><p>武士到达对方司令部后就算完成任务了，从此就呆在那里无所事事。</p><p>任何一方的司令部里若是出现了敌人，则认为该司令部已被敌人占领。</p><p>任何一方的司令部被敌人占领，则战争结束。战争结束之后就不会发生任何事情了。</p><p><strong>给定一个时间，要求你将从0点0分开始到此时间为止的所有事件按顺序输出。事件及其对应的输出样例如下：</strong></p><ol><li>武士降生</li></ol><p>输出样例：000:00 blue dragon 1 born</p><p>表示在0点0分，编号为1的蓝魔dragon武士降生</p><p>如果造出的是lion，那么还要多输出一行，例:</p><p>000:00 blue lion 1 born</p><p>Its loyalty is 24</p><p>表示该lion降生时的忠诚度是24</p><ol start="2"><li>lion逃跑</li></ol><p>输出样例：000:05 blue lion 1 ran away</p><p>表示在0点5分，编号为1的蓝魔lion武士逃走</p><ol start="3"><li>武士前进到某一城市</li></ol><p>输出样例：</p><p>000:10 red iceman 1 marched to city 1 with 20 elements and force 30</p><p>表示在0点10分，红魔1号武士iceman前进到1号城市，此时他生命值为20,攻击力为30</p><p>对于iceman,输出的生命值应该是变化后的数值</p><ol start="4"><li>wolf抢敌人的武器</li></ol><p>000:35 blue wolf 2 took 3 bomb from red dragon 2 in city 4</p><p>表示在0点35分，4号城市中，红魔1号武士wolf 抢走蓝魔2号武士dragon 3个bomb。为简单起见，武器不写复数形式</p><ol start="5"><li>报告战斗情况</li></ol><p>战斗只有3种可能的输出结果：</p><p>000:40 red iceman 1 killed blue lion 12 in city 2 remaining 20 elements</p><p>表示在0点40分，1号城市中，红魔1号武士iceman 杀死蓝魔12号武士lion后，剩下生命值20</p><p>000:40 both red iceman 1 and blue lion 12 died in city 2</p><p>注意，把红武士写前面</p><p>000:40 both red iceman 1 and blue lion 12 were alive in city 2</p><p>注意，把红武士写前面</p><ol start="6"><li>武士欢呼</li></ol><p>输出样例：003:40 blue dragon 2 yelled in city 4</p><ol start="7"><li>武士抵达敌军司令部</li></ol><p>输出样例：001:10 red iceman 1 reached blue headquarter with 20 elements and force 30</p><p>（此时他生命值为20,攻击力为30）对于iceman,输出的生命值和攻击力应该是变化后的数值</p><ol start="8"><li>司令部被占领</li></ol><p>输出样例：003:10 blue headquarter was taken</p><ol start="9"><li>司令部报告生命元数量</li></ol><p>000:50 100 elements in red headquarter</p><p>000:50 120 elements in blue headquarter</p><p>表示在0点50分，红方司令部有100个生命元，蓝方有120个</p><ol start="10"><li>武士报告情况</li></ol><p>000:55 blue wolf 2 has 2 sword 3 bomb 0 arrow and 7 elements</p><p>为简单起见，武器都不写复数形式。elements一律写复数，哪怕只有1个</p><p>交代武器情况时，次序依次是：sword,bomb, arrow。</p><p><strong>输出事件时：</strong></p><p>首先按时间顺序输出；</p><p>同一时间发生的事件，按发生地点从西向东依次输出. 武士前进的事件, 算是发生在目的地。</p><p>在一次战斗中有可能发生上面的 5 至 6 号事件。这些事件都算同时发生，其时间就是战斗开始时间。一次战斗中的这些事件，序号小的应该先输出。</p><p>两个武士同时抵达同一城市，则先输出红武士的前进事件，后输出蓝武士的。</p><p>对于同一城市，同一时间发生的事情，先输出红方的，后输出蓝方的。</p><p>显然，8号事件发生之前的一瞬间一定发生了7号事件。输出时，这两件事算同一时间发生，但是应先输出7号事件</p><p>虽然任何一方的司令部被占领之后，就不会有任何事情发生了。但和司令部被占领同时发生的事件，全都要输出。</p><p><strong>输入</strong></p><p>第一行是t,代表测试数据组数</p><p>每组样例共三行。</p><p>第一行，4个整数 M,N,K, T。其含义为：<br>每个司令部一开始都有M个生命元( 1 &lt;= M &lt;= 100000)<br>两个司令部之间一共有N个城市( 1 &lt;= N &lt;= 20 )<br>lion每前进一步，忠诚度就降低K。(0&lt;=K&lt;=100)<br>要求输出从0时0分开始，到时间T为止(包括T) 的所有事件。T以分钟为单位，0 &lt;= T &lt;= 6000</p><p>第二行：五个整数，依次是 dragon 、ninja、iceman、lion、wolf 的初始生命值。它们都大于0小于等于200</p><p>第三行：五个整数，依次是 dragon 、ninja、iceman、lion、wolf 的攻击力。它们都大于0小于等于200</p><p><strong>输出</strong></p><p>对每组数据，先输出一行：</p><p>Case n:</p><p>如对第一组数据就输出 Case 1:</p><p>然后按恰当的顺序和格式输出到时间T为止发生的所有事件。每个事件都以事件发生的时间开头，时间格式是“时: 分”，“时”有三位，“分”有两位。</p><p><strong>样例输入</strong></p><pre><code>120 1 10 40020 20 30 10 205 5 5 5 5</code></pre><p><strong>样例输出</strong></p><pre><code>Case 1:000:00 blue lion 1 bornIts loyalty is 10000:10 blue lion 1 marched to city 1 with 10 elements and force 5000:50 20 elements in red headquarter000:50 10 elements in blue headquarter000:55 blue lion 1 has 0 sword 1 bomb 0 arrow and 10 elements001:05 blue lion 1 ran away001:50 20 elements in red headquarter001:50 10 elements in blue headquarter002:50 20 elements in red headquarter002:50 10 elements in blue headquarter003:50 20 elements in red headquarter003:50 10 elements in blue headquarter004:50 20 elements in red headquarter004:50 10 elements in blue headquarter005:50 20 elements in red headquarter005:50 10 elements in blue headquarter</code></pre><p><strong>提示</strong></p><p>请注意浮点数精度误差问题。OJ上的编译器编译出来的可执行程序，在这方面和你电脑上执行的程序很可能会不一致。5 <em>0.3 的结果，有的机器上可能是 15.00000001，去尾取整得到15,有的机器上可能是14.9999999，去尾取整后就变成14。因此,本题不要写 5</em> 0.3，要写 5 * 3 / 10。</p><p><strong>来源</strong></p><p>Guo Wei</p><h2 id="部分代码实现"><a href="#部分代码实现" class="headerlink" title="部分代码实现"></a>部分代码实现</h2><p>完整的代码可以去<a href="https://github.com/zhkgo/codeTemplate/tree/main/gameMoudle/World_of_Warcraft_3" target="_blank" rel="noopener external nofollow noreferrer">github</a>看,这边只给出了一些类的声明。</p><p>城市类声明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> CITY_H</span><span class="token macro property">#<span class="token directive keyword">define</span> CITY_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"warriors.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"arm.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"world.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Warrior</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">City</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> c_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市编号</span> list<span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span> red_warriors<span class="token punctuation">,</span>blue_warriors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//红蓝阵营的武士</span> <span class="token function">City</span><span class="token punctuation">(</span><span class="token keyword">int</span> c_id<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">c_id</span><span class="token punctuation">(</span>c_id<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">addWarrior</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士进入该城市</span> <span class="token keyword">void</span> <span class="token function">removeWarrior</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士离开该城市</span> list<span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span> <span class="token function">battle</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> w1<span class="token punctuation">,</span>Warrior<span class="token operator">*</span> w2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个武士在该城市展开战斗，返回存活的武士</span> <span class="token keyword">void</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断该城市是否有战斗发生，如果有则展开战斗</span> <span class="token keyword">void</span> <span class="token function">wolfPlunder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果该城市有wolf，则他可以开始抢夺武器</span> <span class="token keyword">void</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//该城市报告有哪些武士到达了此城市</span> <span class="token keyword">void</span> <span class="token function">warriorReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在该城市的武士报告自己的武器持有情况</span> <span class="token keyword">void</span> <span class="token function">lionRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在该城市的lion若忠诚度不够，则可以逃跑了！</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>世界类声明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> World_H</span><span class="token macro property">#<span class="token directive keyword">define</span> World_H</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;list></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MESSAGE_LENGTH 300</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"city.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Headquarter</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">City</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//世界类</span><span class="token keyword">class</span> <span class="token class-name">World</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> now<span class="token punctuation">;</span> Headquarter <span class="token operator">*</span>h1<span class="token punctuation">,</span><span class="token operator">*</span>h2<span class="token punctuation">;</span> vector<span class="token operator">&lt;</span>City<span class="token operator">></span> citys<span class="token punctuation">;</span> <span class="token function">World</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>Headquarter<span class="token operator">*</span> _h1<span class="token punctuation">,</span>Headquarter <span class="token operator">*</span>_h2<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重启世界，h1为红阵营，h2为蓝阵营，N为中间城市数量</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>message<span class="token punctuation">,</span><span class="token keyword">bool</span> timer<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//世界日志</span> <span class="token keyword">bool</span> <span class="token function">addTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间流逝 返回true代表有总部被占领</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">extern</span> World mlog<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>武士类声明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> WARRIORS_H</span><span class="token macro property">#<span class="token directive keyword">define</span> WARRIORS_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"world.h"</span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"arm.h"</span> </span><span class="token keyword">extern</span> <span class="token keyword">const</span> string names<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士类</span><span class="token keyword">class</span> <span class="token class-name">Warrior</span><span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAX_ARMS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士最多持有武器数量</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士编号</span> string name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士类型 </span> <span class="token keyword">int</span> health<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士生命值</span> <span class="token keyword">int</span> ack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士攻击力</span> list<span class="token operator">&lt;</span>Arm<span class="token operator">*</span><span class="token operator">></span> arms<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士持有的武器</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士所在位置</span> string headq<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//所属司令部</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>arms<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> curArm<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士下一个要使用的武器 </span> <span class="token function">Warrior</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//放置武士</span>  pos<span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">goAhead</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前进</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//准备战斗</span> <span class="token keyword">bool</span> <span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//是否死亡</span>  <span class="token keyword">return</span> health<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">bool</span> <span class="token function">hasArms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//是否拥有武器</span>  <span class="token keyword">return</span> arms<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">getArmFrom</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> enemy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从死亡的敌人那边抢夺武器</span> string <span class="token function">totName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//武士全名 总部+自身类别+编号</span>  <span class="token keyword">return</span> headq<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token function">to_string</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">bool</span> <span class="token function">noMoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示武士不会再造成任何伤害，并且武器状态不会变化</span> <span class="token keyword">void</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士报告自身武器持有情况</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">attack</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> enemy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士攻击敌人</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">beAttacked</span><span class="token punctuation">(</span><span class="token keyword">int</span> harm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士受到伤害</span> <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Warrior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span>arms<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">delete</span> p<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">dragon</span><span class="token operator">:</span><span class="token keyword">public</span> Warrior<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">double</span> morale<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//士气</span> <span class="token function">dragon</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token punctuation">,</span><span class="token keyword">double</span> morale<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">yelled</span><span class="token punctuation">(</span><span class="token keyword">int</span> c_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士欢呼</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ninja</span><span class="token operator">:</span><span class="token keyword">public</span> Warrior<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">ninja</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Warrior</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"ninja"</span><span class="token punctuation">,</span>health<span class="token punctuation">,</span>ack<span class="token punctuation">,</span>headq<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  arms<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ArmFactory<span class="token operator">::</span><span class="token function">product</span><span class="token punctuation">(</span>id<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  arms<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ArmFactory<span class="token operator">::</span><span class="token function">product</span><span class="token punctuation">(</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">iceman</span><span class="token operator">:</span><span class="token keyword">public</span> Warrior<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">iceman</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Warrior</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"iceman"</span><span class="token punctuation">,</span>health<span class="token punctuation">,</span>ack<span class="token punctuation">,</span>headq<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  arms<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>ArmFactory<span class="token operator">::</span><span class="token function">product</span><span class="token punctuation">(</span>id<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">goAhead</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//iceman前进 减少生命值</span>  health <span class="token operator">-</span><span class="token operator">=</span> health<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Warrior<span class="token operator">::</span><span class="token function">goAhead</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">lion</span><span class="token operator">:</span><span class="token keyword">public</span> Warrior<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> loyalty<span class="token punctuation">;</span> <span class="token keyword">int</span> lionk<span class="token punctuation">;</span> <span class="token function">lion</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token punctuation">,</span><span class="token keyword">int</span> loyalty<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> lionk<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">goAhead</span><span class="token punctuation">(</span><span class="token keyword">int</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lion前进 减少忠诚度</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">wolf</span><span class="token operator">:</span><span class="token keyword">public</span> Warrior<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">wolf</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> health<span class="token punctuation">,</span><span class="token keyword">int</span> ack<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> headq<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">Warrior</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token string">"wolf"</span><span class="token punctuation">,</span>health<span class="token punctuation">,</span>ack<span class="token punctuation">,</span>headq<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">wolfgetArmFrom</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> enemy<span class="token punctuation">,</span><span class="token keyword">int</span> c_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//wolf在某城市抢夺武器</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>武器类声明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> ARM_H</span><span class="token macro property">#<span class="token directive keyword">define</span> ARM_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> string armNames<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Warrior</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Arm</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">int</span> arm_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器编号</span> <span class="token keyword">int</span> ackp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器伤害百分比</span> <span class="token keyword">int</span> used<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器耐久度</span> <span class="token function">Arm</span><span class="token punctuation">(</span><span class="token keyword">int</span> arm_id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> ackp<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">int</span> used<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">arm_id</span><span class="token punctuation">(</span>arm_id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ackp</span><span class="token punctuation">(</span>ackp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">used</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">arm_cmp_use</span><span class="token punctuation">(</span>Arm<span class="token operator">*</span> a1<span class="token punctuation">,</span>Arm<span class="token operator">*</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器使用优先级 优先编号最小的 优先使用耐久度较低的</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">arm_cmp_get</span><span class="token punctuation">(</span>Arm<span class="token operator">*</span> a1<span class="token punctuation">,</span>Arm<span class="token operator">*</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器抢夺优先级 优先编号最小的 优先抢夺耐久度较高的</span> <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">attack</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> owner<span class="token punctuation">,</span>Warrior<span class="token operator">*</span> enemy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用该武器进攻</span> <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Arm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//宝剑</span><span class="token keyword">class</span> <span class="token class-name">sword</span><span class="token operator">:</span><span class="token keyword">public</span> Arm<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">sword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Arm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//炸弹</span><span class="token keyword">class</span> <span class="token class-name">bomb</span><span class="token operator">:</span><span class="token keyword">public</span> Arm<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Arm</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//弓箭</span><span class="token keyword">class</span> <span class="token class-name">arrow</span><span class="token operator">:</span><span class="token keyword">public</span> Arm<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">arrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Arm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器生产工厂</span><span class="token keyword">class</span> <span class="token class-name">ArmFactory</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token keyword">static</span> Arm<span class="token operator">*</span> <span class="token function">product</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//生产编号为id的武器</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>司令部类声明</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> HEADQUATER_H</span><span class="token macro property">#<span class="token directive keyword">define</span> HEADQUATER_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"arm.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"world.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"warriors.h"</span></span><span class="token keyword">extern</span> <span class="token keyword">int</span> HP<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> ACK<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Headquarter</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span> <span class="token keyword">int</span> power<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//司令部生命元</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> order<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士生产顺序</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士数量</span> <span class="token keyword">int</span> bound<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ֹͣ停止生成边界，保留使用</span> list<span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span> warriors<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士列表 </span> <span class="token keyword">int</span> w_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下一个生成武士的编号</span> <span class="token keyword">int</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向武士生产顺序，表示下一个生产的武士所在下标</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总部所在位置</span> <span class="token keyword">int</span> lionk<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武士lion每前进一步下降的忠诚度</span> <span class="token keyword">int</span> dir<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 该总部武士的前进方向</span> list<span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span> enemys<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//到达该总部的敌人，当前最多只有一个，保留为列表</span><span class="token keyword">public</span><span class="token operator">:</span> string name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总部名称</span> <span class="token keyword">bool</span> stop<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总部是否停止生产武士</span> <span class="token function">Headquarter</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> order<span class="token punctuation">,</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>name<span class="token operator">=</span><span class="token string">"headquarter"</span><span class="token punctuation">,</span><span class="token keyword">int</span> power<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">int</span> lionk<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">int</span> dir<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">power</span><span class="token punctuation">(</span>power<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">order</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">w_id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">pos</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">lionk</span><span class="token punctuation">(</span>lionk<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">{</span>  bound<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>  stop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span>order<span class="token punctuation">)</span><span class="token punctuation">{</span>   bound<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>bound<span class="token punctuation">,</span>HP<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">enemysReach</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> wa<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//敌人抵达总部</span>  enemys<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> Warrior<span class="token operator">*</span> <span class="token function">born</span><span class="token punctuation">(</span><span class="token keyword">int</span> hero_id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//总部生产指定编号的武士</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>power<span class="token operator">>=</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   power<span class="token operator">-</span><span class="token operator">=</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">;</span>   count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   Warrior<span class="token operator">*</span> hero<span class="token operator">=</span><span class="token keyword">nullptr</span><span class="token punctuation">;</span>   <span class="token keyword">switch</span> <span class="token punctuation">(</span>hero_id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>     hero <span class="token operator">=</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">dragon</span><span class="token punctuation">(</span>w_id<span class="token operator">++</span><span class="token punctuation">,</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>ACK<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">*</span>power<span class="token operator">/</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>     hero <span class="token operator">=</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">ninja</span><span class="token punctuation">(</span>w_id<span class="token operator">++</span><span class="token punctuation">,</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>ACK<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>     hero <span class="token operator">=</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">iceman</span><span class="token punctuation">(</span>w_id<span class="token operator">++</span><span class="token punctuation">,</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>ACK<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>     hero <span class="token operator">=</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">lion</span><span class="token punctuation">(</span>w_id<span class="token operator">++</span><span class="token punctuation">,</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>ACK<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>power<span class="token punctuation">,</span>name<span class="token punctuation">,</span>count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>lionk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>     hero <span class="token operator">=</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Warrior<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">wolf</span><span class="token punctuation">(</span>w_id<span class="token operator">++</span><span class="token punctuation">,</span>HP<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>ACK<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>count<span class="token punctuation">[</span>hero_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> hero<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">lionRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//lion 逃跑，移除指定武士</span>  warriors<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>   lion<span class="token operator">*</span> lp<span class="token operator">=</span><span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>lion<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>lp<span class="token operator">!=</span><span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> lp<span class="token operator">-</span><span class="token operator">></span>loyalty<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">clearDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//清理死去的武士</span>  warriors<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Warrior<span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">isDead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">goAhead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//所有武士前进一步 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span>warriors<span class="token punctuation">)</span><span class="token punctuation">{</span>   p<span class="token operator">-</span><span class="token operator">></span><span class="token function">goAhead</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//报告总部自身生命元情况</span>  string message<span class="token operator">=</span><span class="token function">to_string</span><span class="token punctuation">(</span>power<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" elements in "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" headquarter"</span><span class="token punctuation">;</span>  mlog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">warriorReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该总部的武士报告自身武器情况，（保留使用，原题要求按照城市顺序报告）</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span>warriors<span class="token punctuation">)</span><span class="token punctuation">{</span>   p<span class="token operator">-</span><span class="token operator">></span><span class="token function">report</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">bool</span> <span class="token function">enemyReport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//该总部如果存在敌人则被占领并播报。若被占领则返回true结束此局游戏</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>p<span class="token operator">:</span>enemys<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> message<span class="token punctuation">[</span>MESSAGE_LENGTH<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token function">sprintf</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span><span class="token string">"%s reached %s headquarter with %d elements and force %d"</span>   <span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">totName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>health<span class="token punctuation">,</span>p<span class="token operator">-</span><span class="token operator">></span>ack<span class="token punctuation">)</span><span class="token punctuation">;</span>   mlog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>enemys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   mlog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">" headquarter was taken"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">bool</span> <span class="token function">bornNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//生产下一个武士</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Warrior<span class="token operator">*</span> war<span class="token punctuation">;</span>  war<span class="token operator">=</span><span class="token function">born</span><span class="token punctuation">(</span>order<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cur<span class="token operator">=</span><span class="token punctuation">(</span>cur<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>order<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>war<span class="token operator">==</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   stop<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  war<span class="token operator">-</span><span class="token operator">></span><span class="token function">place</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>  warriors<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>war<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">~</span><span class="token function">Headquarter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>wa<span class="token operator">:</span>warriors<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">delete</span> wa<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span></code></pre><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><h3 id="实践了一些知识"><a href="#实践了一些知识" class="headerlink" title="实践了一些知识"></a>实践了一些知识</h3><ol><li>成员函数的声明和实现分离，很大程度上能解决循环依赖问题。</li><li>成员函数在声明后，不需要在实现部分注明其是否static 是否virtual等等。</li><li>成员函数的默认参数只需要在实现或者声明部分注明即可，只能选其中一个。一般选择在声明部分设置默认参数，这样一来方便修改，二来能够在其他地方调用的时候能够正确匹配到该成员函数。</li><li>一些全局变量在.cpp文件中定义，在.h中extern可以在一定程度上解决变量重复定义问题。</li><li>优雅的系统性设计有助于代码的拓展与修改。</li></ol><h3 id="内存泄露检测工具的初次使用"><a href="#内存泄露检测工具的初次使用" class="headerlink" title="内存泄露检测工具的初次使用"></a>内存泄露检测工具的初次使用</h3><p>内存泄露工具valgrind的第一次使用。对于new出来的每把武器，我都交给战士自身来delete。对于new出来的每个武士，我都交给其所属的司令部来delete，这样可以防止重复delete的问题。写完代码后我突发奇想用内存泄露检测工具来看看我是否存在内存泄露。然后我满怀期待的输入了</p><pre class=" language-bash"><code class="language-bash"> valgrind --leak-check<span class="token operator">=</span>full --show-reachable<span class="token operator">=</span>yes --track-origins<span class="token operator">=</span>yes  -v ./war3 <span class="token operator">&lt;</span>in.txt</code></pre><p>然后就返回给了我这个</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">==</span>4067047<span class="token operator">==</span> 168 bytes <span class="token keyword">in</span> 7 blocks are definitely lost <span class="token keyword">in</span> loss record 15 of 15<span class="token operator">==</span>4067047<span class="token operator">==</span>    at 0x483BE63: operator new<span class="token punctuation">(</span>unsigned long<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /usrb/x86_64-linux-gnualgrindgpreload_memcheck-amd64-linux.so<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x10B647: ArmFactory::product<span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x1136CA: iceman::iceman<span class="token punctuation">(</span>int, int, int, std::__cxx11::basic_string<span class="token operator">&lt;</span>char, std::char_traits<span class="token operator">&lt;</span>char<span class="token operator">></span>, std::allocator<span class="token operator">&lt;</span>char<span class="token operator">></span> <span class="token operator">></span> const<span class="token operator">&amp;</span>, int<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x113B73: Headquarter::born<span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x114408: Headquarter::bornNext<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x1130A2: World::addTime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span>    by 0x10E769: main <span class="token punctuation">(</span>in /home/zhkgo/clearn/war/war3<span class="token punctuation">)</span><span class="token operator">==</span>4067047<span class="token operator">==</span> <span class="token operator">==</span>4067047<span class="token operator">==</span> LEAK SUMMARY:<span class="token operator">==</span>4067047<span class="token operator">==</span>    definitely lost: 1,464 bytes <span class="token keyword">in</span> 61 blocks<span class="token operator">==</span>4067047<span class="token operator">==</span>    indirectly lost: 0 bytes <span class="token keyword">in</span> 0 blocks<span class="token operator">==</span>4067047<span class="token operator">==</span>      possibly lost: 0 bytes <span class="token keyword">in</span> 0 blocks<span class="token operator">==</span>4067047<span class="token operator">==</span>    still reachable: 0 bytes <span class="token keyword">in</span> 0 blocks<span class="token operator">==</span>4067047<span class="token operator">==</span>         suppressed: 0 bytes <span class="token keyword">in</span> 0 blocks<span class="token operator">==</span>4067047<span class="token operator">==</span> <span class="token operator">==</span>4067047<span class="token operator">==</span> ERROR SUMMARY: 15 errors from 15 contexts <span class="token punctuation">(</span>suppressed: 0 from 0<span class="token punctuation">)</span></code></pre><p>虽然没学过valgrind的，但是它的提示确实很好用，很明显可以看到哪里new出来的对象出现了内存泄露。</p><p>这边可以看到调用栈，生产的武器有些没有被销毁，我就回头去看了一下代码。在武器耐久度为0的时候，我直接从武士的成员list中移除了这个武器，并没有delete，这样在武士类被析构的时候，武器也不会出现在list里，就不会被delte，所以就导致了内存泄露。最后通过加上delete自然就解决了这个问题。 其实最好的办法是把移除武器这个操作封装成一个成员函数来使用，默认在移除武器的时候delete这个武器，也可以设置不delete(用于抢夺武器的情况),这样就优雅很多了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 魔兽世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结三场笔试</title>
      <link href="/2022/04/17/programTest/"/>
      <url>/2022/04/17/programTest/</url>
      
        <content type="html"><![CDATA[<h3 id="蚂蚁笔试"><a href="#蚂蚁笔试" class="headerlink" title="蚂蚁笔试"></a>蚂蚁笔试</h3><blockquote><p>蚂蚁金服的笔试是我最早参加的，那时候还是第一次参加笔试，没啥经验，挺紧张的。具体题目我不记得了，但是感受还在。最后3个编程题1题满分，其他两题都只拿了部分分数，一直很可惜。</p></blockquote><p>蚂蚁的笔试题还是比较全面的。因为开始编程题之前，有很多基础知识题，而且不能用本地IDE来解这些题，对我个人来说就挺烦。比如说有一题给定二叉树的后序，让你判断下面哪些中序遍历是可以构造出二叉树的，这种题让我编程实现的话，实现过N次了，但是手动模拟虽然知道怎么模拟，但是就很耗费时间（多选题要一个个模拟下去看看符不符合要求），容易焦虑。</p><p>到了编程题，因为前面已经消耗了很多时间，剩下的时间不多，我就比较着急。第一题看完匆匆忙忙写完就提交，发现过的样例不多，debug继续提交，最后拿了全部分数。第二题也是火速写完，是一个算月账单的题，写完之后发现只拿了部分分数，就一直找bug，浮点数转定点数也上了，愣是找不到(笔试完之后发现输出支出最大的月份，就是纯支出，不能把当月的收入用来抵消支出，导致输出错误)，消耗了贼多的时间，导致最后一题没时间写。</p><p>看到编程题第三题，也就是最后一题，一眼下去没感觉，不知道怎么写，就先预处理出了前缀和，这样复杂度就到了O(n^2),最后写了这个暴力提交。提交完之后发现，第二个n的判断结果是有序的，也就是判断结果是111110000这样的形式，那么显然可以通过二分查找来优化第二个n。发现的时候还剩3分钟，我拿起键盘就是干，把第二个循环写成二分的形式，写完的时候发现还有几秒钟，马上调试，发现还有个小bug没改出来，然后就交卷了，二分的思路肯定是对的，再多一分钟可能就出来了，最后也太紧张了。</p><p>总结一个字就是<strong>赶</strong>。第一次在牛客上笔试，还没经验，以为题目只能顺序做下去，后来才发现可以跳着做。像第二题卡很多时间的原因还有一点，那就是过于自信，相信自己能调出来，殊不知错误的点在于题意理解的偏差。</p><h3 id="网易互娱笔试"><a href="#网易互娱笔试" class="headerlink" title="网易互娱笔试"></a>网易互娱笔试</h3><blockquote><p>4.17号下午3点，笔试总共2个半小时，全是编程题，共有3道题目，我做了大概1个多小时就拿满分走人了。</p></blockquote><p>T1是给定6个足球队，分为6行分别给出名字、积分、进球数、丢球数。最后再给3行表示最后三场比赛的结果，分别是 名字1，名字2，进球1，进球2。<br>属于简单的模拟题，只需要定义一个结构体，再把小于号重载一下就可以拿来排序输出了。</p><p>T2是阴阳师里面的御魂，有最多6个御魂坑，每个御魂的坑，可以放<br>该坑种类的御魂，御魂有两个属性，分别是暴击概率和暴击伤害。要求找到一种御魂搭配，使得暴击概率达到100的情况下，达到最高的暴击伤害。只看最后一句以为是二分，再看一眼，发现每个御魂的坑其实是独立的，不会影响其他御魂坑，具备最优子结构的特性。所以只需要定义一个dp数组，dp[j]表示暴击概率为j的情况下，能达到的最大暴击伤害。每次都枚举全部暴击概率（当然也可以是可能的暴击概率），看看能不能优化暴击伤害。</p><p>每次枚举一个御魂坑位的所有物品时，需要把上一次的状态存到tmp数组里，tmp=dp;状态转移方程 dp[j]=max(tmp[j-w[i]]+tmp[i],dp[j]),其中w[i]表示物品i的暴击概率，ack[i]表示物品i的伤害。<br>总的时间复杂度是O(n*C),n表示物品数量。C表示暴击概率的最大值，我用的是250，当然也可以100，但是要特判一下。个人感觉数据范围还是小了，可以更大。</p><p>T3给定一个地图，从S走到E，地图上有障碍物W，监控M，每回合可以走k步，回合结束的时候不能停在监控M的地方，问最少要几回合能走到E。个人觉得是偏向编码能力考验的题，算法考的不是特别深，就是简单的BFS。值得注意的就是走k步怎么处理，我先算了一下数据范围，发现暴力也能过，只要不重复走同样的格子，毕竟只有最多1w个格子。处理k步的方法也是很暴力，从队列里拿出一个位置后，把当前位置分别加入集合A，B。集合A表示当前这一步需要从集合A里的各个元素展开，集合B表示在这次k步过程中走过的所有点，用来防止来回走扩散出无数点。每次走完一步，就把所有当前步新加入的点放到集合A，等待走下一步。如果在搜索过程中能走到E那就直接返回用到了回合数就好了。只是这样的话是会超时的。还有一个剪枝就是如果搜到了一个位置，之前已经走过了，并且消耗的回合数比现在的少，那就不要再拿去搜了，因为停在那个位置+1个回合可以走k步，而当前搜的剩下步数是小于k的，所以不是最优的。这样就能拿到100%的分数了。</p><p>题目质量还是很好的，特别是第三题，如果思路不是特别清晰，写k步很容易写迷糊，还有去重。</p><h3 id="字节笔试"><a href="#字节笔试" class="headerlink" title="字节笔试"></a>字节笔试</h3><blockquote><p>4.17号晚上7点，总共2个小时，全是编程题，共4题。做了1个小时不到的样子拿了满分走人，过程还是很惊险的。</p></blockquote><p>T1 是给定s,x，表示从s开始到s+x,[s,s+x)有哪些抢新股中签了。中签的概念就是s+x的末N位数和尾数相同。<br>我一开始没注意到。因为他没给数据范围，因为s可以很大我以为暴力循环必然超时。我就一直在想如何从尾数反推序列号，想了好久暂时也没想到什么优雅的办法，就抱着尝试的心态先写个暴力混分，从s循环到s+x，结果拿了60分，感觉还可以我就先切后面的题了。后面其他的都做完了回过头发现s可以最大到32位正整数，用int不太行，那就直接一步到位上longlong,也没必要unsigned int了，最后拿了满分。第一题分值最低却花了我近30分钟，当时还是有点慌的。</p><p>T2 是让你找一个最长的子数组，满足先增后减的形式。只需要预处理出每个位置的元素为最高点能够从往前扩展几格和往后拓展几格就可以做了。 时间复杂度为O(n)，花了大概10分钟不到，也让我缓和了一下。</p><p>T3 是给你一个长度为n的数组，再给你一个整数b，让你求哪些子数组的和对b取余结果是0。看到子数组很果断的就上了前缀和，这样算一个子数组和就只需要O(1)的时间了，其次就是枚举子数组了，如果枚举左右边界的话很显然需要O(n^2)的时间，n最大是10w所以肯定不行。 想想两个前缀和的差值，对b取余结果是0，那不是就等于两个前缀和对b取余的结果相同吗。想到这个就可以用O(n)的时间复杂度来解决这题。当然我用的是map来记录和查询每个前面的前缀和出现每个余数的次数，查询和记录一次时间复杂度是O(logn),所以是总的时间复杂度O(nlogn)，也可以转用unordered_map来达到O(1)查询、记录时间复杂度，考虑到map时间复杂度足够，而且可以少写几个字母就用map了。</p><p>T4是捡西瓜，总共有n个西瓜，每个西瓜两个属性，分别为重量和跳过西瓜数。跳过西瓜数就是捡了这个西瓜后，后面多少个西瓜不能捡。<br>这题一看就是一个动态规划题，应该是可以从后往前规划的。但是笔试的时候思考感觉比较繁琐，毕竟从后往前不太符合人的常规思路，就用了dfs,每次找从i个位置开始捡西瓜，最多能捡多少重量的西瓜，如果这个位置开始搜过了，我下次就不用搜了（记忆化）。<br>这样总共的时间复杂度就是O(n)。</p><p>总结来说笔试体验很好，除了第一题没给范围把我唬住了，废了不少时间。还好有经验先全部题目过一遍，最后回来刚第一题就没那么慌了。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>目前也就参加过这三家的笔试，希望一切顺利，能够找到好的工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 求职 </tag>
            
            <tag> hide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查漏补缺之C++11</title>
      <link href="/2022/04/09/interviewCheck/"/>
      <url>/2022/04/09/interviewCheck/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试杭州某互联网大厂的时候被问了一些C++11的问题，发现还有一些不熟悉的名词和特性，在这边就补充一下。</p></blockquote><h2 id="std-atomic"><a href="#std-atomic" class="headerlink" title="std::atomic"></a>std::atomic</h2><p>算是通过面试发现了一个宝藏吧，可以不用锁来实现线程互斥。通过面试是一个模板类，可以将自定义类，或者基本数据类型作为T来特化atomic类来实现原子类型。<br>在load和store类对象的时候，有一个memory_order参数。这里贴上六个参数分别表示的含义。具体细节可以去<a href="https://en.cppreference.com/w/cpp/atomic/memory_order" target="_blank" rel="noopener external nofollow noreferrer">cppreference</a>上看，还涉及到了x86架构和arm架构。</p><table><thead><tr><th>memory_order</th><th>作用</th></tr></thead><tbody><tr><td>memory_order_relaxed</td><td>只保证当前操作的原子性，不管其他线程的读写顺序</td></tr><tr><td>memory_order_comsume</td><td>确保本线程依赖该变量的读写不会被重新排到当前load之前</td></tr><tr><td>memory_order_acquire</td><td>向前保证，确保所有本线程的读写操作不会被重新排到当前load之前。也就是load后面的语句均未执行。</td></tr><tr><td>memory_order_release</td><td>向后保证，确保所有本线程的读写不会被重排到store后面,也就是说store之前的语句都已经被执行了。</td></tr><tr><td>memory_order_acq_rel</td><td>同时包含acquire和release</td></tr><tr><td>memory_order_seq_cst</td><td>顺序一致性，也就是说执行顺序不会被打乱，会确保每个处理器执行代码的时候与源代码顺序一致，同时多个处理器看到的不同线程交错执行顺序是固定的。</td></tr></tbody></table><h2 id="RTTI"><a href="#RTTI" class="headerlink" title="RTTI"></a>RTTI</h2><p>这个RTTI好像是被问到了，当时我没太反应过来，上来一串英语，终究是不够熟悉。</p><p>结束后我打开C++ Primer Plus,一看目录，诶，正好在520页。翻到520页，熟悉的dynamic_cast 映入眼帘，好家伙原来是这个玩意，当时应该多问问的。</p><p>既然翻到了这里，那也再次学习一下那些已经知道和不知道的知识吧。</p><ul><li><p>RTTI 是运行阶段类型识别(Runtime Type Identification)的简称。 加入C++11的目的主要是为了能够统一标准，让类库不用自己设计一些实现来做到这件事。(<strong>PS</strong>:既然书上说了类库能够自己实现这个，那么怎么实现这个呢？我想了一下，应该还是通过虚函数，最简单的就是设计一个虚函数，函数返回一个字符串或者整数，用字符串或者整数来标定一个特定的类，比如返回0 表示父类，返回1表示子类1，返回2表示子类2…)</p></li><li><p>C++有3个支持RTTI的元素,dynamic_cast、typeid以及type_info。<strong>RTTI应该只用于包含虚函数的类层次结构。</strong> 因为若没有虚函数，那么析构函数也不是虚函数，那么将子类的对象交给基类指针后，delete基类指针，调用的也是基类的析构函数，子类的一些内容就会产生内存泄露，所以在没有虚函数的情况下，将子类对象交给基类指针来管理是一件不应该出现的事情。</p></li><li><p>dynamic_cast,可以尝试将一个对象的指针转换成一个特定类型的指针，如果不能转换就返回nullptr。(只能将指针转成对象类型的指针和对象类的基类指针。) 当然也可以用于转换引用，但是因为没有空引用的定义，所以不能转换时就会抛出bad_cast异常。</p></li><li><p>typeid运算符和type_info类。调用typeid可以直接返回一个对象的type_info，type_info有个成员函数name(),返回一个包含类型信息的字符串，通常是类名（当然具体要看厂商实现），typeid运算符能确定两个对象是否为同种类型。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>章的碎碎念</title>
      <link href="/2022/04/01/reflection20220401/"/>
      <url>/2022/04/01/reflection20220401/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ad2efbd3426e693b5b3238a43232ce9b29c1cd48f3cbd92c424c757e73d0900b">d537e15114ce275fe9b181c229b1c2703d0c3f1fd3e0274ec14908080da764705c1b45cf6826f0ac4f3ba44b4ce9ce52fc48d7eed94329a4c5815fd8f62c4d6273794d3e22bccb8c1d6600ccad2663a77f4bcca7606df918b4685ad1987cf59ac9047994a2b39afab01617bdaaa6264945ed02750a0786434b6d456d2aee536bd409ec00e784c59b1d95b7d2689bd2c89b95f51d21f85ea817741293508670215c77e17ae4dc24b10ef1f278a4407f9765cc68d85b7a70f181101089d2686435b684a90ccdcae8db7c754555c3874c61243751068f9af3013fc5012fbf2bf2cfdccf4cf200955d485679221825d5e7104eceed7c49f09d1c0fe74562fee9343247825552942e6c81a2738fa063f59e0156286a5c9cd7ef8f95c59228be1b7f05963153098a756a00f334a6b2f6007c0f06f9b37f8fb254c18f3e61b34a7d8f54e9e0581deab5a72cb8f759c11db32d19d95449c2051549433ea6e7ca04c1fec830952955f039571901ff356e70609928106ac37cbb45d85ea1ee48d7763edf8f640cafcfcb48b3694f7fe287df6328ef6a4a19873fb665438435a1a312e0795611cbae8dd63c62094c27b0880b692dc56664b3168d5c6d6e7d7ef76b03973e46f8c1a00269c20df13a409199b31321dff5e9430fb41148cadffe89dd9fa48ed4923f9e82263827e98945131fbbab0ac4da8466a88b1c568c5ab64e940f64bb9bd07abae5e4cc1f38fafa08fd9e71b6f8e558c940cedc6ee806e5433dd13f8e5c01e0899c220e567a5e0b58cad6845f2834aaf5c36dfba3f891d502840b1b5e770a15eaec1d3f1bd96b414ff35d6a1cef77dfdb29b6a0b26bb8a1ba6c150ddb51e4e20f3701d8748b172d6cf94cbf6734ad89198378eb4de0adb377ade8fb9ee365316e8cebaa1b5d34371740f269b70fa159d81bb5d1d65a17fa57315835e68ad19629374902f3b211db38cd4cecb5c3be5d0518f8044e303df97593607ffe91773bc4193992119f460ee6b5ed993bdb5b8a8aae7b53d0e508b7d8866655794662c3dcce0dd896c7c23b051541fdc2f5900402a73ab91a49e6a3c1adbf0c143c6c38ff6b3f927d8a695a8c69469dce51b93d94e069eae20174b2e33437bcbf09af8450dee90825ab68a8c9c3ec6852dbb556ba64f3b244370892a22a35adbcc9ca318c228b335c41d993cf3489ced09f651e9d80acdba2f3a28845376ed0279322e0feb3a4600f9d497e9873a68f96399552d0f289f0a4c41f9fa128a2208e954f51428d6aa779814523d9ef1aa99de0906f3525018be64f9093a08af6e613f12b81aeb839c010726281f3b03172c2462e4756ca2fd164b646150280ed787cdb99ccb79d0264ba34afb9313a015bbf7e093ebcc2fba9289fe8b2ba9b2f752bab662b954b136872990ce1509298563fb8db1d06c45ca314b392d57958a0aa318f34b21716cd7426a94e6e7b0fbc4e3d9cf696bf8a93db5be61f48b2b4f5db91f89e769e3ded69aa2e47eced8246663b0c91929f755457d6444ada443d6c8026056abd7982db7ec4f70815067e1376860207035ab6843c5396d16c6e3ff29f0197b2a60e3b5fafee77ee426dc1228870ad608b3e99d6f5d2e303259ae88ce6462d23d7a02e259a7d04db4a93c0d8bf883c2f2f8385dc0b7f3b3d8d51ce47135378d4c2321b61a143f7b7c0ea953c69dc06fa5677f6bf5f04c556449c8519c53f6d63a855afd772c21f73ff2f2b3541d37aea67c2b8bd48690f69c5b934d83bc2f7f56c5b65a53b4b6417c9de05a859e7e98e03b7c7fa7ad98d46b011dfee2cb6de7e5f4ecd5d46472fa0b425222ceb48ed3d4b40263ccd5d7b474bd6de1b264ec1d16ffdeec60436db9e582b56326fbc4a8df8ee0f30ac0c6463a2150dfab878ae1b42da3ecb5491485273036654ca271e739e37f57a374943ba5158969fffc2c86c2b4688b12f2adf76dc30435eaadc2b6f74b5edbdfe4a13ea7a465240d00ca46e8da9ae30ba5bac0e4b72f7bfcd1c880aa7727bc12484bbd04a2cc5e9fee9d0a2d479c09af9ab3f42c2a7c6d8a0ed2253f7beae4c7ffd5de527cdb2f17780a7a3262b073f739655defab638cd52daae631ce0bc131ef8dd76a92f8c3a426f1c6e5e54ed61995abb6b0e0cb10210baaa359b736e146f2db2cc5c2453ff4125547085a4ead604ee44b7034a4c3adfecc40e5a053703213e43ffd6239e8260e833e6ab9e9bd4bb4c8b452389aa7bb96a546220bfec937b3f09b5e07f69d1b959dd985a75730ffe22d8f4873a8ddc1d4c7311166e76e245e46bf725c03af4374034da893c9b1fa6360a98668ebf04a0cc67212244701e61376b897bab4eb6530fb6ed277bae61e426b75ade493ab59cfab8841378bef5c90b496d5532ed0d7ffcaf10c1717b4124eaae7ef352969e22726ce1616ddb5725682720c0e071443951bc94b2509449372c07fcd838a451785ea57aca4f5bb41568de6a527f7d123cb96c10177867676d6c54836bec9a4515d285c27e833445fae7d2ca5281ba59642918896d5b7f6ff6598f5828d0cfdfa8aecf8689de7fc3e1f97c7359665efda4e7729a01de7368e99d1aab9c9e8d17990d37048df95f510623b5f57050939e8ed91a043018c3ecee6097e4d378cec9ec310dab121ee2b6a5e136c99eab4d5fd8db9ede7d0dcaafbc7ecf1b3eef6ab59d9cd2f411e00afbf6d88eae365151eb1a5e24a8f1dfdd975b68aaee622293b8d8dea7a44078b408166ca7980022d1c8dc9ab9889c3629edf1effa3c2fdba41db4dc4bae74bc3925a3eb03961cd5d6beed6cf0631086bb08f7886f8452986b1a55c268a3a1fb9ced974f4df8621898b657bc06aa1579e620178c1f4f5d9fd7ef0f294c3f90bac6b53603ee06c97f7af96eadcff07aa0c69ff411ba0043fb0ff3c0ecc4792ecbcaae7f0d2955c9fdb7bd994cc8ef868bfff2c4d7d2d5975e2e79a2d7fa30e2fffb878b943b5b5123e85fb31f29c4fccc35c5bc13ec7c48661765fb73d135f916e9d4fc11ed8dc35c2d1ac20e39320e1ebf0f7c1981f7e22657dc92cc463c44e830f1481f13d86aa4e47d4984b382bf5a65a8b45465428a68737fa6eacee86a11052839aeda38a0fea70291e8808d663161c5f73a11d2d31f297dd2f58cddac1016796fe7f436289b35f3d4495631b95bdfb4971dbf022ef65589ff539e067ea82a6762c67e72a54553b03a82cf69036efb26e03fc7a909b7339229237fe321a4ebdcf5836e0a428790a40fd0362f802111c997633fc089af7faaef0d5532ff9efb7a8fef2a6c3d80cce41e0a4903a85dee9878436d7e9c48ec365b373594ec37c6f72e011de687dff7d36a350c0b9f6b39493dc10756e0b0c69e54c52fcbdb559b7263730e0a42eea021058569a90fb20d0a7fb46b55b5de007fffbebd5c91b110a2f8250e8bd3782d3ca4854016e593f88705b867ae7287dfdf4478ed3eb7dfd66b7d82152580bf23c35e10471f4bf1f3123c4c91f28932742d397dd6b34c5d8c0e36c1f6fc413e5252f298eea19a772b8094b6f8a402d023a490de8c787382538badd3511184ec330d9c9a2254fc4850e10ce65b0c77fa8dd1f30702532981527714d4ea84fbf7e397c796a23d4b19293e565d977a75eb90ce422e0d86a163ee6ee63ebee5a4f806339c68439eb9c540f8b71f4b036083b5347e7a8fe914009a2a96a43a56764245749d0c2fb00f3252a25f7704f0ca77569eae11cfcb605462947ba4a9e1da852421f8f50d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章已加密，点击输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣刷题纪念</title>
      <link href="/2022/03/30/leetcoderecord/"/>
      <url>/2022/03/30/leetcoderecord/</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前大一的时候就感觉到纯粹刷题的乐趣，后来因为各种各样的因素，学校对各类程序设计竞赛的支持力度也不是特别大，就放弃了。后来在研究生继续找回了这个乐趣。</p></blockquote><p>说起在力扣刷题也有一段时间了，一开始觉得题目不会特别难，就没怎么做。后来发现大家都在用，而且也有很多面试题在这上面，就来刷一刷。</p><p>每天刷每日一题+剑指offer+日常周赛，解题速度和能力都有了一定的提高，如果还需要进一步提高感觉得去codeforces上练练手了。</p><p>竞赛积分也到了前1%。有时候感觉有那么些功利，但是能通过刷题这种方式来追求上分的乐趣，不比每天埋头玩5V5被队友狂喷好多了?</p><p><img src="/images/imgleetcode.png"></p><p>最后也希望自己以后即便找到工作，也能偶尔上去刷刷题，算是一种思维的体操,锻炼思维吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++系统编程复习</title>
      <link href="/2022/01/29/cpplearnConclusion/"/>
      <url>/2022/01/29/cpplearnConclusion/</url>
      
        <content type="html"><![CDATA[<h3 id="Q1-C-静态库和动态库的区别"><a href="#Q1-C-静态库和动态库的区别" class="headerlink" title="Q1 C++静态库和动态库的区别?"></a>Q1 C++静态库和动态库的区别?</h3><ol><li><p>静态库是在链接阶段，将汇编生成的目标文件和引用到的库一起链接打包到可执行文件中，而动态库则是在程序运行时才会被载入。</p></li><li><p>静态库的相关函数库在链接时已经被打包了，所以移植很方便。<br>动态库需要在移植程序时将库文件.dll or .so一起移植。</p></li><li><p>因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行的文件。如果多个进程都需要共享某些函数，则存在空间浪费问题。<br>而动态库一个可以实现进程之间共享（生成地址无关的编译程序）。</p></li><li><p>静态库库函数更新后需要重新打包所有使用到该静态库的目标程序。而动态库只需重新生成.so文件进行替换即可。</p></li></ol><h3 id="Q2-动态库加载失败"><a href="#Q2-动态库加载失败" class="headerlink" title="Q2 动态库加载失败?"></a>Q2 动态库加载失败?</h3><p>首先用ldd命令查看程序到底会使用哪些动态库，加载动态库默认是从/lib,/usr/lib等路径中搜索，从/etc/ld.so.conf中配置的路径搜索以及环境变量LD_LIBARARY_PATH。</p><h3 id="Q3-虚拟地址空间？文件描述符？"><a href="#Q3-虚拟地址空间？文件描述符？" class="headerlink" title="Q3 虚拟地址空间？文件描述符？"></a>Q3 虚拟地址空间？文件描述符？</h3><p>操作系统会给每个进程对应一个虚拟地址空间，对于32位操作系统，地址空间最多为4GB，2^32B。其中内核空间占1GB,用户空间占4GB。</p><p>内核空间里面有进程控制块PCB，PCB里面有文件描述符表，用于标记该进程所打开的所有文件。</p><p>用户区从低地址往高地址分别为保留区、代码区、全局静态区（数据段，其中已经初始化的存在.data部分 没初始化的存在.bss部分）、堆区、内存映射区、栈区（分配时从高地址到低地址来存）。</p><h3 id="Q4-进程之间的转换？"><a href="#Q4-进程之间的转换？" class="headerlink" title="Q4 进程之间的转换？"></a>Q4 进程之间的转换？</h3><p>分为运行态、就绪态、阻塞态。<br>运行态可以转到就绪态和阻塞态。<br>运行态-&gt;就绪态的原因是时间片到了。<br>运行态-&gt;阻塞态的原因是因为需要等待I/O等事件完成。<br>就绪态只能到运行态，原因是因为被调度。<br>阻塞带只能到就绪态，是因为某个等待的I/O事件完成。</p><h3 id="Q5-进程的创建？Fork及父子进程的虚拟地址空间？"><a href="#Q5-进程的创建？Fork及父子进程的虚拟地址空间？" class="headerlink" title="Q5 进程的创建？Fork及父子进程的虚拟地址空间？"></a>Q5 进程的创建？Fork及父子进程的虚拟地址空间？</h3><p>主要是通过fork函数来创建进程，命令行本身也是一个进程，会复制一个和父进程一模一样的副本。</p><p>fork函数创建进程后，父进程会返回子进程的pid，而子进程会返回-1。 fork在复制父进程空间的时候，会使用写时复制技术，也就是说不会真的复制一份物理内存，只有当对应代码段被写入时才会对其进行内存复制。</p><h3 id="Q6-exec函数族？"><a href="#Q6-exec函数族？" class="headerlink" title="Q6 exec函数族？"></a>Q6 exec函数族？</h3><p>在调用进程内部执行一个可执行文件，然后取代调用进程本身的地址空间。通常是通过fork一个子进程，然后在子进程中调用来实现。</p><h3 id="Q7-进程退出、僵尸进程、孤儿进程、怎么解决僵尸进程？"><a href="#Q7-进程退出、僵尸进程、孤儿进程、怎么解决僵尸进程？" class="headerlink" title="Q7 进程退出、僵尸进程、孤儿进程、怎么解决僵尸进程？"></a>Q7 进程退出、僵尸进程、孤儿进程、怎么解决僵尸进程？</h3><p>进程退出使用exit函数或者_exit函数，其中_exit函数属于系统调用，会立即退出进程并且关闭文件描述符、将子进程的交给进程号为1的进程的子进程，向父进程发送sigchild信号。</p><p>exit函数会调用_exit函数，在调用前会将缓冲区的数据先写入到文件。</p><p>僵尸进程是由于子进程运行结束，父进程没有使用wait或者waitpid来对子进程的资源进行回收造成的。</p><p>孤儿进程是指父进程先于子进程退出了，子进程的父进程就会变成init进程（进程号为1），并有init进程来对它们完成状态收集工作。</p><p>僵尸进程无法杀死，是因为僵尸进程本来就已经死了，就等着父进程收尸。解决问题的关键在于要通过父进程来对僵尸进程的资源进行回收，譬如父进程在收到sigchild信号后执行wait函数来对子进程的资源进行回收。<br>当然还有一个办法就是直接解决父进程，换一个更负责任的父进程（init进程，进程号为1）</p><h3 id="Q8-进程间通信IPC的方式及其原理？"><a href="#Q8-进程间通信IPC的方式及其原理？" class="headerlink" title="Q8 进程间通信IPC的方式及其原理？"></a>Q8 进程间通信IPC的方式及其原理？</h3><ul><li>管道（匿名、有名）<br>匿名管道无文件实体（使用内核内存区的缓冲器），有名管道有文件实体（但是不存储数据）。<br>管道数据的传输是半双工的，数据一旦被读走就在管道中被抛弃。<br>匿名管道只能在有关系的进程之间使用。</li></ul><p>读管道： 有数据，read返回实际读到的字节数，无数据，（写端全关 read返回0，相当于EOF，写端未完全关闭read阻塞）。<br>写管道：管道读端全部关闭，产生SIGPIPE信号，进程异常终止。读端没有全部关闭，管道已满，write阻塞，管道没有满，写入数据，返回写入的字节数。</p><p>有名管道相比管道多了一个路径名，通过路径名来确定是哪个管道，使用的还是内核缓冲区，也就可以实现进程间通信。</p><ul><li><p>内存映射<br>将磁盘文件的数据映射到内存，用户通过修改内存就能修改磁盘文件。</p></li><li><p>共享内存</p></li></ul><p>允许一个或多个进程共享同一块物理内存区域，速度很快但是存在写入冲突的问题，需要进程间同步。</p><p>共享内存与内存映射的区别，</p><p>1.共享内存可以直接创建，内存映射需要文件。</p><p>2.共享内存效率更高。</p><p>3.内存。共享内存都共享同一片内存空间，内存映射区每个进程在自<br>己的地址空间都有独立的内存。</p><p>4.数据安全。</p><p>  进程意外退出。共享内存还在，内存映射区消失。</p><p>  电脑意外死机，共享内存中的数据没了，内存映射区没了。但是磁盘文件还在，也就是内存映射区的数据还在。</p><p>5.生命周期<br>    内存映射区：进程退出，内存映射区销毁。<br>    共享内存在进程退出后还在，要么标记删除（所有关联进程数为0自动删除），或者关机。如果一个进程直接退出，会自动取消和共享内存的关联。</p><ul><li>信号</li></ul><p>通过发送信号来进行进程间通信，最常见的就是通过sigkill来杀死进程，通过sigchild信号来提示父进程子进程已经停止，需要回收资源等。</p><h3 id="Q9-定时器？信号捕捉？SIGCHILD信号？"><a href="#Q9-定时器？信号捕捉？SIGCHILD信号？" class="headerlink" title="Q9 定时器？信号捕捉？SIGCHILD信号？"></a>Q9 定时器？信号捕捉？SIGCHILD信号？</h3><p> 可以通过alarm函数来设置闹钟时间，如果已经有了一个闹钟，那就返回上一个闹钟的剩余时间，否则返回0，不阻塞。<br> 时间到了后会给进程发送SIGALRM信号，默认的处理动作是终止当前进程，可以通过sigaction函数来捕捉该信号，并且调用相关处理函数。</p><p>还有setitimer函数可以循环发送SIGALRM信号，并且能够精确到微秒。</p><p> 信号捕捉使用sigaction函数。之所以不使用signal是因为signal不能设置屏蔽其他信号到来，从而产生二次中断。而sigaction则可以使得信号处于未决状态等待下次中断处理。</p><h3 id="Q10-守护进程的概念？怎么创建？"><a href="#Q10-守护进程的概念？怎么创建？" class="headerlink" title="Q10 守护进程的概念？怎么创建？"></a>Q10 守护进程的概念？怎么创建？</h3><p>守护进程是一个不受终端控制的在后台运行的的孤儿进程。</p><p>要想创建守护进程，需要以下步骤</p><ol><li><p>父进程fork一个子进程后，父进程退出。</p></li><li><p>子进程调用setsid，使得子进程成为新会话组长和新的进程组长，同时失去控制终端。</p></li><li><p>忽略SIGUP信号，会话组长进程终止会向其他进程发送该信号，造成其他进程终止。</p></li><li><p>进制进程重开控制终端。会话组长可以重新申请打开一个终端，为了避免这种情况，可以再fork一个子进程，并且使调用fork的进程退出。</p></li><li><p>关闭不需要的文件描述符。</p></li><li><p>将当前的目录改为根目录。</p></li><li><p>使用unmask(0)将屏蔽字清零，防止访问文件权限受限。</p></li><li><p>处理SIGCHLD信号，譬如将其操作设置为SIG_IGN,这样就不会产生僵尸进程了。</p></li></ol><h3 id="Q11-线程和进程的区别？"><a href="#Q11-线程和进程的区别？" class="headerlink" title="Q11 线程和进程的区别？"></a>Q11 线程和进程的区别？</h3><ol><li><p>进程是资源分配的基本单位，线程是CPU调度的基本单位。</p></li><li><p>进程拥有系统分配的资源，但是线程没有。</p></li><li><p>创建进程系统的开销明显大于创建线程。</p></li><li><p>一个进程可以有多个线程，至少有一个线程。</p></li><li><p>同一进程间的线程可以共享进程的资源，进程间不行。</p></li></ol><h3 id="Q12-条件变量和信号量？"><a href="#Q12-条件变量和信号量？" class="headerlink" title="Q12 条件变量和信号量？"></a>Q12 条件变量和信号量？</h3><ol><li><p>使用条件变量可以一次唤醒所有等待者，而这个信号量没有的功能。</p></li><li><p>信号量是有一个值（状态的），而条件变量是没有的，没有地方记录唤醒（发送信号）过多少次，也没有地方记录唤醒线程（wait返回）过多少次。从实现上来说一个信号量可以是用mutex + counter + condition variable实现的。因为信号量有一个状态，如果想精准的同步，那么信号量可能会有特殊的地方。信号量可以解决条件变量中存在的唤醒丢失问题。</p></li></ol><h3 id="Q13-多线程实现原理？"><a href="#Q13-多线程实现原理？" class="headerlink" title="Q13 多线程实现原理？"></a>Q13 多线程实现原理？</h3><p>把不同线程的代码分开存储在.text段。</p><p>每个线程有独享的栈空间（从进程的栈空间分配）。</p><p>每次线程调度都从线程自身的程序计数器所指的代码段开始执行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> Linux系统编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金发姑娘和N头牛</title>
      <link href="/2022/01/13/ac1952/"/>
      <url>/2022/01/13/ac1952/</url>
      
        <content type="html"><![CDATA[<h3 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接"></a>原题链接</h3><p><a href="https://www.acwing.com/problem/content/1954/" target="_blank" rel="noopener external nofollow noreferrer">https://www.acwing.com/problem/content/1954/</a></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>根据题目，把每头奶牛在不同温度下的产奶量列出来，可以构成一个n*T的矩阵，其中n表示奶牛数量，T表示最大温度。<br>就像下面的矩阵一样。</p><p>XXXYYYZZZZ</p><p>XXYYYZZZZZ</p><p>XYYYYZZZZZ</p><p>我们的目标就是要找到和最大的一列的和。</p><h3 id="差分算法"><a href="#差分算法" class="headerlink" title="差分算法"></a>差分算法</h3><p>因为T比较大，所以直接暴力枚举T肯定是不可行的。观察矩阵可以发现，每一行的值都是三个区间，区间[0,$A_i$-1],[$A_i$,$B_i$],[$B_i$+1,+无穷]，显然可以用差分来表示。</p><p>然而传统差分数组不能够表示这么大的温度，所以需要用map来表示差分的值。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>在插入map数组的时候，每次操作消耗$logn$的时间，操作的6n次。<br>在遍历map数组的时候，由于其有序的性质，只需要n的时间。</p><p>最终时间复杂度为$O(nlogn)$</p><h4 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h4><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>        mp<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> mx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">:</span>mp<span class="token punctuation">)</span><span class="token punctuation">{</span>        cur<span class="token operator">+</span><span class="token operator">=</span>iter<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">></span>mx<span class="token punctuation">)</span><span class="token punctuation">{</span>            mx<span class="token operator">=</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>mx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧式空间对齐的迁移学习[论文复现]</title>
      <link href="/2021/09/28/eafuxian/"/>
      <url>/2021/09/28/eafuxian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间发现华科的迁移学习有点东西，就找了他们的论文来复现一下。<br>《Transfer Learning for Brain-Computer Interfaces: A Euclidean Space Data Alignment Approach》<br>DOI:<a href="https://doi.org/10.1109/tbme.2019.2913914" target="_blank" rel="noopener external nofollow noreferrer">10.1109/TBME.2019.2913914</a></p></blockquote><p>这篇论文主要实现了一个简称EA(Euclidean Align)的迁移方法，和RA(Riemann Align),做了理论上的对比。同时做了迁移和不迁移的对比。实践证明确实有提示。</p><p>其原理主要是通过将每个被试的平均协方差矩阵变成单位矩阵，也就是将每个被试从自身所在域变化到了单位域。具体公式可以去看论文，这边主要是代码实现。</p><p>这一域变化的代码实现如下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduce<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#欧式空间对齐</span><span class="token keyword">def</span> <span class="token function">euclidAlign</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#计算R矩阵</span>    R<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     for i in range(X.shape[0]):</span><span class="token comment" spellcheck="true">#         R=R+np.dot(X[i,:,:],X[i,:,:].T)</span>    R<span class="token operator">=</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> R<span class="token punctuation">,</span>y<span class="token punctuation">:</span>R<span class="token operator">+</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>y<span class="token punctuation">,</span>y<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">,</span>R<span class="token punctuation">)</span>    R<span class="token operator">=</span>R<span class="token operator">/</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>fuduiban<span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> X<span class="token comment" spellcheck="true">#计算矩阵的负二分之一</span><span class="token keyword">def</span> <span class="token function">fuduiban</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">:</span>    v<span class="token punctuation">,</span> Q <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>R<span class="token punctuation">)</span>    ss <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span>v <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#若出现异常值 就补充0</span>    ss<span class="token punctuation">[</span>np<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    re <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Q<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>ss<span class="token punctuation">,</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>Q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#取实数部分</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>real<span class="token punctuation">(</span>re<span class="token punctuation">)</span></code></pre><p>然后根据这个来下载了论文里说的<a href="https://www.physionet.org/physiobank/database/ltrsvp/" target="_blank" rel="noopener external nofollow noreferrer">RSVP数据集</a>。<br>顺便写了一个便于操作的数据加载代码。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mne<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache<span class="token keyword">from</span> mne<span class="token punctuation">.</span>io <span class="token keyword">import</span> concatenate_raws<span class="token punctuation">,</span> read_raw_edfmne<span class="token punctuation">.</span>set_log_level<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token string">"WARNING"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#单文件缓存加载</span>@lru_cache<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getDataByFileName</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">"5-Hz/rsvp_5Hz_03b.edf"</span><span class="token punctuation">,</span>log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>ea<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    raw<span class="token operator">=</span>read_raw_edf<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>preload<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    raw<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>    events_from_annot<span class="token punctuation">,</span> event_dict <span class="token operator">=</span> mne<span class="token punctuation">.</span>events_from_annotations<span class="token punctuation">(</span>raw<span class="token punctuation">)</span>    nt<span class="token operator">=</span>event_dict<span class="token punctuation">[</span><span class="token string">'T=0,x=-1'</span><span class="token punctuation">]</span>    event_dict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> nt<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">:</span> nt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> events_from_annot<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>nt<span class="token punctuation">:</span>            item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>nt<span class="token operator">+</span><span class="token number">1</span>    epochs <span class="token operator">=</span> mne<span class="token punctuation">.</span>Epochs<span class="token punctuation">(</span>raw<span class="token punctuation">,</span> events_from_annot<span class="token punctuation">,</span> event_dict<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span>baseline<span class="token operator">=</span>None<span class="token punctuation">)</span>    d1<span class="token operator">=</span>epochs<span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    d2<span class="token operator">=</span>epochs<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> log<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>d2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    data<span class="token operator">=</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">[</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">]</span><span class="token punctuation">)</span>    labels<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">if</span> i<span class="token operator">&lt;</span>d1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>d1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>d2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#ea 表示是否使用EA做迁移</span>    <span class="token keyword">if</span> ea<span class="token punctuation">:</span>        data<span class="token operator">=</span>euclidAlign<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span>labels<span class="token comment" spellcheck="true">#多个路径的数据整合一起加载</span><span class="token keyword">def</span> <span class="token function">getDataByPaths</span><span class="token punctuation">(</span>paths<span class="token punctuation">,</span>log<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>ea<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> paths<span class="token punctuation">:</span>        tdata<span class="token punctuation">,</span>tlabels<span class="token operator">=</span>getDataByFileName<span class="token punctuation">(</span>filename<span class="token operator">=</span>path<span class="token punctuation">,</span>log<span class="token operator">=</span>log<span class="token punctuation">,</span>ea<span class="token operator">=</span>ea<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tdata<span class="token punctuation">)</span>        labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tlabels<span class="token punctuation">)</span>    data<span class="token operator">=</span>np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    labels<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token punctuation">,</span>labels</code></pre><p>然后是路径生成代码，主要是检查是否有这个文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> ospaths<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    path<span class="token operator">=</span><span class="token string">"5-Hz/rsvp_5Hz_%02da.edf"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        paths<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        path<span class="token operator">=</span><span class="token string">"5-Hz/rsvp_5Hz_%02db.edf"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        paths<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>len<span class="token punctuation">(</span>paths<span class="token punctuation">)</span></code></pre><p>随便选一个基于xdawn的分类器。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pyriemann<span class="token punctuation">.</span>estimation <span class="token keyword">import</span> Xdawn<span class="token keyword">from</span> mne<span class="token punctuation">.</span>decoding <span class="token keyword">import</span> Vectorizer<span class="token keyword">from</span> pyriemann<span class="token punctuation">.</span>estimation <span class="token keyword">import</span> Shrinkage<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> make_pipeline <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>discriminant_analysis <span class="token keyword">import</span> LinearDiscriminantAnalysis <span class="token keyword">as</span> LDAclf3 <span class="token operator">=</span> make_pipeline<span class="token punctuation">(</span>Xdawn<span class="token punctuation">(</span>nfilter<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Vectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     LDA<span class="token punctuation">(</span>solver<span class="token operator">=</span><span class="token string">"lsqr"</span><span class="token punctuation">,</span>shrinkage<span class="token operator">=</span><span class="token string">"auto"</span><span class="token punctuation">,</span>priors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后采用留一被试法来检验跨被试的效果，也就是每次都用10个被试训练，剩下一个被试测试<br>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> balanced_accuracy_score<span class="token comment" spellcheck="true">#均衡准确率</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    trainP<span class="token operator">=</span><span class="token punctuation">[</span>paths<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j<span class="token operator">//</span><span class="token number">2</span><span class="token operator">!=</span>i <span class="token punctuation">]</span>    testP<span class="token operator">=</span><span class="token punctuation">[</span>paths<span class="token punctuation">[</span>j<span class="token punctuation">]</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j<span class="token operator">//</span><span class="token number">2</span><span class="token operator">==</span>i<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>testP<span class="token punctuation">)</span>    train_x<span class="token punctuation">,</span>train_y<span class="token operator">=</span>getDataByPaths<span class="token punctuation">(</span>trainP<span class="token punctuation">,</span>ea<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#迁移与否在这里修改</span>    test_x<span class="token punctuation">,</span>test_y <span class="token operator">=</span> getDataByPaths<span class="token punctuation">(</span>testP<span class="token punctuation">,</span>ea<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    clf3<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>    y_pred<span class="token operator">=</span>clf3<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>balanced_accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20210928151705.png" alt="不用迁移所得结果"><br><img src="/images/20210928151814.png" alt="迁移后的结果"><br><img src="/images/20210928153028.png" alt="提升效果对比"><br>可以看到在多数被试上是有提升效果的。总的提升效果平均在2.2个百分点，虽然看起来不是特别多，但这个在实际中算是不小的提升了。<br><img src="/images/20210928153617.png" alt="原文所达到的效果"><br>当然这个复现过程，使用的分类方法不太一样(主要是因为原文中所用方法的部分参数不知道，比如说xDAWN的滤波器数量、PCA降维的维数、SVM的参数等)，最终结果还比原文的稍微好点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 迁移学习 </tag>
            
            <tag> 论文复现 </tag>
            
            <tag> RSVP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界机器人大赛——脑控机器人参赛感想</title>
      <link href="/2021/09/16/bcicontest/"/>
      <url>/2021/09/16/bcicontest/</url>
      
        <content type="html"><![CDATA[<blockquote><p>经历了两个月的初赛和延期的决赛，最终结果虽然不是特别满意，但也算人生的一个经历。</p></blockquote><h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><p>第一次参加这个比赛，还是比较激动的，赛队名字取了经典的HDU先锋队。初赛主要参加了事件相关电位ERP组的比赛，A榜的结果还算不错，拿了个第一。可能和A榜竞争不那么激烈（个人感觉）也有关系，毕竟其他赛队都是多年传承改进下来的代码。<br><img src="/images/20210916142057.png" alt="初赛a榜成绩"><br>到了B榜大家比赛就更激烈了，虽然相比A榜队伍少了，但是总体来看(提交次数）内卷更厉害了。<br><img src="/images/20210916142324.png" alt="初赛b榜成绩"></p><p>初赛的方法主要还是黎曼几何那一套，这套方法很经典，效果也很好，相比于深度学习神经网络来看，更具备实用性。</p><p>本来只是抱着试一下的心态参加这个比赛，没想到进了决赛，和导师说了之后也非常支持我去参加决赛。</p><h2 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h2><p>决赛也是一波三折，因为疫情原本八月份的决赛直接延期到不知道啥时候，后面确定在9月份。</p><p>到了世界机器人大会会场感觉还是很恢宏。到处都是这个大会的宣传信息以及超大横幅。</p><p><img src="/images/78B095AA5FD319581925FBC2DBFE2644.jpg" alt="进去第一眼"></p><p><img src="/images/FE25E23E6DC7F452F7A1EC1648367B18.jpg" alt="合照"><br><img src="/images/15C5B7A5B4707F387EC2933D79B8B55D.jpg" alt="看表演"></p><p>但是到了比赛现场就感觉稍微差了点，都是临时安排的座位。当然这个和大会本身所在的国际会展中心承包日期也有关系，没有多少时间能够布置比赛现场。<br><img src="/images/DE050F2A611B062D443CB413C413D357.jpg" alt="在调试代码"></p><p>参加决赛的时候最多的感受就是这个比赛一直在等，等着提交代码，等着排队实机调试代码。 毕竟最后只有一次提交机会，不存在调参空间，但是这样反倒也增加了模型的可靠性，如果能够在只有一次提交机会的情况下跑起来，拿到一个好结果，数据还是在线采集的，那这个模型的可靠性就毋庸置疑了。</p><p><img src="/images/65AB223685EDE894C10B972F6DF0E581.jpg" alt="高光时刻"></p><p>但是因为调试的机子是大家共用的，导致我的ERP模型不知道为什么超时了（最后发现其他赛队方法也大同小异，黎曼几何那一套 但是没超时）。最后保险起见临时换了模型，模型直接就不会预测结果了，只会预测非目标，就很差。</p><p>后续的运动想象赛道和情感赛道当做是运气好，结果还不错。运动想象有训练第四，情感脑机接口赛道第二。</p><p>有一说一，虽然是差不多的方法，但是华科前面加了一层迁移学习效果确实很不错，值得我们学习。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 世界机器人大赛 </tag>
            
            <tag> 脑控机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双脑协同RSVP目标检测</title>
      <link href="/2021/09/16/paper/"/>
      <url>/2021/09/16/paper/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如今计算机视觉的目标检测发展的如火如荼，但是相比于人脑的强大认知能力依旧不容忽视。与计算机视觉相比，人的视觉可以理解图像的高级语义，从光照、姿态以及背景变化很大的场景中识别目标的物体。</p></blockquote><h3 id="已投稿到-脑机接口社区-版权所有。转载自脑机接口社区。禁止其他网站转载"><a href="#已投稿到-脑机接口社区-版权所有。转载自脑机接口社区。禁止其他网站转载" class="headerlink" title="已投稿到 脑机接口社区 版权所有。转载自脑机接口社区。禁止其他网站转载"></a>已投稿到 <a href="https://mp.weixin.qq.com/s/u5ag02C8TuYEdf7njiUXzA" target="_blank" rel="noopener external nofollow noreferrer">脑机接口社区</a> 版权所有。转载自脑机接口社区。禁止其他网站转载</h3><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>文章链接(<a href="https://doi.org/10.1016/j.jneumeth.2021.109346" target="_blank" rel="noopener external nofollow noreferrer">https://doi.org/10.1016/j.jneumeth.2021.109346</a>)</p><p><img src="/images/20210916101321.png" alt="期刊"></p><p>为了追求目标检测中的高精确率以及召回率这类业务指标，以往的研究者们大都在单被试RSVP中通过设计实验范式使目标多次出现或是改进ERP的检测方法。但是单被试RSVP容易受到各种形如眨眼、静电干扰等的内部或外部干扰，从而导致被试在目标检测过程中错过目标；而使目标多次出现又增加了时间成本。因此本文引入了一种双被试RSVP实验范式来进行目标检测，该范式中目标只需单次出现。虽然同一任务下单被试目标检测相比于双被试在人力、设备方面消耗更少，对模型的要求相对较低，但<strong>值得注意的是，存在某些重要场景，如安防等，在进行目标检测时对其精确率，召回率等要求更高，需要确定所得的结果更具备可靠性，因而愿意消耗更多的资源来达成这个目的。</strong></p><h2 id="实验及模型设计"><a href="#实验及模型设计" class="headerlink" title="实验及模型设计"></a>实验及模型设计</h2><p><img src="/images/20210916104704.png" alt="实验设计"><br>本文采用两套EEG采集设备，同时对两位被试的脑电信号进行采集和处理。相比于经典的单人进行快速视觉呈现任务，本文中每次实验都有两个被试同时接受来自同一个屏幕的视觉刺激，并通过Neuroscan Synamps2 系统记录以国际10-20系统脑电极分布的64个电极的脑电数据，采样率为1000Hz。将八个被试分成四组进行了四次实验，每次实验有20个sessions，每个session中包含50次刺激呈现。<br><img src="/images/20210916102934.png" alt="脑电信号处理框架"><br>对于所获取的脑电信号以两种不同的方式进行处理后进行归并放入SVM进行分类。<br>其一，通过预训练的神经网络模块进行处理。对于放入神经网络模块的信号，对其按照时间维度进行切分。对于切分后的数据分别通过各自的LSTM模块进行特征提取，使得处于不同时间段的信息能够独立的进行处理。针对不同时间段的不同成分采用不一样的特征提取方式，避免一些在ERP检测中作用相对较小的时间段对作用相对较大的时间段造成干扰。</p><p>其二，该模型的另一模块采取朴素的方法进行特征提取。通过简单的滤波、通道选择、降采样到250Hz后，直接对两位被试的数据进行标准化操作并且平铺后作为特征输出。</p><p>本文中将两位被试的脑电信号通过两个模块进行特征提取。一方面通过预训练的神经网络模块完成了特征层的双脑融合。另一方面，为保留一些原始的特征，通过简单的降采样、标准化等操作完成了数据层的融合。最后将数据层融合所得数据与特征层融合特征一并放入SVM进行分类。</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/images/20210916130950.png"><br>选用了四组通道来对基于两位被试的模型进行观察。结果都是五折交叉验证所得的平均值，预处理器采用了1-40Hz滤波。<br><img src="/images/20210916130900.png"><br>从table3可以看到，在多数情况下，采用双脑的EGG信号对目标进行检测效果要好于单脑的效果。值得注意的是，S3与S4这两位被试的EEG信号进行融合时，存在检测能力不如单人的情况（S4），由table3中的数据进行推测，使用S3的EEG信号进行目标检测的能力相对于S4较弱，因此在将S3与S4进行融合时引入了不少干扰信息，产生了双脑效果不如单脑的现象。<br>相比于单脑而言，双脑对于通道组合变化的敏感度相对较低。单脑模型在通道组合变化时其F1 Score变化较为剧烈，会有超过20%的波动;而双脑模型在通道组合变化时仅有10%左右的波动。</p><p><img src="/images/20210916130922.png"></p><p>从table4可以注意到S3与S4进行融合时存在双脑效果不如单脑的情况，但是除此之外，双脑的效果普遍要好于单脑。随着截取时间的减少，双脑与单脑检测能力的变化与被试有着很大关联，在被试S1+S2与被试S5+S6中，其受截取时间的影响相对较小。而在其余两组被试中则影响较大，可能是由于被试个人之间差异引起的。<br>值得注意的是，融合较好的三组中，双脑采用0.6秒的截取时间，所具备的检测能力能够与单脑采用1秒截取时间相当，甚至超越。</p><p><img src="/images/20210916131506.png"><br>这里剔除掉S3+S4组，将剩余几组的数据进行被试无关的统计。观察其F1S-core的变化，其F1-Score的总体分布在不同通道组合与不同截取时间下均具有良好表现。注意到，双脑模型的分布相比于单脑模型具有更小的标准差，即具备更好的稳定性。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>总的来说，双脑融合相比单脑能够取得更加优异、稳定的结果。当然这需要两位被试具有相对协调的表现，如果一方表现较好，一方表现较差则会导致融合后效果较差。</p><p>对于双脑目标检测模型取得比单脑目标检测取得更好的效果，本文做出以下解释。</p><p>最根本的是信息量的增加。显然,双脑所包含的待识别对象的信息量多于单脑，更多的信息量有助于目标检测的进行。当然，事情总是有两面性的，单纯的冗余信息增加可能降低信噪比，从而对结果产生干扰。譬如将一个噪声较多的脑电信号与噪声较少的脑电信号进行融合，而本文模型没有能力区分二者的信噪比，而是将两者以相同的权重进行融合从而噪声较多的脑电信号对整个模型进行目标检测造成了干扰。</p><p>单脑容易受到来自内部或者外部的干扰。内部干扰包括被试不时的注意力涣散、眨眼等，都会导致单被试暂时丧失一定的检测能力。虽然实验者们会尽可能控制外部环境保持稳定，但是外部干扰依然难以完全避免。譬如皮肤出汗、静电干扰以及由于头部轻微移动导致电极与头皮之间的接触面积改变等。部分外部干扰与内部干扰的发生具备一定的偶然性，当双脑同时进行目标检测时，可以在一位被试受偶发因素的干扰检测能力下降时，还有另外一位具备较好检测能力的被试进行目标检测。</p><p>值得注意的是，本文总共采集了8位被试的脑电，样本量较小，还有许多潜在的信息有待挖掘。譬如什么样的被试适合合作，如果两位被试表现都比较差，在融合时又是什么结果？</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文在采集的双脑目标检测数据上，将双脑目标检测模型与SVM、xDAWN、EEGNet这三个单脑目标检测模型进行比较，在两位被试都配合实验的前提下，通过双人协作来完成目标检测可以比单人达到更高的精确率与召回率。相比于单被试进行目标检测，使用HyperscanNet进行双脑目标检测的稳定性更好(更小的标准差)。当然本文的模型也存在一定的缺陷，表现在不能够很好的处理双脑融合过程中出现的单被试持续性保持较弱的检测能力，导致冗余信息对模型进行目标检测增加干扰的情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RSVP </tag>
            
            <tag> 双脑 </tag>
            
            <tag> 事件相关电位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第一次SCI投稿</title>
      <link href="/2021/09/04/journalsubmit/"/>
      <url>/2021/09/04/journalsubmit/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下第一篇一作SCI从20年12月写好开始的经历…</p></blockquote><ol><li>12月初稿完成。</li><li>12月根据导师意见修改若干次。</li><li>1月自行修改若干次。</li><li>2月根据导师意见修改若干次。</li><li>3月翻译成英文，语法修正。二作提出修改意见。</li><li>二作提出修改意见，变成英文后行文逻辑有所更改。</li><li>个人认为偏向模式识别，二作偏向神经数据分析，两人一起修改。</li><li>4月初最终还是确定偏向模式识别。</li><li>4.10提交到期刊。</li><li>4.12到编辑</li><li>4.12 under review。效率还是很高的。</li><li>6.3 under review。时间变了一下，应该是有审稿意见回来了</li><li>6.12 under review。同上。</li><li>7.15 under review。 同上。</li><li>7.23 Required Reviews Completed。 感觉要完成了</li><li>7.23 under review。怎么又变审稿了。</li><li>8.4 Decision in Process。等结果。</li><li>8.4 Major Revise。意料之中的大修。</li><li>8.4-8.20 针对若干页审稿意见的回复。回复整整写了16页。</li><li>8.20 With editor 提交。</li><li>8.21 under review 二审。</li><li>8.25 Decision in Process 。出乎意料的快。</li><li>8.27 accept。激动人心的时刻。</li><li>后续…一些关于publish的事。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 期刊论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文图片</title>
      <link href="/2021/05/18/paperImage/"/>
      <url>/2021/05/18/paperImage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近和W博交流，看了一下他发的顶会论文，发现了一些绘图的小tricks。有感而发。</p></blockquote><p>一般会发现比较好的期刊上的图中，文字都是能选中的，而且非常清晰。这些不是纯粹图片格式，这种一般都是矢量图。我之前虽然知道这是矢量图，但是并不知道python绘图可以保存矢量图，python中的matplotlib库其实是支持导出矢量图的，保存为pdf格式或者eps就可以。</p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>format<span class="token operator">=</span><span class="token string">'eps/pdf'</span><span class="token punctuation">)</span></code></pre><p>在使用visio等软件画流程图、示意图的时候，也是支持矢量图导出的。</p><p>值得注意的是，因为保存的是矢量图，所以会有字体的信息，matplotlib默认会保存Type3字体,这时候你在投稿pdf到某些审稿系统时，会出现字体缺失的情况，这样你的图里就没字或者直接整个pdf就崩溃了。可以考虑<a href="http://phyletica.org/matplotlib-fonts/" target="_blank" rel="noopener external nofollow noreferrer">这里</a>的解决方案。简而言之就是把字体换成Type47。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'pdf.fonttype'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span>matplotlib<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'ps.fonttype'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 绘图 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模心得</title>
      <link href="/2021/05/04/gmcm/"/>
      <url>/2021/05/04/gmcm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参加过很多次数学建模比赛，拿过美赛M奖，研赛一等奖。也算有了一点经验，在这边分享一下。</p></blockquote><h2 id="数学建模是什么"><a href="#数学建模是什么" class="headerlink" title="数学建模是什么"></a>数学建模是什么</h2><p>这点不必我多说，但是还是和大家简单介绍一下。其本质就是把遇到的实际问题，通过建模抽象成数学公式并求解的过程。</p><h2 id="为什么参加"><a href="#为什么参加" class="headerlink" title="为什么参加"></a>为什么参加</h2><p>对于我来说，主要发现了以下几点收益。</p><ol><li>物质奖励。在杭电的政策下，参加数学建模的物质奖励还挺丰厚，在其他学校通常也有对应的政策。</li><li>知识收获。参加比赛前，学校都会组织培训，教你一些常见的模型，以及科技论文写作知识，如果你能学到，即便是不拿奖也算有收获。</li><li>拓展视野。比赛的赛题背景通常不是你的专业知识，可以让你接触一些不同领域的东西，比如:脑机接口、金融、热力学等等。如果你参加多了，就会对不同领域有一定的了解，对自己所在专业也会有一定的启发。</li><li>好伙伴。<strong>数模是检验毅力的试金石之一</strong>，如果和你一起比赛的队友能够在建模这几天里坚持不懈，面对困难也不放弃，就可以发现这是一个值得结交的朋友。<br><img src="/images/20210505194612.png" alt="相关政策"></li></ol><h2 id="如何准备"><a href="#如何准备" class="headerlink" title="如何准备"></a>如何准备</h2><p>这个我简单说一下。现在缺的不是资料，而是好好学习资料的人。因为学校的培训流程已经十分完善，个人基本只要能够完成数模组布置的各个任务就很不错了。不过也是有重要的事情。</p><ol><li>寻找队友。找一个好的队友很重要，因为建模那几天确实比较煎熬，如果队友忽然撂挑子不干（或者帮不上忙），那你个人能力再强也会有点崩溃。关键是你不干活的队友还会和你一起分享你的成果，想想就很崩溃吧。所以一般<strong>不要和不熟悉的队友直接参加正式比赛</strong>，在正式比赛之前做道练习题和队友磨合一下还是很重要的，遇到不合适的队友及早换掉。再提一句，就是队伍里一定要有一个会编程解决问题的人，如果那个人参加过类似于<strong>ACM这类程序设计竞赛</strong>的人，那再好不过了。</li><li>学会一些基本的检索。主要是在中国知网、谷歌学术、github上进行检索。github上有许多开源代码，有时候一个问题在你进行抽象归纳之后，往往能够使用对应的开源代码直接解决。</li><li>学会一些版本控制工具。版本控制工具现在有很多，最经典的莫过于git，但这对于多数人来说使用不太方便，还有较大的学习成本。所以对于Latex使用者，我建议使用<strong>overleaf</strong>。overleaf有现成的web版本，直接访问overleaf.com即可。其优点在于可以和队友一起同时编辑一个文档，无需配置本地环境，访问网页就可以直接使用。并且可以看到文档的历史修改记录。用官方布置的在线版有个缺陷，就是想要完整的历史版本需要付费，并且相对来说保存在别人的服务器上的论文没自己保存那么放心(一般问题也不大)。我自己用的是自己部署在实验室服务器上的overleaf，因为overleaf是个开源项目，并且它在github上有对应的docker可以下载，部署还是很方便的。自己部署完之后可以查看完整历史记录，并且也不用担心被别人盗用。对于word使用者，我推荐使用一些<strong>文件夹同步工具，如坚果云、百度网盘等等</strong>。可以把一个文件夹直接同步到的队友的文件夹里面，这样给队友传输文件就像本地复制粘贴一样那么轻松，像坚果云在同步修改的过程中也会保留历史版本并且可以看到历史版本和现在版本的对比区别。<br><img src="/images/20210505210239.png" alt="overleaf版本控制"></li><li>多阅读获奖论文。从大量获奖论文中总结体会其中的规律。</li></ol><h2 id="比赛要注意的点"><a href="#比赛要注意的点" class="headerlink" title="比赛要注意的点"></a>比赛要注意的点</h2><p>比赛的时候会很忙，但是一些点一定要注意。</p><ol><li>注重摘要。摘要在第一页其重要性不言而喻，你是否获奖很大程度上取决于你摘要的编写，语言一定要凝练，不要口语化。</li><li>正文部分。只需要记住，图&gt;表&gt;文字，能用图就不要用表，能用表就不要用文字。</li><li>时间安排。选题时间建议不要超过4个小时，要能够及早确定题目。因为时间紧迫，应当提前准备好论文模板。写论文的过程应当是贯穿整个建模过程的，比赛开始时需要写的点比较少，主要是对问题进行重述，并且对问题进行一些分析，这也有助于和队友一起理清整个赛题的全貌，并且通过查询相关文献来确定大概的解题思路,这个过程应当在第一天就完成了。第二天至少前两问要初具规模，第三问要搭建起来（一般大型比赛至少三问，训练题目也有两个问题的），第三天做出最难的第三题，对模型进行拓展延伸。最后一天应该解决细小问题，文章进一步排版，错别字检查，格式统一，找到最好看的表格样式，图表顺序编号，标题加粗等等，检查三四遍就可以生成pdf上交了。</li></ol><h2 id="注重态度"><a href="#注重态度" class="headerlink" title="注重态度"></a>注重态度</h2><p>这一点我单独提出来讲，因为我觉得人的态度会体现在论文里，会让评阅的专家感受到。我个人对数模论文的见解是<strong>是在解决问题的基础上，尽可能让专家舒适的接受你的观点和结论</strong>。</p><p>态度在数模论文中主要是通过一些细节来体现的。应当避免出现以下情况，包括错别字、病句、长难句(弯弯绕绕的句子)、表格样式不统一、图片引用出错、标题出错等等。</p><p>画图的时候也要注意图片不要是截图，截图是十分不专业的，而且很容易被看出来。可以多学习优秀论文里面的图片是怎么画的，主要包括布局、颜色搭配。</p><p><img src="/images/20210505214223.png" alt="nature配图"><br><img src="/https://pic3.zhimg.com/80/v2-6506da9f8a4ce65bfd6e26ad615c0552_720w.jpg" alt="excel绘制的图"></p><p>可以看出同样是画柱状图，二者给人的感受是天差地别的。</p><p>再说一点，中英文逗号、句号不要混用，概念不要混淆。我的建议是写完终稿之后，记得使用Ctrl+F全文查找替换中英文逗号、图、表等关键词来精确定位易错点。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>分享一些工具。</p><ul><li>画图工具：matplotlib(python的画图包），visio（流程图等），powerpoint（图片组成），origin（经典画图工具）。</li><li>公式嵌入：mathType。</li><li>图片转latex公式：mathpix。</li><li>同步文件工具：坚果云、局域网内共享文件夹等。</li><li>帮助配色的网站：中国色(<a href="http://zhongguose.com/#yuhong)%E3%80%82color" target="_blank" rel="noopener external nofollow noreferrer">http://zhongguose.com/#yuhong)。color</a> Hunt(<a href="https://colorhunt.co/" target="_blank" rel="noopener external nofollow noreferrer">https://colorhunt.co/</a>)。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模式识别复习押题</title>
      <link href="/2021/01/05/%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/01/05/%E6%A8%A1%E5%BC%8F%E8%AF%86%E5%88%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能与模式识别"><a href="#人工智能与模式识别" class="headerlink" title="人工智能与模式识别"></a>人工智能与模式识别</h1><ol><li>简答题 共5小题，每小题10分</li><li>计算题（包括公式推导）,共四小题，每小题10分</li><li>论述题 共1小题，10分</li></ol><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><ol><li><p>在机器学习中，样本是指什么？类或者类别又指什么？简述机器学习的核心思想及其学习过程。</p></li><li><p>简述正态分布概率模型下的最小错误率贝叶斯决策过程。（马氏距离）</p><ul><li>$g_i(x)=\gamma^2=(x-\mu_i)^T\Sigma^{-1}(x-\mu_i)$</li></ul></li><li><p>如何判断估计的好坏标准。</p><ul><li>无偏性，即估计量的数学期望等于真实的参数，即$E(\hat{\sigma})=\sigma$</li><li>有效性，存在两个估计量，方差更小的估计量更有效</li><li>一致性，保证了样本数量无穷多时，每一次估计量都将在概率意义上任意地接近其真实值。</li></ul></li><li><p>神经元感知器的特点及其学习规则。</p><ul><li>特点。多输入、加法器(带偏置）、单输出。</li><li>学习规则。hebb规则，a表示实际输出，p表示输入，t表示目标输出</li><li>$\Delta w_i=\eta ap_i$</li><li>$w_i^{(n + 1)} = w_i^{(n)} + \eta a{p_i}$</li><li>hebb学习规则引出误差修正学习规则</li><li>$$ e_k = t_k - a_k$$</li><li>$$\Delta {w_{kj}} = \eta {e_k}{p_j}$$</li><li>$$\Delta {\bf{w_k}} = \eta e_k{\bf{p}^T}$$</li><li>$$\Delta {\bf{W}} = \eta {e}{\bf{p}^T}$$</li></ul></li><li><p>简述遗传算法的过程，并且解释其陷入局部极值时怎么处理？</p><ul><li>改变学习步长</li><li>添加扰动</li><li>模拟退火算法</li></ul><p>-</p></li></ol><h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><ol><li>最小错误率（风险）贝叶斯决策。</li><li>最大似然估计法以数据样本估计一元正态分布函数的$\mu$和$\sigma$。</li><li>广义线性判别函数(PPT的题)。$g(x)=C_0+C_1X+C_2X^2$<img src="/images/20210105104847.png"></li><li>fish判别的目标函数(准则)是什么?并用拉格朗日乘子计算满足其准则的最佳投影向量$w^*$<ul><li>能够给定样本（从图中获得），计算类内离散度矩阵、总体协方差矩阵、类间离散度矩阵公式即可。</li></ul></li></ol><h2 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h2><ul><li>为什么要学习模式识别和人工智能，结合人工智能与模式识别发展史，辩证地看待人工智能发展现状，根据人工智能模式识别的发展趋势，结合自我发展规划，分析当前的挑战和机遇。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 模式识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mne进行脑电信号分析</title>
      <link href="/2020/12/11/overview/"/>
      <url>/2020/12/11/overview/</url>
      
        <content type="html"><![CDATA[<h3 id="已投稿到-脑机接口社区-版权所有。转载自脑机接口社区。禁止其他网站转载"><a href="#已投稿到-脑机接口社区-版权所有。转载自脑机接口社区。禁止其他网站转载" class="headerlink" title="已投稿到 脑机接口社区 版权所有。转载自脑机接口社区。禁止其他网站转载"></a>已投稿到 <a href="https://mp.weixin.qq.com/s/gLp0Pt6MtSYeiKX3R-8KMA" target="_blank" rel="noopener external nofollow noreferrer">脑机接口社区</a> 版权所有。转载自脑机接口社区。禁止其他网站转载</h3><p>先加载一些必要的头文件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> mne<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#减号</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#中文字体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'savefig.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#图片像素</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#分辨率</span></code></pre><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>MNE-Python 的数据结构是基于来自Neuromag(脑磁图系统）的FIF文件格式,但是也内置了大量对于其他格式数据的读取函数。MNE-Python 也有各种各样关于公开可获得的数据集接口，来帮助你下载和管理这些数据。</p><p>我们将会通过一个加载数据集的例子来开始教程，这个数据集包含来自一个关于听觉和视觉实验的EEG和MEG的数据,数据是通过对被试进行结构化的MRI（磁共振成像）扫描获得的。<a href="https://mne.tools/dev/generated/mne.datasets.sample.data_path.html#mne.datasets.sample.data_path" target="_blank" rel="noopener external nofollow noreferrer">mne.datasets.sample.data_path</a>函数在数据集没有在指定位置被找到的情况下会自动下载数据集，并且返回目录路径。注意到为了使得教程能够流畅的跑通，我们采用了滤波和降采样后版本的数据，但是样本数据集中也包含了没有滤波的数据，你可以在本地运行的时候进行替换。</p><pre class=" language-python"><code class="language-python">sample_data_folder <span class="token operator">=</span> mne<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>sample<span class="token punctuation">.</span>data_path<span class="token punctuation">(</span><span class="token punctuation">)</span>sample_data_raw_file <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>sample_data_folder<span class="token punctuation">,</span> <span class="token string">'MEG'</span><span class="token punctuation">,</span> <span class="token string">'sample'</span><span class="token punctuation">,</span>                                    <span class="token string">'sample_audvis_filt-0-40_raw.fif'</span><span class="token punctuation">)</span>raw <span class="token operator">=</span> mne<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_raw_fif<span class="token punctuation">(</span>sample_data_raw_file<span class="token punctuation">)</span></code></pre><pre><code>Opening raw data file /home/zhkgo/mne_data/MNE-sample-data/MEG/sample/sample_audvis_filt-0-40_raw.fif...    Read a total of 4 projection items:        PCA-v1 (1 x 102)  idle        PCA-v2 (1 x 102)  idle        PCA-v3 (1 x 102)  idle        Average EEG reference (1 x 60)  idle    Range : 6450 ... 48149 =     42.956 ...   320.665 secsReady.</code></pre><p>默认情况下，read_raw_fif函数会打印一些关于它加载的数据集的信息。例如，这次它告诉我们数据集中有四个“投影项”以及记录的数据，时长等信息。这些是SSP投影计算得到的，用于去除来自MEG信号的环境噪声，并且增加了一个平均参考通道。除了在加载数据集时显示信息外，还可以通过打印原始对象来查看数据集基本一些信息，通过打印该对象的info属性可以获取更多信息。info的数据结构中包含了通道位置，已经采用过的滤波器，投影等等信息。</p><p>值得注意的是chs条目，它表示MNE-Python 检测到了不同的传感器类型(也就是输入数据包含了来自多种传感器的数据)，要注意对这些数据进行适当的处理。如果想要知道更多信息，可以看<a href="https://mne.tools/dev/generated/mne.Info.html#mne.Info" target="_blank" rel="noopener external nofollow noreferrer">Info</a>的类定义。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw<span class="token punctuation">.</span>info<span class="token punctuation">)</span></code></pre><pre><code>&lt;Raw | sample_audvis_filt-0-40_raw.fif, 376 x 41700 (277.7 s), ~3.7 MB, data not loaded&gt;&lt;Info | 15 non-empty values bads: 2 items (MEG 2443, EEG 053) ch_names: MEG 0113, MEG 0112, MEG 0111, MEG 0122, MEG 0123, MEG 0121, MEG ... chs: 204 GRAD, 102 MAG, 9 STIM, 60 EEG, 1 EOG custom_ref_applied: False dev_head_t: MEG device -&gt; head transform dig: 146 items (3 Cardinal, 4 HPI, 61 EEG, 78 Extra) file_id: 4 items (dict) highpass: 0.1 Hz hpi_meas: 1 item (list) hpi_results: 1 item (list) lowpass: 40.0 Hz meas_date: 2002-12-03 19:01:10 UTC meas_id: 4 items (dict) nchan: 376 projs: PCA-v1: off, PCA-v2: off, PCA-v3: off, Average EEG reference: off sfreq: 150.2 Hz&gt;</code></pre><p><a href="https://mne.tools/dev/generated/mne.io.Raw.html#mne.io.Raw" target="_blank" rel="noopener external nofollow noreferrer">Raw</a>对象有内置的画图函数。在这里，我们通过plot_psd这个函数展示了来自不同传感器数据的功率谱密度图，并且采用plot函数画出了脑电数据的轨迹。在PSD图中，我们只画了50HZ以下的频率（因为我们的数据时已经经过了40HZ的低通滤波）。在交互式Python绘画中（就是能弹出绘图窗口的），绘图是交互式的，并且允许滚动，缩放，标记不良的通道，以及注释等等。</p><pre class=" language-python"><code class="language-python">raw<span class="token punctuation">.</span>plot_psd<span class="token punctuation">(</span>fmax<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>_<span class="token operator">=</span>raw<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>duration<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> n_channels<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></code></pre><pre><code>Effective window size : 13.639 (s)Effective window size : 13.639 (s)Effective window size : 13.639 (s)findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.</code></pre><p><img src="/images/20201211134429.png" alt="png"></p><pre><code>findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.</code></pre><p><img src="/images/20201211134430.png" alt="png"></p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>MNE-Python 支持多种多样的预处理方法和技术（麦克斯韦滤波，信号空间投影（SSP），独立成分分析，滤波，降采样等）；具体可以看<a href="https://mne.tools/dev/python_reference.html#module-mne.preprocessing" target="_blank" rel="noopener external nofollow noreferrer">mne.preprocessing</a>和<a href="https://mne.tools/dev/python_reference.html#module-mne.filter" target="_blank" rel="noopener external nofollow noreferrer">mne.filter</a>子模块中功能的完整列表。在这里我们将通过独立成分分析（ICA）来清理数据；为了能够简便期间，我们跳过一些步骤。<a href="https://mne.tools/dev/auto_tutorials/preprocessing/plot_40_artifact_correction_ica.html#tut-artifact-ica" target="_blank" rel="noopener external nofollow noreferrer">这里可以看一些跳过的步骤</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># set up and fit the ICA</span>ica <span class="token operator">=</span> mne<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>ICA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">97</span><span class="token punctuation">,</span> max_iter<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">)</span>ica<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>raw<span class="token punctuation">)</span>ica<span class="token punctuation">.</span>exclude <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#这边就是跳过的步骤，关于为什么选择1,2两个成分</span>ica<span class="token punctuation">.</span>plot_properties<span class="token punctuation">(</span>raw<span class="token punctuation">,</span> picks<span class="token operator">=</span>ica<span class="token punctuation">.</span>exclude<span class="token punctuation">)</span></code></pre><pre><code>Fitting ICA to data using 364 channels (please be patient, this may take a while)Inferring max_pca_components from picksSelecting by number: 20 componentsFitting ICA took 2.3s.    Using multitaper spectrum estimation with 7 DPSS windowsNot setting metadataNot setting metadata138 matching events foundNo baseline correction applied0 projection items activated0 bad epochs droppedNot setting metadataNot setting metadata138 matching events foundNo baseline correction applied0 projection items activated0 bad epochs droppedfindfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.</code></pre><p><img src="/images/20201211134431.png" alt="png"></p><p><img src="/images/20201211134432.png" alt="png"></p><pre><code>[&lt;Figure size 2100x1800 with 6 Axes&gt;, &lt;Figure size 2100x1800 with 6 Axes&gt;]</code></pre><p>在确定要删除哪些成分后，我们将它们作为exclude参数传递，然后将ICA应用于原始信号。 apply方法要求将原始数据加载到内存中（默认情况下，仅根据需要从磁盘读取数据），因此我们使用load_data读取数据之后复制Raw对象，以便我们可以并行比较去除伪迹之前和之后的信号：</p><pre class=" language-python"><code class="language-python">orig_raw <span class="token operator">=</span> raw<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>raw<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>ica<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># show some frontal channels to clearly illustrate the artifact removal</span>chs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'MEG 0111'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0121'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0131'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0211'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0221'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0231'</span><span class="token punctuation">,</span>       <span class="token string">'MEG 0311'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0321'</span><span class="token punctuation">,</span> <span class="token string">'MEG 0331'</span><span class="token punctuation">,</span> <span class="token string">'MEG 1511'</span><span class="token punctuation">,</span> <span class="token string">'MEG 1521'</span><span class="token punctuation">,</span> <span class="token string">'MEG 1531'</span><span class="token punctuation">,</span>       <span class="token string">'EEG 001'</span><span class="token punctuation">,</span> <span class="token string">'EEG 002'</span><span class="token punctuation">,</span> <span class="token string">'EEG 003'</span><span class="token punctuation">,</span> <span class="token string">'EEG 004'</span><span class="token punctuation">,</span> <span class="token string">'EEG 005'</span><span class="token punctuation">,</span> <span class="token string">'EEG 006'</span><span class="token punctuation">,</span>       <span class="token string">'EEG 007'</span><span class="token punctuation">,</span> <span class="token string">'EEG 008'</span><span class="token punctuation">]</span>chan_idxs <span class="token operator">=</span> <span class="token punctuation">[</span>raw<span class="token punctuation">.</span>ch_names<span class="token punctuation">.</span>index<span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> chs<span class="token punctuation">]</span>orig_raw<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>order<span class="token operator">=</span>chan_idxs<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>_<span class="token operator">=</span>raw<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>order<span class="token operator">=</span>chan_idxs<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> duration<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><pre><code>Reading 0 ... 41699  =      0.000 ...   277.709 secs...Transforming to ICA space (20 components)Zeroing out 2 ICA components</code></pre><p><img src="/images/20201211134433.png" alt="png"></p><p><img src="/images/20201211134434.png" alt="png"></p><h2 id="检测标签"><a href="#检测标签" class="headerlink" title="检测标签"></a>检测标签</h2><p>样本数据集包括几个STIM通道，这些通道记录了从刺激传递计算机发送的电信号（短暂的DC移位/方波脉冲）。这些脉冲（通常称为“触发”）在此数据集中用于标记实验事件：刺激发作，刺激类型和参与者反应（按下按钮）。各个STIM通道被组合到单个通道中，以使该通道上的电压电平可以明确地解码为特定事件类型。 在较旧的Neuromag系统（例如用于记录样本数据的系统）上，得到的求和通道称为STI 014，因此我们可以将该通道名称传递给mne.find_events函数，以恢复刺激事件的时间和类型。</p><pre class=" language-python"><code class="language-python">events <span class="token operator">=</span> mne<span class="token punctuation">.</span>find_events<span class="token punctuation">(</span>raw<span class="token punctuation">,</span> stim_channel<span class="token operator">=</span><span class="token string">'STI 014'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 显示前五个事件</span></code></pre><pre><code>319 events foundEvent IDs: [ 1  2  3  4  5 32][[6994    0    2] [7086    0    3] [7192    0    1] [7304    0    4] [7413    0    2]]</code></pre><p>events事件数组是一个普通的3列NumPy数组，第一列为样本编号，最后一列为事件ID； 通常忽略中间列。事件ID通常有对应的事件，在这个样例中其对应关系如下。</p><table><thead><tr><th>Event ID</th><th>Condition</th></tr></thead><tbody><tr><td>1</td><td>auditory stimulus (tone) to the left ear</td></tr><tr><td>2</td><td>auditory stimulus (tone) to the right ear</td></tr><tr><td>3</td><td>visual stimulus (checkerboard) to the left visual field</td></tr><tr><td>4</td><td>visual stimulus (checkerboard) to the right visual field</td></tr><tr><td>5</td><td>smiley face (catch trial)</td></tr><tr><td>32</td><td>subject button press</td></tr></tbody></table><pre class=" language-python"><code class="language-python">event_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'auditory/left'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'auditory/right'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'visual/left'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>              <span class="token string">'visual/right'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'smiley'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'buttonpress'</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">}</span></code></pre><p>从连续数据中提取epochs时，会使用此类事件字典。字典键中的’/‘ 字符允许通过请求部分条件描述符来跨条件合并（即，请求<code>听觉</code>将选择事件ID为1和2的所有时期;请求<code>向左</code>将选择事件ID为1和3的所有时期）。 下面显示了一个示例。 还有一个方便的plot_events函数，用于可视化记录持续时间内的事件分布（以确保事件检测按预期方式工作）。 在这里，我们还将利用Info属性来获取记录的采样频率（因此，我们的x轴将以秒为单位，而不是采样数）。</p><pre class=" language-python"><code class="language-python">fig <span class="token operator">=</span> mne<span class="token punctuation">.</span>viz<span class="token punctuation">.</span>plot_events<span class="token punctuation">(</span>events<span class="token punctuation">,</span> event_id<span class="token operator">=</span>event_dict<span class="token punctuation">,</span> sfreq<span class="token operator">=</span>raw<span class="token punctuation">.</span>info<span class="token punctuation">[</span><span class="token string">'sfreq'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          first_samp<span class="token operator">=</span>raw<span class="token punctuation">.</span>first_samp<span class="token punctuation">)</span></code></pre><pre><code>findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.</code></pre><p><img src="/images/20201211134435.png" alt="png"></p><p>对于与事件无关的范例（例如，对静止状态数据的分析），可以通过使用<a href="https://mne.tools/dev/generated/mne.make_fixed_length_events.html#mne.make_fixed_length_events" target="_blank" rel="noopener external nofollow noreferrer">mne.make_fixed_length_events</a>创建事件。</p><h2 id="从连续数据到Epochs-时间段"><a href="#从连续数据到Epochs-时间段" class="headerlink" title="从连续数据到Epochs(时间段)"></a>从连续数据到Epochs(时间段)</h2><p>Raw对象和events数组是创建Epochs对象所需的基本要求，该对象是我们使用Epochs类构造函数创建的。 在这里，我们还将指定一些数据质量限制：我们将拒绝峰峰值信号幅度超出该通道类型合理限制的任何时期。 这是通过拒绝字典完成的； 您可以为数据中存在的任何渠道类型添加或忽略阈值。 此处给出的值对于此特定数据集是合理的，但可能需要针对不同的硬件或记录条件进行调整。 想要使用更自动化的方法，请考虑使用autoreject软件包。</p><pre class=" language-python"><code class="language-python">reject_criteria <span class="token operator">=</span> dict<span class="token punctuation">(</span>mag<span class="token operator">=</span><span class="token number">4000e</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true"># 4000 fT</span>                       grad<span class="token operator">=</span><span class="token number">4000e</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 4000 fT/cm</span>                       eeg<span class="token operator">=</span><span class="token number">150e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># 150 µV</span>                       eog<span class="token operator">=</span><span class="token number">250e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 250 µV</span></code></pre><p>我们还将事件字典作为event_id参数传递（因此我们可以使用易于合并的事件标签，而不是整数事件ID），并指定tmin和tmax（相对于每个事件开始的时间和结束）。 如上所述，默认情况下，并没有将Raw和Epochs数据加载到内存中（仅在需要时才从磁盘访问它们），但是在这里，我们将使用preload = True参数强制将其加载到内存中，以便我们可以看到结果所使用的拒绝标准：</p><pre class=" language-python"><code class="language-python">epochs <span class="token operator">=</span> mne<span class="token punctuation">.</span>Epochs<span class="token punctuation">(</span>raw<span class="token punctuation">,</span> events<span class="token punctuation">,</span> event_id<span class="token operator">=</span>event_dict<span class="token punctuation">,</span> tmin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> tmax<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                    reject<span class="token operator">=</span>reject_criteria<span class="token punctuation">,</span> preload<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><pre><code>Not setting metadataNot setting metadata319 matching events foundApplying baseline correction (mode: mean)Created an SSP operator (subspace dimension = 4)4 projection items activatedLoading data for 319 events and 106 original time points ...    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on MAG : [&#39;MEG 1711&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on MAG : [&#39;MEG 1711&#39;]    Rejecting  epoch based on EEG : [&#39;EEG 008&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]    Rejecting  epoch based on EOG : [&#39;EOG 061&#39;]10 bad epochs dropped</code></pre><p>接下来，我们将在左右刺激演示中进行汇总，以便我们可以比较听觉和视觉反应。 为避免信号向左或向右偏移，我们将首先使用equalize_event_counts从每个条件中随机采样时间段，以匹配条件中出现的具有最少良好时间段的时间段数。</p><pre class=" language-python"><code class="language-python">conds_we_care_about <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'auditory/left'</span><span class="token punctuation">,</span> <span class="token string">'auditory/right'</span><span class="token punctuation">,</span>                       <span class="token string">'visual/left'</span><span class="token punctuation">,</span> <span class="token string">'visual/right'</span><span class="token punctuation">]</span>epochs<span class="token punctuation">.</span>equalize_event_counts<span class="token punctuation">(</span>conds_we_care_about<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># this operates in-place</span>aud_epochs <span class="token operator">=</span> epochs<span class="token punctuation">[</span><span class="token string">'auditory'</span><span class="token punctuation">]</span>vis_epochs <span class="token operator">=</span> epochs<span class="token punctuation">[</span><span class="token string">'visual'</span><span class="token punctuation">]</span><span class="token keyword">del</span> raw<span class="token punctuation">,</span> epochs  <span class="token comment" spellcheck="true"># free up memory</span></code></pre><pre><code>Dropped 7 epochs: 121, 195, 258, 271, 273, 274, 275</code></pre><p>与原始对象一样，Epochs对象也有许多内置的打印方法。一种是plot_image，它将每个epochs显示为图像地图的一行，颜色代表信号大小；图像下方显示了平均诱发响应和传感器位置.</p><pre class=" language-python"><code class="language-python">aud_epochs<span class="token punctuation">.</span>plot_image<span class="token punctuation">(</span>picks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'MEG 1332'</span><span class="token punctuation">,</span> <span class="token string">'EEG 021'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>Not setting metadataNot setting metadata136 matching events foundNo baseline correction applied0 projection items activated0 bad epochs droppedNot setting metadataNot setting metadata136 matching events foundNo baseline correction applied0 projection items activated0 bad epochs dropped</code></pre><p><img src="/images/20201211134436.png" alt="png"></p><p><img src="/images/20201211134437.png" alt="png"></p><pre><code>[&lt;Figure size 1800x1200 with 4 Axes&gt;, &lt;Figure size 1800x1200 with 4 Axes&gt;]</code></pre><blockquote><p>注意 Raw和Epochs对象都具有get_data方法，这些方法将基础数据作为NumPy数组返回。 两种方法都有一个picks参数，用于选择要返回的通道。raw.get_data（）具有用于限制时域的其他参数。 所得矩阵的原始尺寸为（n_channels，n_times），Epochs为（n_epochs，n_channels，n_times）。</p></blockquote><h2 id="时频分析"><a href="#时频分析" class="headerlink" title="时频分析"></a>时频分析</h2><p>mne.time_frequency子模块提供了几种算法的实现，以计算时频表示，功率谱密度和互谱密度。 例如，在这里，我们将使用Morlet小波为听觉时期计算不同频率和时间的感应功率。 在此数据集上，结果并不是特别有用（它仅显示诱发的“听觉N100”响应）； 有关具有更丰富频率内容的数据集的更多扩展示例，请参见<a href="https://mne.tools/dev/auto_tutorials/time-freq/plot_sensors_time_frequency.html#inter-trial-coherence" target="_blank" rel="noopener external nofollow noreferrer">此处</a>。</p><pre class=" language-python"><code class="language-python">frequencies <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>power <span class="token operator">=</span> mne<span class="token punctuation">.</span>time_frequency<span class="token punctuation">.</span>tfr_morlet<span class="token punctuation">(</span>aud_epochs<span class="token punctuation">,</span> n_cycles<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> return_itc<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                      freqs<span class="token operator">=</span>frequencies<span class="token punctuation">,</span> decim<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>_<span class="token operator">=</span>power<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'MEG 1332'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre><code>Removing projector &lt;Projection | PCA-v1, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v2, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v3, active : True, n_channels : 102&gt;Removing projector &lt;Projection | Average EEG reference, active : True, n_channels : 60&gt;Removing projector &lt;Projection | PCA-v1, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v2, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v3, active : True, n_channels : 102&gt;Removing projector &lt;Projection | Average EEG reference, active : True, n_channels : 60&gt;No baseline correction applied</code></pre><p><img src="/images/20201211134438.png" alt="png"></p><h2 id="诱发反应"><a href="#诱发反应" class="headerlink" title="诱发反应"></a>诱发反应</h2><p>现在，我们已经把ud_epochs和vis_epochs区分开了。可以通过将每个条件下的epochs平均在一起，来估计对听觉与视觉刺激的诱发反应。这就像在Epochs对象上调用average方法，然后使用mne.viz模块中的函数来比较两个Evoked对象的每种传感器类型的全局场功率一样简单.</p><pre class=" language-python"><code class="language-python">aud_evoked <span class="token operator">=</span> aud_epochs<span class="token punctuation">.</span>average<span class="token punctuation">(</span><span class="token punctuation">)</span>vis_evoked <span class="token operator">=</span> vis_epochs<span class="token punctuation">.</span>average<span class="token punctuation">(</span><span class="token punctuation">)</span>mne<span class="token punctuation">.</span>viz<span class="token punctuation">.</span>plot_compare_evokeds<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>auditory<span class="token operator">=</span>aud_evoked<span class="token punctuation">,</span> visual<span class="token operator">=</span>vis_evoked<span class="token punctuation">)</span><span class="token punctuation">,</span>                             legend<span class="token operator">=</span><span class="token string">'upper left'</span><span class="token punctuation">,</span> show_sensors<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span></code></pre><pre><code>Multiple channel types selected, returning one figure per type.combining channels using &quot;gfp&quot;combining channels using &quot;gfp&quot;</code></pre><p><img src="/images/20201211134439.png" alt="png"></p><pre><code>combining channels using &quot;gfp&quot;combining channels using &quot;gfp&quot;</code></pre><p><img src="/images/20201211134440.png" alt="png"></p><pre><code>combining channels using &quot;gfp&quot;combining channels using &quot;gfp&quot;</code></pre><p><img src="/images/20201211134441.png" alt="png"></p><pre><code>[&lt;Figure size 2400x1800 with 2 Axes&gt;, &lt;Figure size 2400x1800 with 2 Axes&gt;, &lt;Figure size 2400x1800 with 2 Axes&gt;]</code></pre><p>我们还可以使用诸如plot_joint或plot_topomap之类的其他绘图方法来获得每个被唤起对象的更详细视图。 在这里，我们将仅检查EEG通道，并在背侧额电极上看到经典的听觉诱发N100-P200模式，然后在任意其他时间绘制脑地形图。</p><pre class=" language-python"><code class="language-python">aud_evoked<span class="token punctuation">.</span>plot_joint<span class="token punctuation">(</span>picks<span class="token operator">=</span><span class="token string">'eeg'</span><span class="token punctuation">)</span>_<span class="token operator">=</span>aud_evoked<span class="token punctuation">.</span>plot_topomap<span class="token punctuation">(</span>times<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0.08</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.12</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch_type<span class="token operator">=</span><span class="token string">'eeg'</span><span class="token punctuation">)</span></code></pre><pre><code>Projections have already been applied. Setting proj attribute to True.Removing projector &lt;Projection | PCA-v1, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v2, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v3, active : True, n_channels : 102&gt;</code></pre><p><img src="/images/20201211134442.png" alt="png"></p><pre><code>Removing projector &lt;Projection | PCA-v1, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v2, active : True, n_channels : 102&gt;Removing projector &lt;Projection | PCA-v3, active : True, n_channels : 102&gt;findfont: Font family [&#39;sans-serif&#39;] not found. Falling back to DejaVu Sans.</code></pre><p><img src="/images/20201211134443.png" alt="png"></p><p>使用mne.combine_evoked函数，还可以将evokes对象组合在一起以显示条件之间的对比。 通过传递权重= [1，-1]可以产生一个简单的差异。 然后，我们使用plot_topo在每个传感器上绘制差异波：</p><pre class=" language-python"><code class="language-python">evoked_diff <span class="token operator">=</span> mne<span class="token punctuation">.</span>combine_evoked<span class="token punctuation">(</span><span class="token punctuation">[</span>aud_evoked<span class="token punctuation">,</span> vis_evoked<span class="token punctuation">]</span><span class="token punctuation">,</span> weights<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>_<span class="token operator">=</span>evoked_diff<span class="token punctuation">.</span>pick_types<span class="token punctuation">(</span>meg<span class="token operator">=</span><span class="token string">'mag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>plot_topo<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> legend<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><pre><code>Removing projector &lt;Projection | Average EEG reference, active : True, n_channels : 60&gt;</code></pre><p><img src="/images/20201211134444.png" alt="png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 脑电信号 </tag>
            
            <tag> mne </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用python进行论文绘图系列之一</title>
      <link href="/2020/11/25/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E7%BB%98%E5%9B%BE/"/>
      <url>/2020/11/25/%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%AE%BA%E6%96%87%E7%BB%98%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了便于自己查找以前的一些绘图代码，对绘图代码进行了整理，放到自己的博客上来。</p></blockquote><h2 id="通用的头文件引入与设置"><a href="#通用的头文件引入与设置" class="headerlink" title="通用的头文件引入与设置"></a>通用的头文件引入与设置</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment" spellcheck="true">#减号</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#中文字体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'savefig.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#图片像素</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#分辨率</span></code></pre><h2 id="盒图绘制"><a href="#盒图绘制" class="headerlink" title="盒图绘制"></a>盒图绘制</h2><p>最常用的是seaborn结合dataframe的绘图方式。<br>dataFrame的样式如下<br><img src="/images/20201122191132.png" alt="数据格式"><br>可以通过x来设置类别，y来设置所要展示的值的分布。</p><pre class=" language-python"><code class="language-python">sns<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token string">"被试"</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token string">"准确率"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>df<span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20201122191408.png" alt="各被试准确率分布盒图"></p><p>当然我们也可以尝试一个能从更高维度看数据分布的盒图。在这里面,通过sharex与sharey来实现了共享纵轴和横轴。<br>其中models[i]表示模型i,peoples[j]表示第j个被试。通过这两个维度来确定某个数值的分布。从而轻易的看到，什么模型在哪个人身上的表现良好。</p><pre class=" language-python"><code class="language-python">fig<span class="token punctuation">,</span>ax<span class="token operator">=</span>plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>sharex<span class="token operator">=</span><span class="token string">"col"</span><span class="token punctuation">,</span>sharey<span class="token operator">=</span><span class="token string">"row"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        people<span class="token operator">=</span>peoples<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        axt<span class="token operator">=</span>ax<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span>        data<span class="token operator">=</span>models<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>models<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"被试"</span><span class="token punctuation">]</span><span class="token operator">==</span>people<span class="token punctuation">]</span>        axt<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"F1Score"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">,</span>boxprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>capprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>whiskerprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20201122191649.png" alt="高维盒图"></p><h2 id="混淆矩阵的绘制（实质是热力图）"><a href="#混淆矩阵的绘制（实质是热力图）" class="headerlink" title="混淆矩阵的绘制（实质是热力图）"></a>混淆矩阵的绘制（实质是热力图）</h2><p>一般做多分类任务的时候会用到混淆矩阵，帮我们看看哪些类容易错分到哪些类。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#演示数据的生成</span>test_label<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_pred<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#部分标签相同 表示预测正确</span>y_pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token operator">=</span>test_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">]</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"猫"</span><span class="token punctuation">,</span><span class="token string">"狗"</span><span class="token punctuation">,</span><span class="token string">"鸟"</span><span class="token punctuation">,</span><span class="token string">"猪"</span><span class="token punctuation">,</span><span class="token string">"牛"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#计算混淆矩阵</span>C2<span class="token operator">=</span> confusion_matrix<span class="token punctuation">(</span>test_label<span class="token punctuation">,</span>y_pred<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#化成dataframe并且行列命名</span>df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>C2<span class="token punctuation">,</span>index<span class="token operator">=</span>names<span class="token punctuation">,</span>columns<span class="token operator">=</span>names<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#fmt='g'是指关闭科学计数法</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>df<span class="token punctuation">,</span>annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>fmt<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"预测结果"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"实际结果"</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20201122193752.png" alt="混淆矩阵"></p><h2 id="多分类中的散点图"><a href="#多分类中的散点图" class="headerlink" title="多分类中的散点图"></a>多分类中的散点图</h2><p>这里面的x和y分别表示需要画的图的x坐标和y坐标,legend自动产生了图例并放到最好的位置。</p><pre class=" language-python"><code class="language-python">plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>yellow_x<span class="token punctuation">,</span> yellow_y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'清醒期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>black_x<span class="token punctuation">,</span> black_y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'快速眼动期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>blue_x<span class="token punctuation">,</span> blue_y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'v'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'睡眠II期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>green_x<span class="token punctuation">,</span> green_y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'睡眠I期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>red_x<span class="token punctuation">,</span> red_y<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'深睡眠期'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span>prop <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20201122194623.png" alt="睡眠分期图"></p><h2 id="通过点的大小来表示因变量在不同条件下的动态变化"><a href="#通过点的大小来表示因变量在不同条件下的动态变化" class="headerlink" title="通过点的大小来表示因变量在不同条件下的动态变化"></a>通过点的大小来表示因变量在不同条件下的动态变化</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#trans表示一个转换函数，将所需要的值映射到一个合理的范围，使得点的大小能区分出因变量大小的变化。</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span> trans<span class="token punctuation">(</span>sine<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span>trans<span class="token punctuation">(</span>gaussian<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span>trans<span class="token punctuation">(</span>tribas<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span> <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span> trans<span class="token punctuation">(</span>softlim<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token operator">=</span>trans<span class="token punctuation">(</span>hardlim<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"sine"</span><span class="token punctuation">,</span><span class="token string">"gaussian"</span><span class="token punctuation">,</span><span class="token string">"tribas"</span><span class="token punctuation">,</span><span class="token string">"softlim"</span><span class="token punctuation">,</span><span class="token string">"hardlim"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"激活函数"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"神经元个数"</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20201122195824.png" alt="行散点图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 绘图 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EEGNET网络结构解析与复现</title>
      <link href="/2020/11/19/EEGNET%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/11/19/EEGNET%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>脑机接口(BCI)使用神经活动作为控制信号，实现与计算机的直接通信。这种神经信号通常是从各种研究透彻的脑电图(EEG)信号中挑选出来的。卷积神经网络(CNN)主要用来自动特征提取和分类，其在计算机视觉和语音识别领域中的使用已经很广泛。CNN已成功应用于基于EEG的BCI；但是，CNN主要应用于单个BCI范式，在其他范式中的使用比较少，论文作者提出是否可以设计一个CNN架构来准确分类来自不同BCI范式的EEG信号，同时尽可能地紧凑(定义为模型中的参数数量)。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在后面的讲述中以单个脑电图为例，追寻单个脑电图在EEGNet中的变化。C表示channel即通道数，T表示times,准确的说是对应样本的采样点数量。</p><h2 id="第一部分-时间卷积"><a href="#第一部分-时间卷积" class="headerlink" title="第一部分 时间卷积"></a>第一部分 时间卷积</h2><p><img src="/images/20201119100544.png" alt="时间卷积模块"><br>这一部分主要用了F1个(1,64)的卷积核，对时间层面进行了卷积，其填充方式为’same’故最终时间维度的长度没有变。其张量变换如下。</p><ul><li>输入张量(1,C,T)</li><li>卷积核形状(1,64)</li><li>卷积核数量F1</li><li>卷积核参数F1*64</li><li>输出张量(F1,C,T)</li><li>BatchNorm</li></ul><p>这一层对时间上的信息进行了融合，提取了F1种时间维度上的信息。</p><h2 id="第二部分-空间卷积"><a href="#第二部分-空间卷积" class="headerlink" title="第二部分 空间卷积"></a>第二部分 空间卷积</h2><p><img src="/images/20201119101441.png" alt="空间卷积"><br>这一部分有一个非常有意思的东西，叫做深度卷积(Depthwise Convolution)，在接触EEGNet之前我对深度卷积也是只闻其声不见其人。深入了解了它后面的产物深度可分离卷积，再次感叹前人的智慧无穷，还得多看论文。它卷积核的形状是(C,1)负责对各个空间(不同位置电极的输入)的信息进行整合，填充方式选择了”valid”。其张量变换如下。</p><ul><li>输入张量(F1,C,T)</li><li>卷积核形状(C,1)</li><li>卷积核数量 D*F1</li><li>卷积核的参数 C<em>D</em>F1</li><li>输出张量(D*F1,1,T)</li><li>BatchNorm</li></ul><p>这边有个相较于普通卷积不同的地方，普通卷积从F1个核变化到D<em>F1个核需要 F1</em>D <em>F1个卷积核。而深度卷积只用了D</em>F1个卷积核。其区别在哪里呢？得到的信息又会有什么不同呢？下面就来带大家看看二者的区别。</p><h3 id="普通卷积"><a href="#普通卷积" class="headerlink" title="普通卷积"></a>普通卷积</h3><p><img src="/images/20201119102527.png" alt="普通卷积图"></p><p>从图中可以看到，普通卷积的每个通道都要经过一个不一样的卷积核卷积，然后对得到的所有得到的数据进行相加得到一个新的通道。也就是说普通卷积得到新一层的每个通道都整合了上一层网络中所有通道的信息。<br>对于每个输出的通道都需要一组与原通道数量相同的卷积核来进行卷积。</p><h3 id="深度卷积"><a href="#深度卷积" class="headerlink" title="深度卷积"></a>深度卷积</h3><p><img src="/images/20201119103151.png" alt="深度卷积图"></p><p>从图中可以看出，深度卷积的每个通道在经过卷积核之后，没有相加的操作，也就是说一个输出的通道对应一个输入的通道，当然也可以多个输出的通道对应一个输入的通道，在EEGNet里面就有体现，深度卷积里面D就是说D个输出的通道对应一个输入的通道。换句话说，我们对同一个通道进行了D次信息提取。</p><h3 id="在EEGNet的实例中对比"><a href="#在EEGNet的实例中对比" class="headerlink" title="在EEGNet的实例中对比"></a>在EEGNet的实例中对比</h3><p><img src="/images/20201119104216.png" alt="深度卷积与普通卷积的区别，图来我自己的内部交流PPT"></p><h3 id="激活函数与平均池化"><a href="#激活函数与平均池化" class="headerlink" title="激活函数与平均池化"></a>激活函数与平均池化</h3><p>经过激活函数ELU并且平均池化。<br><img src="/images/20201119104620.png" alt="激活函数ELU"><br>张量变换如下</p><ul><li>输入张量(D*F1,1,T)</li><li>池化形状(1,4)</li><li>池化步长(1,4)</li><li>Dropout p=0.25,p=0.5</li><li>输出张量(D*F1,1,T//4)</li></ul><h2 id="第三部分-深度可分离卷积"><a href="#第三部分-深度可分离卷积" class="headerlink" title="第三部分 深度可分离卷积"></a>第三部分 深度可分离卷积</h2><p>EEGNet论文中结构如下。<br><img src="/images/20201119105150.png" alt="可分离卷积概览"></p><p>假设我们现在的目标是从三个通道转换到四个通道。</p><h3 id="普通卷积-1"><a href="#普通卷积-1" class="headerlink" title="普通卷积"></a>普通卷积</h3><p>普通卷积的操作是下面这样的。<br><img src="/images/20201119105317.png" alt="普通卷积"><br>前面有提到，每个输出通道对应一组卷积核，总共需要4<em>3个共12个3</em>3卷积核。</p><h3 id="深度可分离卷积"><a href="#深度可分离卷积" class="headerlink" title="深度可分离卷积"></a>深度可分离卷积</h3><p>这个卷积分成两步。第一步就是前面提到的深度卷积，第二步就是带有1*1卷积核的普通卷积。<br><img src="/images/20201119103151.png" alt="第一步 深度卷积"><br>如果仅仅只走第一步，那么存在两个问题。首先，输出通道的数量不对，我们的目标是要4个通道，但是它只有3个通道；其次，输出通道只包含了对应输入通道的信息，没有包含所有输入通道的信息，没有起到信息整合的作用。所以第二步就显得尤为重要。</p><p><img src="/images/20201119110040.png" alt="第二步 1*1卷积"><br>引入了1*1卷积核的普通卷积，对通道的数量进行转换的同时整合了输入通道的信息。</p><h3 id="在EEGNet的实例中对比-1"><a href="#在EEGNet的实例中对比-1" class="headerlink" title="在EEGNet的实例中对比"></a>在EEGNet的实例中对比</h3><p>同样是需要将输入的张量从(D*F1,1,T//4) 转换到(F2,1,T//4)。</p><p>普通卷积所需参数计算如下。</p><ul><li>(1，16)形状卷积核</li><li>F2组卷积核每组D*F1个</li><li>输出张量（F2，1，T//4）</li><li>所需参数F2<em>D</em> F1*16</li></ul><p>深度可分离卷积所需的参数计算如下：</p><ul><li>第一步卷积：</li><li>(1，16)形状卷积核</li><li>D*F1组 每组1个</li><li>输出张量(D*F1，1，T//4)</li><li>所需参数D<em>F1</em>16</li><li>第二步卷积：</li><li>使用（1,1）形状卷积核进行卷积</li><li>F2组卷积核 每组D*F1个</li><li>输出张量（F2，1，T//4）</li><li>所需参数F2<em>D</em> F1<em>1</em>1</li><li>共需参数D<em>F1</em> 16+F2<em>D</em> F1</li></ul><p>把一个乘法变成了加法，从而减少了所需的参数数量。</p><h2 id="剩余部分"><a href="#剩余部分" class="headerlink" title="剩余部分"></a>剩余部分</h2><p>剩下的部分简单说一下，大家也都会。<br>将前面得到的张量归一化，并使用ELU激活函数激活</p><h3 id="池化部分"><a href="#池化部分" class="headerlink" title="池化部分"></a>池化部分</h3><ul><li>输入张量(F2,1,T//4)</li><li>池化形状(1,8)</li><li>池化步长(1,8)</li><li>Dropout p=0.25 or p=0.5</li><li>输出张量(F2,1,T//32)</li></ul><h3 id="全连接层-不含Bias"><a href="#全连接层-不含Bias" class="headerlink" title="全连接层(不含Bias)"></a>全连接层(不含Bias)</h3><ul><li>输入张量(F2,1,T//32)</li><li>Reshape To(F2*(T//32))</li><li>输出张量N（class_num）</li><li>所需参数数量N<em>F2</em>(T//32)</li><li>激活函数Softmax</li></ul><h2 id="复现EEGNet"><a href="#复现EEGNet" class="headerlink" title="复现EEGNet"></a>复现EEGNet</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>dygraph <span class="token keyword">import</span> Pool2D<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> Dropout<span class="token punctuation">,</span> BatchNorm<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2D<span class="token keyword">class</span> <span class="token class-name">EEGNet</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    EEGNet 暂未加入weight正则化 max norm 1 and 0.25    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name_scope<span class="token punctuation">,</span>ch_nums<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>T<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span>class_dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        构造函数        """</span>        super<span class="token punctuation">(</span>EEGNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name_scope<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>F1 <span class="token operator">=</span> <span class="token number">16</span>        self<span class="token punctuation">.</span>D <span class="token operator">=</span> <span class="token number">2</span>        self<span class="token punctuation">.</span>kern <span class="token operator">=</span> <span class="token number">25</span>        self<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token number">0.25</span>         self<span class="token punctuation">.</span>F2 <span class="token operator">=</span> <span class="token number">16</span><span class="token operator">*</span><span class="token number">2</span> <span class="token comment" spellcheck="true">#self.F1*self.D #可自定义</span>        self<span class="token punctuation">.</span>fcin <span class="token operator">=</span>  self<span class="token punctuation">.</span>F2<span class="token operator">*</span><span class="token punctuation">(</span>T<span class="token operator">//</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#第一层 时间卷积</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>F1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>kern<span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F1<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#第二层 空间卷积</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F1<span class="token punctuation">,</span>self<span class="token punctuation">.</span>D<span class="token operator">*</span>self<span class="token punctuation">.</span>F1<span class="token punctuation">,</span><span class="token punctuation">(</span>ch_nums<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token string">"VALID"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span>self<span class="token punctuation">.</span>F1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#max norm 1</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F1<span class="token operator">*</span>self<span class="token punctuation">.</span>D<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool2 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'avg'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># clip = fluid.clip.GradientClipByNorm(clip_norm=1.0)</span>        <span class="token comment" spellcheck="true">#第三层 可分离卷积</span>        self<span class="token punctuation">.</span>conv3_1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F1<span class="token operator">*</span>self<span class="token punctuation">.</span>D<span class="token punctuation">,</span>self<span class="token punctuation">.</span>F1<span class="token operator">*</span>self<span class="token punctuation">.</span>D<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token string">"SAME"</span><span class="token punctuation">,</span>groups<span class="token operator">=</span>self<span class="token punctuation">.</span>F1<span class="token operator">*</span>self<span class="token punctuation">.</span>D<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3_2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F1<span class="token operator">*</span>self<span class="token punctuation">.</span>D<span class="token punctuation">,</span>self<span class="token punctuation">.</span>F2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span>self<span class="token punctuation">.</span>F2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool3 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool_stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pool_type<span class="token operator">=</span><span class="token string">'avg'</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>fc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span>self<span class="token punctuation">.</span>fcin<span class="token punctuation">,</span> output_dim<span class="token operator">=</span>class_dim<span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#max norm 0.25</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""前向计算"""</span>        <span class="token comment" spellcheck="true"># 第一层</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x=fluid.layers.dropout(x,0.25)</span>        <span class="token comment" spellcheck="true"># x=fluid.layers.transpose(x,[0,3,1,2])</span>                <span class="token comment" spellcheck="true">#第二层</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>pool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#第三层</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>conv3_2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv3_1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>elu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>pool3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span>self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 全连接层</span>        out <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>fcin<span class="token punctuation">]</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out</code></pre><p>对于tensorflow实现的版本，EEGNet论文作者早已给出，也不需要我来给了。这边我用paddlepaddle复现了一下EEGNet，并且在百度的AIStudio上也有公开的项目供大家参考，如果有什么错误的地方也欢迎指出。<br><a href="https://aistudio.baidu.com/aistudio/projectdetail/1153529" target="_blank" rel="noopener external nofollow noreferrer">项目地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 脑电信号 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> paddlepaddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用支持向量机处理快速序列视觉呈现的脑电信号</title>
      <link href="/2020/09/10/rsvp20200910/"/>
      <url>/2020/09/10/rsvp20200910/</url>
      
        <content type="html"><![CDATA[<blockquote><p>RSVP(Rapid Serial Visual Presentation,快速序列视觉呈现)是一种基于视觉图像序列刺激的实验范式,本文在处理脑机合作进行目标检测过程中的脑电信号,判断每段脑电信号中是否存在事件相关电位P300。</p></blockquote><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><ul><li>一共进行了12段。</li><li>每段160张图片，每张图片1s，每段休息20s，即每一段3分钟。</li><li>默认采样率1000</li></ul><h2 id="基本目标"><a href="#基本目标" class="headerlink" title="基本目标"></a>基本目标</h2><p>大脑协助机器进行目标检测，从脑电信号中获取的信息有尽可能高的精确率(预测为正的样本中有多少是真正的正样本)，在精确率高的情况下，提高召回率(样本中的正例有多少被预测正确了)。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>这边无需多说,主要包括引入头文件，设置生成图片的像素，真实目标序列，鼠标点击时间。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mne<span class="token keyword">from</span> mne<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> sample<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'savefig.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#图片像素</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'figure.dpi'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">300</span> <span class="token comment" spellcheck="true">#分辨率</span>target_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span>clicktime<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">45742</span><span class="token punctuation">,</span><span class="token number">80509</span><span class="token punctuation">,</span><span class="token number">87469</span><span class="token punctuation">,</span><span class="token number">117526</span><span class="token punctuation">,</span><span class="token number">122621</span><span class="token punctuation">,</span><span class="token number">128597</span><span class="token punctuation">,</span><span class="token number">133558</span><span class="token punctuation">,</span><span class="token number">138445</span><span class="token punctuation">,</span><span class="token number">142533</span><span class="token punctuation">,</span><span class="token number">150414</span><span class="token punctuation">,</span><span class="token number">199438</span><span class="token punctuation">,</span><span class="token number">208661</span><span class="token punctuation">,</span><span class="token number">214542</span><span class="token punctuation">,</span><span class="token number">232581</span><span class="token punctuation">,</span><span class="token number">239781</span><span class="token punctuation">,</span><span class="token number">244533</span><span class="token punctuation">,</span><span class="token number">265605</span><span class="token punctuation">,</span><span class="token number">272565</span><span class="token punctuation">,</span><span class="token number">279597</span><span class="token punctuation">,</span><span class="token number">306557</span><span class="token punctuation">,</span><span class="token number">313581</span><span class="token punctuation">,</span><span class="token number">320517</span><span class="token punctuation">,</span><span class="token number">325413</span><span class="token punctuation">,</span><span class="token number">330621</span><span class="token punctuation">,</span><span class="token number">370477</span><span class="token punctuation">,</span><span class="token number">375453</span><span class="token punctuation">,</span><span class="token number">381494</span><span class="token punctuation">,</span><span class="token number">388477</span><span class="token punctuation">,</span><span class="token number">400629</span><span class="token punctuation">,</span><span class="token number">405509</span><span class="token punctuation">,</span><span class="token number">411620</span><span class="token punctuation">,</span><span class="token number">424484</span><span class="token punctuation">,</span><span class="token number">430620</span><span class="token punctuation">,</span><span class="token number">437716</span><span class="token punctuation">,</span><span class="token number">443476</span><span class="token punctuation">,</span><span class="token number">459461</span><span class="token punctuation">,</span><span class="token number">471485</span><span class="token punctuation">,</span><span class="token number">482661</span><span class="token punctuation">,</span><span class="token number">499453</span><span class="token punctuation">,</span><span class="token number">546493</span><span class="token punctuation">,</span><span class="token number">557542</span><span class="token punctuation">,</span><span class="token number">561517</span><span class="token punctuation">,</span><span class="token number">599605</span><span class="token punctuation">,</span><span class="token number">652573</span><span class="token punctuation">,</span><span class="token number">659509</span><span class="token punctuation">,</span><span class="token number">663517</span><span class="token punctuation">,</span><span class="token number">668461</span><span class="token punctuation">,</span><span class="token number">678614</span><span class="token punctuation">,</span><span class="token number">684526</span><span class="token punctuation">,</span><span class="token number">754597</span><span class="token punctuation">,</span><span class="token number">758517</span><span class="token punctuation">,</span><span class="token number">772494</span><span class="token punctuation">,</span><span class="token number">778581</span><span class="token punctuation">,</span><span class="token number">791797</span><span class="token punctuation">,</span><span class="token number">805653</span><span class="token punctuation">,</span><span class="token number">811740</span><span class="token punctuation">,</span><span class="token number">814557</span><span class="token punctuation">,</span><span class="token number">820661</span><span class="token punctuation">,</span><span class="token number">826469</span><span class="token punctuation">,</span><span class="token number">845797</span><span class="token punctuation">,</span><span class="token number">909581</span><span class="token punctuation">,</span><span class="token number">916517</span><span class="token punctuation">,</span><span class="token number">922493</span><span class="token punctuation">,</span><span class="token number">927589</span><span class="token punctuation">,</span><span class="token number">932516</span><span class="token punctuation">,</span><span class="token number">954628</span><span class="token punctuation">,</span><span class="token number">969676</span><span class="token punctuation">,</span><span class="token number">1040509</span><span class="token punctuation">,</span><span class="token number">1047692</span><span class="token punctuation">,</span><span class="token number">1054452</span><span class="token punctuation">,</span><span class="token number">1059773</span><span class="token punctuation">,</span><span class="token number">1085468</span><span class="token punctuation">,</span><span class="token number">1103556</span><span class="token punctuation">,</span><span class="token number">1108636</span><span class="token punctuation">,</span><span class="token number">1155660</span><span class="token punctuation">,</span><span class="token number">1160524</span><span class="token punctuation">,</span><span class="token number">1166691</span><span class="token punctuation">,</span><span class="token number">1170483</span><span class="token punctuation">,</span><span class="token number">1186476</span><span class="token punctuation">,</span><span class="token number">1193804</span><span class="token punctuation">,</span><span class="token number">1205564</span><span class="token punctuation">,</span><span class="token number">1281468</span><span class="token punctuation">,</span><span class="token number">1298564</span><span class="token punctuation">,</span><span class="token number">1305812</span><span class="token punctuation">,</span><span class="token number">1334724</span><span class="token punctuation">,</span><span class="token number">1335172</span><span class="token punctuation">,</span><span class="token number">1341332</span><span class="token punctuation">,</span><span class="token number">1351516</span><span class="token punctuation">,</span><span class="token number">1364612</span><span class="token punctuation">,</span><span class="token number">1370468</span><span class="token punctuation">,</span><span class="token number">1376676</span><span class="token punctuation">,</span><span class="token number">1397573</span><span class="token punctuation">,</span><span class="token number">1402756</span><span class="token punctuation">,</span><span class="token number">1408548</span><span class="token punctuation">,</span><span class="token number">1445685</span><span class="token punctuation">,</span><span class="token number">1463596</span><span class="token punctuation">,</span><span class="token number">1467476</span><span class="token punctuation">,</span><span class="token number">1472532</span><span class="token punctuation">,</span><span class="token number">1512524</span><span class="token punctuation">,</span><span class="token number">1517764</span><span class="token punctuation">,</span><span class="token number">1523420</span><span class="token punctuation">,</span><span class="token number">1542492</span><span class="token punctuation">,</span><span class="token number">1551436</span><span class="token punctuation">,</span><span class="token number">1556436</span><span class="token punctuation">,</span><span class="token number">1561484</span><span class="token punctuation">,</span><span class="token number">1566492</span><span class="token punctuation">,</span><span class="token number">1587532</span><span class="token punctuation">,</span><span class="token number">1594532</span><span class="token punctuation">,</span><span class="token number">1627556</span><span class="token punctuation">,</span><span class="token number">1695595</span><span class="token punctuation">,</span><span class="token number">1700515</span><span class="token punctuation">,</span><span class="token number">1710619</span><span class="token punctuation">,</span><span class="token number">1716547</span><span class="token punctuation">,</span><span class="token number">1721564</span><span class="token punctuation">,</span><span class="token number">1725451</span><span class="token punctuation">,</span><span class="token number">1748468</span><span class="token punctuation">,</span><span class="token number">1755491</span><span class="token punctuation">,</span><span class="token number">1761621</span><span class="token punctuation">,</span><span class="token number">1765451</span><span class="token punctuation">,</span><span class="token number">1772467</span><span class="token punctuation">,</span><span class="token number">1828644</span><span class="token punctuation">,</span><span class="token number">1837507</span><span class="token punctuation">,</span><span class="token number">1843419</span><span class="token punctuation">,</span><span class="token number">1850587</span><span class="token punctuation">,</span><span class="token number">1857443</span><span class="token punctuation">,</span><span class="token number">1865499</span><span class="token punctuation">,</span><span class="token number">1876483</span><span class="token punctuation">,</span><span class="token number">1887572</span><span class="token punctuation">,</span><span class="token number">1892595</span><span class="token punctuation">,</span><span class="token number">1903604</span><span class="token punctuation">,</span><span class="token number">1924627</span><span class="token punctuation">,</span><span class="token number">999999999999999</span><span class="token punctuation">]</span>filename <span class="token operator">=</span> <span class="token string">'./data/P300_XH_Real.cnt'</span></code></pre><h2 id="数据加载函数"><a href="#数据加载函数" class="headerlink" title="数据加载函数"></a>数据加载函数</h2><p>可以自定义数据路径，加载后降采样到什么程度，用什么程度的滤波，使用哪些电极通道等等。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>sig_rate<span class="token punctuation">,</span>drop_channels<span class="token punctuation">,</span>low_f<span class="token punctuation">,</span>up_f<span class="token punctuation">)</span><span class="token punctuation">:</span>    raw <span class="token operator">=</span> mne<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_raw_cnt<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>preload<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    raw<span class="token punctuation">.</span>drop_channels<span class="token punctuation">(</span>drop_channels<span class="token punctuation">)</span>    raw<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>low_f<span class="token punctuation">,</span>up_f<span class="token punctuation">,</span>fir_design<span class="token operator">=</span><span class="token string">'firwin'</span><span class="token punctuation">)</span>    raw<span class="token punctuation">.</span>resample<span class="token punctuation">(</span>sig_rate<span class="token punctuation">)</span>    raw<span class="token punctuation">.</span>plot_psd<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> raw<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span></code></pre><h2 id="数据加载"><a href="#数据加载" class="headerlink" title="数据加载"></a>数据加载</h2><p>这里总共有三种配置，用三种配置分别加载数据，看看哪个结果好。<br>这里我使用配置二（其他的都试过了，配置二相对好）。</p><h3 id="配置一"><a href="#配置一" class="headerlink" title="配置一"></a>配置一</h3><ul><li>21导联 [P7,P5,P3,P1,PZ,P2,P4,P6,P8,PO7,PO5,PO3,POZ,PO4,PO6,PO8,CB1,O1,OZ,O2,CB2]</li><li>降采样至200HZ，2-70Hz滤波</li></ul><pre class=" language-python"><code class="language-python">tot_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'FP1'</span><span class="token punctuation">,</span> <span class="token string">'FPZ'</span><span class="token punctuation">,</span> <span class="token string">'FP2'</span><span class="token punctuation">,</span> <span class="token string">'AF3'</span><span class="token punctuation">,</span> <span class="token string">'AF4'</span><span class="token punctuation">,</span> <span class="token string">'F7'</span><span class="token punctuation">,</span> <span class="token string">'F5'</span><span class="token punctuation">,</span> <span class="token string">'F3'</span><span class="token punctuation">,</span> <span class="token string">'F1'</span><span class="token punctuation">,</span> <span class="token string">'FZ'</span><span class="token punctuation">,</span> <span class="token string">'F2'</span><span class="token punctuation">,</span> <span class="token string">'F4'</span><span class="token punctuation">,</span> <span class="token string">'F6'</span><span class="token punctuation">,</span> <span class="token string">'F8'</span><span class="token punctuation">,</span> <span class="token string">'FT7'</span><span class="token punctuation">,</span> <span class="token string">'FC5'</span><span class="token punctuation">,</span> <span class="token string">'FC3'</span><span class="token punctuation">,</span> <span class="token string">'FC1'</span><span class="token punctuation">,</span> <span class="token string">'FCZ'</span><span class="token punctuation">,</span> <span class="token string">'FC2'</span><span class="token punctuation">,</span> <span class="token string">'FC4'</span><span class="token punctuation">,</span> <span class="token string">'FC6'</span><span class="token punctuation">,</span> <span class="token string">'FT8'</span><span class="token punctuation">,</span> <span class="token string">'T7'</span><span class="token punctuation">,</span> <span class="token string">'C5'</span><span class="token punctuation">,</span> <span class="token string">'C3'</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">,</span> <span class="token string">'C2'</span><span class="token punctuation">,</span> <span class="token string">'C4'</span><span class="token punctuation">,</span> <span class="token string">'C6'</span><span class="token punctuation">,</span> <span class="token string">'T8'</span><span class="token punctuation">,</span> <span class="token string">'M1'</span><span class="token punctuation">,</span> <span class="token string">'TP7'</span><span class="token punctuation">,</span> <span class="token string">'CP5'</span><span class="token punctuation">,</span> <span class="token string">'CP3'</span><span class="token punctuation">,</span> <span class="token string">'CP1'</span><span class="token punctuation">,</span> <span class="token string">'CPZ'</span><span class="token punctuation">,</span> <span class="token string">'CP2'</span><span class="token punctuation">,</span> <span class="token string">'CP4'</span><span class="token punctuation">,</span> <span class="token string">'CP6'</span><span class="token punctuation">,</span> <span class="token string">'TP8'</span><span class="token punctuation">,</span> <span class="token string">'M2'</span><span class="token punctuation">,</span> <span class="token string">'P7'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'PZ'</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">,</span> <span class="token string">'P4'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'P8'</span><span class="token punctuation">,</span> <span class="token string">'PO7'</span><span class="token punctuation">,</span> <span class="token string">'PO5'</span><span class="token punctuation">,</span> <span class="token string">'PO3'</span><span class="token punctuation">,</span> <span class="token string">'POZ'</span><span class="token punctuation">,</span> <span class="token string">'PO4'</span><span class="token punctuation">,</span> <span class="token string">'PO6'</span><span class="token punctuation">,</span> <span class="token string">'PO8'</span><span class="token punctuation">,</span> <span class="token string">'CB1'</span><span class="token punctuation">,</span> <span class="token string">'O1'</span><span class="token punctuation">,</span> <span class="token string">'OZ'</span><span class="token punctuation">,</span> <span class="token string">'O2'</span><span class="token punctuation">,</span> <span class="token string">'CB2'</span><span class="token punctuation">,</span> <span class="token string">'HEO'</span><span class="token punctuation">,</span> <span class="token string">'VEO'</span><span class="token punctuation">,</span> <span class="token string">'EKG'</span><span class="token punctuation">,</span> <span class="token string">'EMG'</span><span class="token punctuation">]</span>need_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'P7'</span><span class="token punctuation">,</span><span class="token string">'P5'</span><span class="token punctuation">,</span><span class="token string">'P3'</span><span class="token punctuation">,</span><span class="token string">'P1'</span><span class="token punctuation">,</span><span class="token string">'PZ'</span><span class="token punctuation">,</span><span class="token string">'P2'</span><span class="token punctuation">,</span><span class="token string">'P4'</span><span class="token punctuation">,</span><span class="token string">'P6'</span><span class="token punctuation">,</span><span class="token string">'P8'</span><span class="token punctuation">,</span><span class="token string">'PO7'</span><span class="token punctuation">,</span><span class="token string">'PO5'</span><span class="token punctuation">,</span><span class="token string">'PO3'</span><span class="token punctuation">,</span><span class="token string">'POZ'</span><span class="token punctuation">,</span><span class="token string">'PO4'</span><span class="token punctuation">,</span><span class="token string">'PO6'</span><span class="token punctuation">,</span><span class="token string">'PO8'</span><span class="token punctuation">,</span><span class="token string">'CB1'</span><span class="token punctuation">,</span><span class="token string">'O1'</span><span class="token punctuation">,</span><span class="token string">'OZ'</span><span class="token punctuation">,</span><span class="token string">'O2'</span><span class="token punctuation">,</span><span class="token string">'CB2'</span><span class="token punctuation">]</span>drop_channels<span class="token operator">=</span><span class="token punctuation">[</span> item <span class="token keyword">for</span> item <span class="token keyword">in</span> tot_channel  <span class="token keyword">if</span> item <span class="token operator">not</span> <span class="token keyword">in</span> need_channel<span class="token punctuation">]</span>sig_rate<span class="token operator">=</span><span class="token number">200</span>data<span class="token punctuation">,</span>times<span class="token operator">=</span>load_data<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>sig_rate<span class="token punctuation">,</span>drop_channels<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20200910172713.png" alt="配置一功率谱密度图"></p><h3 id="配置二"><a href="#配置二" class="headerlink" title="配置二"></a>配置二</h3><ul><li>16导联 [FZ,FC1,FC2,C3,CZ,C4,CP1,CP2,P7,P3,PZ,P4,P8,O1,OZ,O2]</li><li>降采样至32Hz,1-12Hz滤波</li></ul><pre class=" language-python"><code class="language-python">tot_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'FP1'</span><span class="token punctuation">,</span> <span class="token string">'FPZ'</span><span class="token punctuation">,</span> <span class="token string">'FP2'</span><span class="token punctuation">,</span> <span class="token string">'AF3'</span><span class="token punctuation">,</span> <span class="token string">'AF4'</span><span class="token punctuation">,</span> <span class="token string">'F7'</span><span class="token punctuation">,</span> <span class="token string">'F5'</span><span class="token punctuation">,</span> <span class="token string">'F3'</span><span class="token punctuation">,</span> <span class="token string">'F1'</span><span class="token punctuation">,</span> <span class="token string">'FZ'</span><span class="token punctuation">,</span> <span class="token string">'F2'</span><span class="token punctuation">,</span> <span class="token string">'F4'</span><span class="token punctuation">,</span> <span class="token string">'F6'</span><span class="token punctuation">,</span> <span class="token string">'F8'</span><span class="token punctuation">,</span> <span class="token string">'FT7'</span><span class="token punctuation">,</span> <span class="token string">'FC5'</span><span class="token punctuation">,</span> <span class="token string">'FC3'</span><span class="token punctuation">,</span> <span class="token string">'FC1'</span><span class="token punctuation">,</span> <span class="token string">'FCZ'</span><span class="token punctuation">,</span> <span class="token string">'FC2'</span><span class="token punctuation">,</span> <span class="token string">'FC4'</span><span class="token punctuation">,</span> <span class="token string">'FC6'</span><span class="token punctuation">,</span> <span class="token string">'FT8'</span><span class="token punctuation">,</span> <span class="token string">'T7'</span><span class="token punctuation">,</span> <span class="token string">'C5'</span><span class="token punctuation">,</span> <span class="token string">'C3'</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">,</span> <span class="token string">'C2'</span><span class="token punctuation">,</span> <span class="token string">'C4'</span><span class="token punctuation">,</span> <span class="token string">'C6'</span><span class="token punctuation">,</span> <span class="token string">'T8'</span><span class="token punctuation">,</span> <span class="token string">'M1'</span><span class="token punctuation">,</span> <span class="token string">'TP7'</span><span class="token punctuation">,</span> <span class="token string">'CP5'</span><span class="token punctuation">,</span> <span class="token string">'CP3'</span><span class="token punctuation">,</span> <span class="token string">'CP1'</span><span class="token punctuation">,</span> <span class="token string">'CPZ'</span><span class="token punctuation">,</span> <span class="token string">'CP2'</span><span class="token punctuation">,</span> <span class="token string">'CP4'</span><span class="token punctuation">,</span> <span class="token string">'CP6'</span><span class="token punctuation">,</span> <span class="token string">'TP8'</span><span class="token punctuation">,</span> <span class="token string">'M2'</span><span class="token punctuation">,</span> <span class="token string">'P7'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'PZ'</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">,</span> <span class="token string">'P4'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'P8'</span><span class="token punctuation">,</span> <span class="token string">'PO7'</span><span class="token punctuation">,</span> <span class="token string">'PO5'</span><span class="token punctuation">,</span> <span class="token string">'PO3'</span><span class="token punctuation">,</span> <span class="token string">'POZ'</span><span class="token punctuation">,</span> <span class="token string">'PO4'</span><span class="token punctuation">,</span> <span class="token string">'PO6'</span><span class="token punctuation">,</span> <span class="token string">'PO8'</span><span class="token punctuation">,</span> <span class="token string">'CB1'</span><span class="token punctuation">,</span> <span class="token string">'O1'</span><span class="token punctuation">,</span> <span class="token string">'OZ'</span><span class="token punctuation">,</span> <span class="token string">'O2'</span><span class="token punctuation">,</span> <span class="token string">'CB2'</span><span class="token punctuation">,</span> <span class="token string">'HEO'</span><span class="token punctuation">,</span> <span class="token string">'VEO'</span><span class="token punctuation">,</span> <span class="token string">'EKG'</span><span class="token punctuation">,</span> <span class="token string">'EMG'</span><span class="token punctuation">]</span>need_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'FZ'</span><span class="token punctuation">,</span><span class="token string">'FC1'</span><span class="token punctuation">,</span><span class="token string">'FC2'</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">,</span><span class="token string">'CZ'</span><span class="token punctuation">,</span><span class="token string">'C4'</span><span class="token punctuation">,</span><span class="token string">'CP1'</span><span class="token punctuation">,</span><span class="token string">'CP2'</span><span class="token punctuation">,</span><span class="token string">'P7'</span><span class="token punctuation">,</span><span class="token string">'P3'</span><span class="token punctuation">,</span><span class="token string">'PZ'</span><span class="token punctuation">,</span><span class="token string">'P4'</span><span class="token punctuation">,</span><span class="token string">'P8'</span><span class="token punctuation">,</span><span class="token string">'O1'</span><span class="token punctuation">,</span><span class="token string">'OZ'</span><span class="token punctuation">,</span><span class="token string">'O2'</span><span class="token punctuation">]</span>drop_channels<span class="token operator">=</span><span class="token punctuation">[</span> item <span class="token keyword">for</span> item <span class="token keyword">in</span> tot_channel  <span class="token keyword">if</span> item <span class="token operator">not</span> <span class="token keyword">in</span> need_channel<span class="token punctuation">]</span>sig_rate<span class="token operator">=</span><span class="token number">32</span>data<span class="token punctuation">,</span>times<span class="token operator">=</span>load_data<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>sig_rate<span class="token punctuation">,</span>drop_channels<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20200910172849.png" alt="配置二功率谱密度图"></p><h3 id="配置三"><a href="#配置三" class="headerlink" title="配置三"></a>配置三</h3><ul><li>21导联 [P7,P5,P3,P1,PZ,P2,P4,P6,P8,PO7,PO5,PO3,POZ,PO4,PO6,PO8,CB1,O1,OZ,O2,CB2]</li><li>降采样至200HZ，1-20Hz滤波</li></ul><pre class=" language-python"><code class="language-python">tot_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'FP1'</span><span class="token punctuation">,</span> <span class="token string">'FPZ'</span><span class="token punctuation">,</span> <span class="token string">'FP2'</span><span class="token punctuation">,</span> <span class="token string">'AF3'</span><span class="token punctuation">,</span> <span class="token string">'AF4'</span><span class="token punctuation">,</span> <span class="token string">'F7'</span><span class="token punctuation">,</span> <span class="token string">'F5'</span><span class="token punctuation">,</span> <span class="token string">'F3'</span><span class="token punctuation">,</span> <span class="token string">'F1'</span><span class="token punctuation">,</span> <span class="token string">'FZ'</span><span class="token punctuation">,</span> <span class="token string">'F2'</span><span class="token punctuation">,</span> <span class="token string">'F4'</span><span class="token punctuation">,</span> <span class="token string">'F6'</span><span class="token punctuation">,</span> <span class="token string">'F8'</span><span class="token punctuation">,</span> <span class="token string">'FT7'</span><span class="token punctuation">,</span> <span class="token string">'FC5'</span><span class="token punctuation">,</span> <span class="token string">'FC3'</span><span class="token punctuation">,</span> <span class="token string">'FC1'</span><span class="token punctuation">,</span> <span class="token string">'FCZ'</span><span class="token punctuation">,</span> <span class="token string">'FC2'</span><span class="token punctuation">,</span> <span class="token string">'FC4'</span><span class="token punctuation">,</span> <span class="token string">'FC6'</span><span class="token punctuation">,</span> <span class="token string">'FT8'</span><span class="token punctuation">,</span> <span class="token string">'T7'</span><span class="token punctuation">,</span> <span class="token string">'C5'</span><span class="token punctuation">,</span> <span class="token string">'C3'</span><span class="token punctuation">,</span> <span class="token string">'C1'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">,</span> <span class="token string">'C2'</span><span class="token punctuation">,</span> <span class="token string">'C4'</span><span class="token punctuation">,</span> <span class="token string">'C6'</span><span class="token punctuation">,</span> <span class="token string">'T8'</span><span class="token punctuation">,</span> <span class="token string">'M1'</span><span class="token punctuation">,</span> <span class="token string">'TP7'</span><span class="token punctuation">,</span> <span class="token string">'CP5'</span><span class="token punctuation">,</span> <span class="token string">'CP3'</span><span class="token punctuation">,</span> <span class="token string">'CP1'</span><span class="token punctuation">,</span> <span class="token string">'CPZ'</span><span class="token punctuation">,</span> <span class="token string">'CP2'</span><span class="token punctuation">,</span> <span class="token string">'CP4'</span><span class="token punctuation">,</span> <span class="token string">'CP6'</span><span class="token punctuation">,</span> <span class="token string">'TP8'</span><span class="token punctuation">,</span> <span class="token string">'M2'</span><span class="token punctuation">,</span> <span class="token string">'P7'</span><span class="token punctuation">,</span> <span class="token string">'P5'</span><span class="token punctuation">,</span> <span class="token string">'P3'</span><span class="token punctuation">,</span> <span class="token string">'P1'</span><span class="token punctuation">,</span> <span class="token string">'PZ'</span><span class="token punctuation">,</span> <span class="token string">'P2'</span><span class="token punctuation">,</span> <span class="token string">'P4'</span><span class="token punctuation">,</span> <span class="token string">'P6'</span><span class="token punctuation">,</span> <span class="token string">'P8'</span><span class="token punctuation">,</span> <span class="token string">'PO7'</span><span class="token punctuation">,</span> <span class="token string">'PO5'</span><span class="token punctuation">,</span> <span class="token string">'PO3'</span><span class="token punctuation">,</span> <span class="token string">'POZ'</span><span class="token punctuation">,</span> <span class="token string">'PO4'</span><span class="token punctuation">,</span> <span class="token string">'PO6'</span><span class="token punctuation">,</span> <span class="token string">'PO8'</span><span class="token punctuation">,</span> <span class="token string">'CB1'</span><span class="token punctuation">,</span> <span class="token string">'O1'</span><span class="token punctuation">,</span> <span class="token string">'OZ'</span><span class="token punctuation">,</span> <span class="token string">'O2'</span><span class="token punctuation">,</span> <span class="token string">'CB2'</span><span class="token punctuation">,</span> <span class="token string">'HEO'</span><span class="token punctuation">,</span> <span class="token string">'VEO'</span><span class="token punctuation">,</span> <span class="token string">'EKG'</span><span class="token punctuation">,</span> <span class="token string">'EMG'</span><span class="token punctuation">]</span>need_channel<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'P7'</span><span class="token punctuation">,</span><span class="token string">'P5'</span><span class="token punctuation">,</span><span class="token string">'P3'</span><span class="token punctuation">,</span><span class="token string">'P1'</span><span class="token punctuation">,</span><span class="token string">'PZ'</span><span class="token punctuation">,</span><span class="token string">'P2'</span><span class="token punctuation">,</span><span class="token string">'P4'</span><span class="token punctuation">,</span><span class="token string">'P6'</span><span class="token punctuation">,</span><span class="token string">'P8'</span><span class="token punctuation">,</span><span class="token string">'PO7'</span><span class="token punctuation">,</span><span class="token string">'PO5'</span><span class="token punctuation">,</span><span class="token string">'PO3'</span><span class="token punctuation">,</span><span class="token string">'POZ'</span><span class="token punctuation">,</span><span class="token string">'PO4'</span><span class="token punctuation">,</span><span class="token string">'PO6'</span><span class="token punctuation">,</span><span class="token string">'PO8'</span><span class="token punctuation">,</span><span class="token string">'CB1'</span><span class="token punctuation">,</span><span class="token string">'O1'</span><span class="token punctuation">,</span><span class="token string">'OZ'</span><span class="token punctuation">,</span><span class="token string">'O2'</span><span class="token punctuation">,</span><span class="token string">'CB2'</span><span class="token punctuation">]</span>drop_channels<span class="token operator">=</span><span class="token punctuation">[</span> item <span class="token keyword">for</span> item <span class="token keyword">in</span> tot_channel  <span class="token keyword">if</span> item <span class="token operator">not</span> <span class="token keyword">in</span> need_channel<span class="token punctuation">]</span>sig_rate<span class="token operator">=</span><span class="token number">200</span>data<span class="token punctuation">,</span>times<span class="token operator">=</span>load_data<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>sig_rate<span class="token punctuation">,</span>drop_channels<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p><img src="/images/20200910173019.png" alt="配置三功率谱密度图"></p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>把时间序列数据从里面一块块摘出来，并且打上标签。</p><pre class=" language-python"><code class="language-python">labels_train<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>signals_train<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>sa1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>sa2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>eeg<span class="token operator">=</span>datamv<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.175</span><span class="token operator">*</span>sig_rate<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#偏移</span>k_fos <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dp_start <span class="token operator">=</span> mv<span class="token operator">+</span>i <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">*</span> sig_rate    s2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">and</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        btime<span class="token operator">=</span>int<span class="token punctuation">(</span> dp_start<span class="token operator">+</span>j<span class="token operator">*</span>sig_rate<span class="token punctuation">)</span>        etime<span class="token operator">=</span>int<span class="token punctuation">(</span>dp_start<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>sig_rate<span class="token punctuation">)</span>        dataTrain <span class="token operator">=</span> eeg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>btime<span class="token punctuation">:</span>etime<span class="token punctuation">]</span>        signals_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataTrain<span class="token punctuation">)</span>        <span class="token keyword">if</span> clicktime<span class="token punctuation">[</span>k_fos<span class="token punctuation">]</span><span class="token operator">&lt;</span>etime<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">/</span>sig_rate <span class="token operator">and</span> clicktime<span class="token punctuation">[</span>k_fos<span class="token punctuation">]</span><span class="token operator">>=</span>btime<span class="token operator">*</span><span class="token number">1000</span><span class="token operator">/</span>sig_rate<span class="token punctuation">:</span>            labels_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            sa1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataTrain<span class="token punctuation">)</span>            k_fos <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            labels_train<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            sa2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataTrain<span class="token punctuation">)</span>test_x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>test_y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dp_start <span class="token operator">=</span> mv<span class="token operator">+</span>i <span class="token operator">*</span> <span class="token number">180</span> <span class="token operator">*</span> sig_rate    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        btime<span class="token operator">=</span>int<span class="token punctuation">(</span> dp_start<span class="token operator">+</span>j<span class="token operator">*</span>sig_rate<span class="token punctuation">)</span>        etime<span class="token operator">=</span>int<span class="token punctuation">(</span>dp_start<span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>sig_rate<span class="token punctuation">)</span>        dataTrain <span class="token operator">=</span> eeg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>btime<span class="token punctuation">:</span>etime<span class="token punctuation">]</span>        test_x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataTrain<span class="token punctuation">)</span>        <span class="token keyword">if</span> j <span class="token keyword">in</span> target_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            test_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            test_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>signals_train<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>上面运行后就可以根据输出结果reshape,当然也可以直接变量传递，我比较喜欢看一下进行后面的。</p><pre class=" language-python"><code class="language-python">signals_train<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>signals_train<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1759</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_x<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>signals_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span></code></pre><h2 id="数据的归一化训练集测试集的划分"><a href="#数据的归一化训练集测试集的划分" class="headerlink" title="数据的归一化训练集测试集的划分"></a>数据的归一化训练集测试集的划分</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> svm<span class="token keyword">import</span> sklearn<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScalerStan_scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>signals_train<span class="token operator">=</span> Stan_scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>signals_train<span class="token punctuation">)</span>train_data<span class="token punctuation">,</span>test_data<span class="token punctuation">,</span>train_label<span class="token punctuation">,</span>test_label <span class="token operator">=</span>sklearn<span class="token punctuation">.</span>model_selection<span class="token punctuation">.</span>train_test_split<span class="token punctuation">(</span>signals_train<span class="token punctuation">,</span>labels_train<span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> train_size<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span></code></pre><h2 id="调用SVM进行分类器的训练"><a href="#调用SVM进行分类器的训练" class="headerlink" title="调用SVM进行分类器的训练"></a>调用SVM进行分类器的训练</h2><pre class=" language-python"><code class="language-python">classifier<span class="token operator">=</span>svm<span class="token punctuation">.</span>SVC<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>kernel<span class="token operator">=</span><span class="token string">'rbf'</span><span class="token punctuation">,</span>decision_function_shape<span class="token operator">=</span><span class="token string">'ovr'</span><span class="token punctuation">,</span>class_weight<span class="token operator">=</span><span class="token string">'balanced'</span><span class="token punctuation">,</span>probability<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ovr:一对多策略</span>classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span></code></pre><p>输出结果如下</p><blockquote><p>SVC(C=0.9, cache_size=200, class_weight=’balanced’, coef0=0.0,<br>  decision_function_shape=’ovr’, degree=3, gamma=’auto’, kernel=’rbf’,<br>  max_iter=-1, probability=True, random_state=None, shrinking=True,<br>  tol=0.001, verbose=False)</p></blockquote><h2 id="拿测试集进行预测并检验结果"><a href="#拿测试集进行预测并检验结果" class="headerlink" title="拿测试集进行预测并检验结果"></a>拿测试集进行预测并检验结果</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> recall_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> precision_scoretra_label<span class="token operator">=</span>classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#训练集的预测标签</span>tes_label<span class="token operator">=</span>classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#测试集的预测标签</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集："</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>train_label<span class="token punctuation">,</span>tra_label<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集："</span><span class="token punctuation">,</span> accuracy_score<span class="token punctuation">(</span>test_label<span class="token punctuation">,</span>tes_label<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集精确率（预测为正的样本中有多少是真正的正样本。）："</span><span class="token punctuation">,</span>precision_score<span class="token punctuation">(</span>test_label<span class="token punctuation">,</span>tes_label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集召回率（样本中的正例有多少被预测正确了。）："</span><span class="token punctuation">,</span>recall_score<span class="token punctuation">(</span>test_label<span class="token punctuation">,</span>tes_label<span class="token punctuation">)</span><span class="token punctuation">)</span>tes_label</code></pre><p>输出结果如下</p><ul><li>训练集： 0.9993682880606444</li><li>测试集： 0.9886363636363636</li><li>测试集精确率（预测为正的样本中有多少是真正的正样本。）： 1.0</li><li>测试集召回率（样本中的正例有多少被预测正确了。）： 0.6666666666666666</li></ul><p>这里是对于有人工参与点击鼠标进行的标签用于测试模型。也就是说这个标签的实质是人脑是否有波动，而非该时间段是否有目标出现。<br>因为人脑检测到的目标不一定是正确的目标，但是训练的时候需要以人脑是否有波动为准。<br>可以看到在精确率表现不错（样本其实还是比较少，不然没那么高）。</p><h2 id="最后看看实际操作"><a href="#最后看看实际操作" class="headerlink" title="最后看看实际操作"></a>最后看看实际操作</h2><pre class=" language-python"><code class="language-python">tes_label<span class="token operator">=</span>classifier<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>Stan_scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集精确率（预测为正的样本中有多少是真正的正样本。）："</span><span class="token punctuation">,</span>precision_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span>tes_label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集召回率（样本中的正例有多少被预测正确了。）："</span><span class="token punctuation">,</span>recall_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span>tes_label<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>测试集精确率（预测为正的样本中有多少是真正的正样本。）： 1.0</li><li>测试集召回率（样本中的正例有多少被预测正确了。）： 0.06666666666666667</li></ul><p>这里的标签就是该时间段是否有目标呈现，也就是真正应用场景中的精确率。<br>可以看到精确率还是挺高的，但是也存在问题，那就是召回率太低了，它只找到了很小一部分目标，很可能是瞎猫碰到死老鼠，具体问题出现在哪里还是要看后续研究了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> RSVP </tag>
            
            <tag> 脑电信号 </tag>
            
            <tag> 事件相关电位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Pierre Dellacherie算法玩俄罗斯方块</title>
      <link href="/2020/09/03/tetris2/"/>
      <url>/2020/09/03/tetris2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个算法更加注重俄罗斯方块的不死性，如果用遗传算法或者模拟退火算法训练好权重后能够达到很好的效果。主要参考<a href="https://blog.csdn.net/qq_41882147/article/details/80005763" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/qq_41882147/article/details/80005763</a>进行设计。</p></blockquote><h2 id="评价函数"><a href="#评价函数" class="headerlink" title="评价函数"></a>评价函数</h2><ul><li>landingHeight:指当前板块放置之后，板块重心距离游戏区域底部的距离。（也就是小方块的海拔高度）</li><li>erodedPieceCellsMetric:这是消除参数的体现，他代表的是消除的行数与当前摆放的板块中被消除的小方块的格数的成绩。</li><li>boardRowTransitions:对于每一行小方格，从左往右看，从无小方格到有小方格是一种“变换”，从有小方格到无小方格也是一种“变换”，这个属性是各行中“变换”之和</li><li>boardColTransitions:这是每一列的变换次数之和</li><li>boardBuriedHoles:各列中的“空洞的小方格数之和”</li><li>boardWells:各列中“井”的深度的连加和。“井”的定义是，两边（包括边界）都有方块填充的空列。</li></ul><p>这里用到的权重如下</p><table><thead><tr><th>参数名</th><th>权值</th></tr></thead><tbody><tr><td>landingHeight</td><td>-4.500158825082766</td></tr><tr><td>erodedPieceCellsMetric</td><td>3.4181268101392694</td></tr><tr><td>boardRowTransitions</td><td>-3.2178882868487753</td></tr><tr><td>boardColTransitions</td><td>-9.348695305445199</td></tr><tr><td>boardBuriedHoles</td><td>-7.899265427351652</td></tr><tr><td>boardWells</td><td>-3.3855972247263626</td></tr></tbody></table><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>主要是像上篇文章所讲的一样，将方块的动作进行重组，以落下一次作为一个组合动作(像格斗游戏里的组合技)，不区分方块类型总共可以有40个组合动作，即分别从0-9列下降，旋转0-3次。<br>然后在操作之前先模拟操作，模拟完这40个动作之后，看看哪个动作得分最高就选哪个进行实操。</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 单一动作下落代码</span>    <span class="token keyword">def</span> <span class="token function">frame_step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>input<span class="token punctuation">,</span>dummy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>pump<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movingLeft <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>movingRight <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># time.sleep(0.2)</span>        terminal <span class="token operator">=</span> <span class="token boolean">False</span>        landed <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true">#none is 10000, left is 01000, right is 00100, space(rotate) is 00010, down is 00001</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>fallingPiece <span class="token operator">==</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># No falling piece in play, so start a new piece at the top</span>            self<span class="token punctuation">.</span>fallingPiece <span class="token operator">=</span> self<span class="token punctuation">.</span>nextPiece            self<span class="token punctuation">.</span>nextPiece <span class="token operator">=</span> self<span class="token punctuation">.</span>getNewPiece<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>lastFallTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># reset self.lastFallTime</span>                        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                image_data <span class="token operator">=</span> pygame<span class="token punctuation">.</span>surfarray<span class="token punctuation">.</span>array3d<span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>get_surface<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># cv2.imshow("name",image_data)</span>                <span class="token comment" spellcheck="true"># time.sleep(5)</span>                terminal <span class="token operator">=</span> <span class="token boolean">True</span>                                self<span class="token punctuation">.</span>reinit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> image_data<span class="token punctuation">,</span> landed<span class="token punctuation">,</span> terminal <span class="token comment" spellcheck="true"># can't fit a new piece on the self.board, so game over</span>        <span class="token comment" spellcheck="true"># move left</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span>adjX<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>movingLeft <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>movingRight <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>lastMoveSidewaysTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># move right</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span>adjX<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>movingRight <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>movingLeft <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>lastMoveSidewaysTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># rotating the piece (if there is room to rotate)</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'rotation'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'rotation'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>PIECES<span class="token punctuation">[</span>self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'rotation'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'rotation'</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>PIECES<span class="token punctuation">[</span>self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'shape'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># move the current piece all the way down</span>        <span class="token keyword">elif</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>movingDown <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>movingLeft <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>movingRight <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> BOARDHEIGHT<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span>adjY<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>movingDown<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>lastMoveDownTime <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># let the piece fall if it is time to fall</span>        <span class="token comment" spellcheck="true"># see if the piece has landed</span>        cleared <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isValidPosition<span class="token punctuation">(</span>adjY<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># falling piece has landed, set it on the self.board</span>            landed<span class="token operator">=</span><span class="token boolean">True</span>            self<span class="token punctuation">.</span>lh <span class="token operator">=</span> BOARDHEIGHT <span class="token operator">-</span> self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>getmid<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>addToBoard<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>epcm <span class="token operator">=</span> self<span class="token punctuation">.</span>getEpcm<span class="token punctuation">(</span><span class="token punctuation">)</span>            cleared <span class="token operator">=</span> self<span class="token punctuation">.</span>removeCompleteLines<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>epcm <span class="token operator">*=</span> cleared            <span class="token keyword">if</span> cleared <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> cleared <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">40</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>level                <span class="token keyword">elif</span> cleared <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">100</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>level                <span class="token keyword">elif</span> cleared <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">300</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>level                <span class="token keyword">elif</span> cleared <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1200</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>level            self<span class="token punctuation">.</span>brt <span class="token operator">=</span> self<span class="token punctuation">.</span>getBrt<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>bct <span class="token operator">=</span> self<span class="token punctuation">.</span>getBct<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>holes <span class="token operator">=</span> self<span class="token punctuation">.</span>getHoles<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>wells <span class="token operator">=</span> self<span class="token punctuation">.</span>getWells<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>score <span class="token operator">+=</span> self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>lines <span class="token operator">+=</span> cleared            self<span class="token punctuation">.</span>total_lines <span class="token operator">+=</span> cleared            self<span class="token punctuation">.</span>height <span class="token operator">=</span> self<span class="token punctuation">.</span>getHeight<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>level<span class="token punctuation">,</span> self<span class="token punctuation">.</span>fallFreq <span class="token operator">=</span> self<span class="token punctuation">.</span>calculateLevelAndFallFreq<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>fallingPiece <span class="token operator">=</span> None        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># piece did not land, just move the piece down</span>            self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> dummy<span class="token punctuation">:</span>            <span class="token keyword">return</span> None<span class="token punctuation">,</span>landed<span class="token punctuation">,</span>terminal        <span class="token comment" spellcheck="true"># drawing everything on the screen</span>        DISPLAYSURF<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>BGCOLOR<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drawBoard<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drawStatus<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drawNextPiece<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>fallingPiece <span class="token operator">!=</span> None<span class="token punctuation">:</span>           self<span class="token punctuation">.</span>drawPiece<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fallingPiece<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>drawPiece<span class="token punctuation">(</span>self<span class="token punctuation">.</span>nextPiece<span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        image_data <span class="token operator">=</span> pygame<span class="token punctuation">.</span>surfarray<span class="token punctuation">.</span>array3d<span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>get_surface<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> image_data<span class="token punctuation">,</span>landed<span class="token punctuation">,</span> terminal</code></pre><p>这个代码里面有单一动作下落，dummy==True的时候就会不更新pygame显示的画面，也就是用于模拟下落。</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>主函数的设计如下，主要就是尝试调用恢复。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"game/"</span><span class="token punctuation">)</span><span class="token keyword">import</span> tetris_fun_nice <span class="token keyword">as</span> game<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> copyACTION<span class="token operator">=</span> <span class="token number">40</span><span class="token keyword">def</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tetris <span class="token operator">=</span> game<span class="token punctuation">.</span>GameState<span class="token punctuation">(</span><span class="token punctuation">)</span>    action0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>ACTION<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do nothing'</span>    action0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    observation0<span class="token punctuation">,</span> reward0<span class="token punctuation">,</span> terminal <span class="token operator">=</span> tetris<span class="token punctuation">.</span>combine_step<span class="token punctuation">(</span>action0<span class="token punctuation">)</span>    lobservation <span class="token operator">=</span> observation0    lscore<span class="token operator">=</span><span class="token number">0</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        maxid <span class="token operator">=</span> <span class="token number">0</span>        maxr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>ACTION<span class="token punctuation">)</span><span class="token punctuation">:</span>            action0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>ACTION<span class="token punctuation">)</span>            action0<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            ttt <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>tetris<span class="token punctuation">)</span>            nextObservation<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> terminal <span class="token operator">=</span> ttt<span class="token punctuation">.</span>combine_step<span class="token punctuation">(</span>action0<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> reward <span class="token operator">></span> maxr<span class="token punctuation">:</span>                maxr <span class="token operator">=</span> reward                maxid <span class="token operator">=</span> j        action0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>ACTION<span class="token punctuation">)</span>        action0<span class="token punctuation">[</span>maxid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        nextObservation<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> terminal <span class="token operator">=</span> tetris<span class="token punctuation">.</span>combine_step<span class="token punctuation">(</span>action0<span class="token punctuation">)</span>        <span class="token keyword">if</span> terminal<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"得分为"</span><span class="token punctuation">,</span>lscore<span class="token punctuation">)</span>        lscore<span class="token operator">=</span>tetris<span class="token punctuation">.</span>score        lobservation<span class="token operator">=</span>nextObservation        <span class="token comment" spellcheck="true"># print("maxaction=%s,reward=%s"%(maxid, reward))</span>        i <span class="token operator">+=</span> <span class="token number">1</span>playGame<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="最后结果"><a href="#最后结果" class="headerlink" title="最后结果"></a>最后结果</h2><p>用这个评价函数得到的结果表现异常的卓越。看下面的图就知道了分数。<br><img src="/images/Snipaste_2020-09-08_16-46-45.jpg" alt="得分"><br>我也不知道他能拿多少，只知道它玩的停不下来。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 俄罗斯方块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用强化学习训练AI玩俄罗斯方块</title>
      <link href="/2020/09/01/%E7%94%A8%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%8E%A9%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"/>
      <url>/2020/09/01/%E7%94%A8%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E7%8E%A9%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>暑假空闲时间比较多，就来试试炼丹。这个AI我尝试设计了好多次，总是会有这样那样的问题，现在总算有了相对稳定的效果。</p></blockquote><h2 id="动作的设计"><a href="#动作的设计" class="headerlink" title="动作的设计"></a>动作的设计</h2><p>俄罗斯方块最原始的动作是五个，分别是不动，下落，旋转，左移，右移。为了能够使得他直击目标，我们对动作进行了组合，即从新方块出来到彻底落下为一个动作。俄罗斯方块有10列，那么方块可以从0-9列下降，为了方便设计动作,我设置了冗余，也就是说把所有方块做相同的处理，即可以不动，或者向左五次，向右五次，共11个平移动作。还有一层就是旋转动作，可以旋转0-3次。这样一组合最终的动作空间共有44个动作。</p><h2 id="奖励函数的设计"><a href="#奖励函数的设计" class="headerlink" title="奖励函数的设计"></a>奖励函数的设计</h2><p>对于奖励函数，我这边按照自己的想法设计了一下。主要基于以下几个指标。</p><ul><li>方块落下后方块最高的高度</li><li>方块落下后消除的行数</li><li>方块落下后有多少个空洞</li><li>方块落下后的不平整度(具体而言是指列高度差值的绝对值之和)</li></ul><p>我们直接取消除行数命名为L。针对高度，空洞，不平整度，我们对动作的评分需要消除前置影响，即前面积累的差的局面对这个动作的评分无影响(或者说影响较小)，所以采用差值，即当前高度减去前一局面的高度命名为H，当前空洞减去前一局面的空洞数做D，当前局面不平整度减去前一局面不平整度做B。<br>经过精心的设计(玄学调参)，我选择了以下的参数作为权值。</p><table><thead><tr><th>影响因子</th><th>权值W</th></tr></thead><tbody><tr><td>H</td><td>30</td></tr><tr><td>L</td><td>50</td></tr><tr><td>D</td><td>8</td></tr><tr><td>B</td><td>2</td></tr></tbody></table><h2 id="Double-DQN的设计"><a href="#Double-DQN的设计" class="headerlink" title="Double DQN的设计"></a>Double DQN的设计</h2><h3 id="网络模块"><a href="#网络模块" class="headerlink" title="网络模块"></a>网络模块</h3><p>这边采用了深度神经网络。输入层为216个01像素，其中10X20的像素表示当前的局面，4X4个像素表示下一个方块。最终通过网络输出44个动作的Q值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>dygraph <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> Pool2D<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> BatchNorm<span class="token keyword">class</span> <span class="token class-name">QNetworks</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name_scope<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>QNetworks<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name_scope<span class="token punctuation">)</span>        name_scope <span class="token operator">=</span> self<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1<span class="token operator">=</span>Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">216</span><span class="token punctuation">,</span>output_dim<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2<span class="token operator">=</span>Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>output_dim<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3<span class="token operator">=</span>Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">2048</span><span class="token punctuation">,</span>output_dim<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>act<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc4<span class="token operator">=</span>Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span>output_dim<span class="token operator">=</span>num_classes<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 网络的前向计算过程</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dropout_prob <span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x<span class="token operator">=</span>self<span class="token punctuation">.</span>fc4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre><h3 id="训练模块"><a href="#训练模块" class="headerlink" title="训练模块"></a>训练模块</h3><p>这边衰减设置为0.98,EPSILON从1变化到0.01期间迭代1500000次。作为Double DQN TargetNetWork替换为1000迭代替换一次。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> collections <span class="token keyword">import</span> deque<span class="token keyword">import</span> time<span class="token keyword">from</span> visualdl <span class="token keyword">import</span> LogWriter<span class="token keyword">class</span> <span class="token class-name">BrainDQN</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Hyper Parameters:</span>    ACTION <span class="token operator">=</span> <span class="token number">44</span>    FRAME_PER_ACTION <span class="token operator">=</span> <span class="token number">1</span>    GAMMA <span class="token operator">=</span> <span class="token number">0.98</span> <span class="token comment" spellcheck="true"># decay rate of past observations</span>    OBSERVE <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true"># timesteps to observe before training</span>    EXPLORE <span class="token operator">=</span> <span class="token number">1500000</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true"># frames over which to anneal epsilon</span>    FINAL_EPSILON <span class="token operator">=</span> <span class="token number">0.01</span> <span class="token comment" spellcheck="true"># final value of epsilon</span>    INITIAL_EPSILON <span class="token operator">=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#starting value of epsilon</span>    REPLAY_MEMORY <span class="token operator">=</span> <span class="token number">50000</span> <span class="token comment" spellcheck="true"># number of previous transitions to remember</span>    BATCH_SIZE <span class="token operator">=</span> <span class="token number">128</span> <span class="token comment" spellcheck="true"># size of minibatch</span>    REPLACE_TARGET_FREQ <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># init replay memory</span>        self<span class="token punctuation">.</span>replayMemory <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># init Q network</span>        self<span class="token punctuation">.</span>createTQNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>createQNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># init some parameters</span>        self<span class="token punctuation">.</span>timeStep <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>updateTQNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>writer<span class="token operator">=</span>LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span><span class="token string">'log/train_loss'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> self<span class="token punctuation">.</span>INITIAL_EPSILON        self<span class="token punctuation">.</span>opt <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>Momentum<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> parameter_list<span class="token operator">=</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#首次运行请注释下面两行</span>        <span class="token comment" spellcheck="true"># model_dict, _ = fluid.load_dygraph(self.model.full_name())</span>        <span class="token comment" spellcheck="true"># self.model.load_dict(model_dict)</span>    <span class="token keyword">def</span> <span class="token function">updateTQNetwork</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timeStep <span class="token operator">%</span> self<span class="token punctuation">.</span>REPLACE_TARGET_FREQ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>tmodel<span class="token punctuation">.</span>load_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createTQNetwork</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tmodel<span class="token operator">=</span>QNetworks<span class="token punctuation">(</span><span class="token string">"TQNetwork"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>ACTION<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">createQNetwork</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model<span class="token operator">=</span>QNetworks<span class="token punctuation">(</span><span class="token string">"QNetwork"</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>ACTION<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># model_dict, _ = fluid.load_dygraph(self.model.full_name())</span>        <span class="token comment" spellcheck="true"># self.model.load_dict(model_dict)</span>            <span class="token keyword">def</span> <span class="token function">trainQNetwork</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Step 1: obtain random minibatch from replay memory</span>        minibatch <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>replayMemory<span class="token punctuation">,</span>self<span class="token punctuation">.</span>BATCH_SIZE<span class="token punctuation">)</span>        state_batch <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> minibatch<span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        action_batch <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> minibatch<span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        reward_batch <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> minibatch<span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        nextState_batch <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">for</span> data <span class="token keyword">in</span> minibatch<span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Step 2: calculate y</span>        y_batch <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tmodel<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        QValue_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>nextState_batch<span class="token punctuation">)</span>        max_action_next <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>QValue_batch<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        TQValue_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>tmodel<span class="token punctuation">(</span>nextState_batch<span class="token punctuation">)</span>        TQValue_batch_numpy<span class="token operator">=</span>TQValue_batch<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        reward_batch_numpy<span class="token operator">=</span>reward_batch<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>            terminal <span class="token operator">=</span> minibatch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> terminal<span class="token punctuation">:</span>                y_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reward_batch_numpy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                target_Q_value <span class="token operator">=</span> TQValue_batch_numpy<span class="token punctuation">[</span>i<span class="token punctuation">,</span> max_action_next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>                y_batch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reward_batch_numpy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>GAMMA <span class="token operator">*</span> target_Q_value<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print("start train")</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        y_batch <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_batch<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("predict")</span>        QValue<span class="token operator">=</span>self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>state_batch<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("Qaction")</span>        Q_action<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reduce_sum<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>elementwise_mul<span class="token punctuation">(</span>QValue<span class="token punctuation">,</span>action_batch<span class="token punctuation">)</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("cost")</span>        cost<span class="token operator">=</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_batch<span class="token operator">-</span>Q_action<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("backward")</span>        cost<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("opt")</span>        self<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("clear")</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("update")</span>        self<span class="token punctuation">.</span>updateTQNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print("start log")</span>        <span class="token comment" spellcheck="true"># save network every 100000 iteration</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timeStep <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            fluid<span class="token punctuation">.</span>save_dygraph<span class="token punctuation">(</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            fluid<span class="token punctuation">.</span>save_dygraph<span class="token punctuation">(</span>self<span class="token punctuation">.</span>tmodel<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>tmodel<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">'cost'</span><span class="token punctuation">,</span> step<span class="token operator">=</span>self<span class="token punctuation">.</span>timeStep<span class="token punctuation">,</span> value<span class="token operator">=</span>cost<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setPerception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>nextObservation<span class="token punctuation">,</span>action<span class="token punctuation">,</span>reward<span class="token punctuation">,</span>terminal<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#print(nextObservation.shape)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"/ REWARD"</span><span class="token punctuation">,</span> reward<span class="token punctuation">)</span>        newState <span class="token operator">=</span>nextObservation        self<span class="token punctuation">.</span>replayMemory<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>currentState<span class="token punctuation">,</span>action<span class="token punctuation">,</span>reward<span class="token punctuation">,</span>newState<span class="token punctuation">,</span>terminal<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>replayMemory<span class="token punctuation">)</span> <span class="token operator">></span> self<span class="token punctuation">.</span>REPLAY_MEMORY<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>replayMemory<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timeStep <span class="token operator">></span> self<span class="token punctuation">.</span>OBSERVE<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Train the network</span>            self<span class="token punctuation">.</span>trainQNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>currentState <span class="token operator">=</span> newState        self<span class="token punctuation">.</span>timeStep <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">getAction</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        QValue <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>currentState<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(type(QValue))</span>        <span class="token comment" spellcheck="true">#time.sleep(0.05)</span>        action <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ACTION<span class="token punctuation">)</span>        action_index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>timeStep <span class="token operator">%</span> self<span class="token punctuation">.</span>FRAME_PER_ACTION <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>epsilon<span class="token punctuation">:</span>                action_index <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ACTION<span class="token punctuation">)</span>                action<span class="token punctuation">[</span>action_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                action_index <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>QValue<span class="token punctuation">)</span>                action<span class="token punctuation">[</span>action_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># do nothing</span>        <span class="token comment" spellcheck="true"># change episilon</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>epsilon <span class="token operator">></span> self<span class="token punctuation">.</span>FINAL_EPSILON <span class="token operator">and</span> self<span class="token punctuation">.</span>timeStep <span class="token operator">></span> self<span class="token punctuation">.</span>OBSERVE<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>epsilon <span class="token operator">-=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>INITIAL_EPSILON <span class="token operator">-</span> self<span class="token punctuation">.</span>FINAL_EPSILON<span class="token punctuation">)</span><span class="token operator">/</span>self<span class="token punctuation">.</span>EXPLORE        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"TIMESTEP"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>timeStep<span class="token punctuation">,</span> \            <span class="token string">"/ EPSILON"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>epsilon<span class="token punctuation">,</span> <span class="token string">"/ ACTION"</span><span class="token punctuation">,</span> action_index<span class="token punctuation">,</span> \            <span class="token string">"/ Q_MAX %e"</span> <span class="token operator">%</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>QValue<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">setInitState</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>observation<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>currentState <span class="token operator">=</span> observation</code></pre><h2 id="运行调用模块"><a href="#运行调用模块" class="headerlink" title="运行调用模块"></a>运行调用模块</h2><p>代码在下面不多说了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"game/"</span><span class="token punctuation">)</span><span class="token keyword">import</span> tetris_fun_reward <span class="token keyword">as</span> game<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># preprocess raw image to 100*50 gray image</span><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>observation<span class="token punctuation">)</span><span class="token punctuation">:</span>    board <span class="token operator">=</span> observation<span class="token punctuation">[</span><span class="token number">220</span><span class="token punctuation">:</span><span class="token number">420</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">:</span><span class="token number">475</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    nextp <span class="token operator">=</span> observation<span class="token punctuation">[</span><span class="token number">520</span><span class="token punctuation">:</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    xt1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    xt2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>nextp<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>    xt1 <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>xt1 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    xt2 <span class="token operator">=</span> np<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>xt2 <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    xt <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>xt1<span class="token punctuation">,</span> xt2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>xt<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Step 1: init BrainDQN</span>    brain <span class="token operator">=</span> BrainDQN<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Step 2: init Flappy Bird Game</span>    tetris <span class="token operator">=</span> game<span class="token punctuation">.</span>GameState<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Step 3: play game</span>    <span class="token comment" spellcheck="true"># Step 3.1: obtain init state</span>    action0 <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>brain<span class="token punctuation">.</span>ACTION<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># do nothing'</span>    action0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    observation0<span class="token punctuation">,</span> reward0<span class="token punctuation">,</span> terminal <span class="token operator">=</span> tetris<span class="token punctuation">.</span>combine_step<span class="token punctuation">(</span>action0<span class="token punctuation">)</span>    observation0 <span class="token operator">=</span> preprocess<span class="token punctuation">(</span>observation0<span class="token punctuation">)</span>    brain<span class="token punctuation">.</span>setInitState<span class="token punctuation">(</span>observation0<span class="token punctuation">)</span>    i<span class="token operator">=</span><span class="token number">0</span>    <span class="token comment" spellcheck="true"># Step 3.2: run the game</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> brain<span class="token punctuation">.</span>EXPLORE<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>        action <span class="token operator">=</span> brain<span class="token punctuation">.</span>getAction<span class="token punctuation">(</span><span class="token punctuation">)</span>        nextObservation<span class="token punctuation">,</span>reward<span class="token punctuation">,</span>terminal <span class="token operator">=</span> tetris<span class="token punctuation">.</span>combine_step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>        nextObservation <span class="token operator">=</span> preprocess<span class="token punctuation">(</span>nextObservation<span class="token punctuation">)</span>        brain<span class="token punctuation">.</span>setPerception<span class="token punctuation">(</span>nextObservation<span class="token punctuation">,</span>action<span class="token punctuation">,</span>reward<span class="token punctuation">,</span>terminal<span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    playGame<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h2><p>跑了几个小时得分的分布如下图。<br><img src="/images/score.png" alt="得分分布图"><br>可以看出分数都分布在1000以上，偶尔突破1500算是有不错的效果了。<br>下面是在本机跑俄罗斯方块AI的效果图。<br><img src="/images/Snipaste_2020-09-03_00-21-54.jpg" alt="运行图"><br>可以看出这边对于空洞的重视程度还不是特别足，需要更好的设计奖励函数。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>发现了一个bug,游戏内部的设定问题，导致组合后的动作有些区域落不到方块，修复了bug之后重新训练得分变得很好。<br><img src="/images/score20200907.png" alt="得分图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 俄罗斯方块 </tag>
            
            <tag> 强化学习 </tag>
            
            <tag> DDQN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用paddlepaddle实现猫狗分类</title>
      <link href="/2020/08/17/%E5%88%A9%E7%94%A8paddlepaddle%E5%AE%9E%E7%8E%B0%E7%8C%AB%E7%8B%97%E5%88%86%E7%B1%BB/"/>
      <url>/2020/08/17/%E5%88%A9%E7%94%A8paddlepaddle%E5%AE%9E%E7%8E%B0%E7%8C%AB%E7%8B%97%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为百度的AIStudio平台提供了免费的GPU算力,而且帮我配好了运行环境，只不过需要使用paddlepaddle这个框架，我就打算顺便在学习paddlepaddle的同时完成lintcode上面的刷题任务。</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.lintcode.com/ai/cats-and-dogs/overview" target="_blank" rel="noopener external nofollow noreferrer">题目链接</a><br><br><br>给出一张猫或狗的图片，识别出这是猫还是狗。</p><p>这种识别具有很重要的意义，比如：</p><p>Web服务为了进行保护，会防止一些计算机进行恶意访问或信息爬取，进而设立一些验证问题，这些验证问题对于人来说很容易做，但是对于计算机这很困难。这样的方法称为CAPTCHA（完全自动公开的图灵测试）或HIP（人类交互证明）。 HIP有很多用处，例如减少垃圾邮件，防止暴力破解密码等。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>很明显是一个简单的二分类任务，但是如果要分的好还是需要有一定的小技巧。这里主要用到了经典的VGG19模型。<br>“VGG”代表了牛津大学的Oxford Visual Geometry Group。VGG模型采用模块化的方式将网络堆叠到了19层以增强性能。(图片来自网络)<br><img src="https://ai-studio-static-online.cdn.bcebos.com/ece5dcb3515a4a06885b77b14116c40f9987ac697d5b40659212278dcef977da" alt="VGG19"></p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>首先把图片读进来，然后用cv2将图片统一尺寸到300X300,并且用pickle重新打包存储方便后面读取使用。如果是cat也就是c开头的文件就打标签0，否则就是狗，打标签1。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">picReader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"work/train"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        fullpath<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>name<span class="token punctuation">)</span>        img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fullpath<span class="token punctuation">)</span>        img<span class="token operator">=</span>preprocess<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>        <span class="token keyword">assert</span> img<span class="token punctuation">.</span>shape<span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        label<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">if</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span><span class="token punctuation">:</span>            label<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">yield</span> img<span class="token punctuation">,</span>labells<span class="token operator">=</span>list<span class="token punctuation">(</span>picReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">"traindata"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span>arr<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>f<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="数据分批读取模块编写"><a href="#数据分批读取模块编写" class="headerlink" title="数据分批读取模块编写"></a>数据分批读取模块编写</h2><p>三个模块，分别是训练数据，测试数据，以及全部数据。训练数据测试数据是用来看模型的拟合状况的。全部数据是为了在确认模型无误之后拿所有的有标签数据来训练模型以此提高模型的分类能力。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">trainDataReader</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">"traindata"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    arr<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span>label<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">yield</span> img<span class="token punctuation">,</span>label<span class="token keyword">def</span> <span class="token function">testDataReader</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">"traindata"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    arr<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span>label<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">yield</span> img<span class="token punctuation">,</span>label<span class="token keyword">def</span> <span class="token function">allDataReader</span><span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">"traindata"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>    arr<span class="token operator">=</span>pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img<span class="token punctuation">,</span>label<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">yield</span> img<span class="token punctuation">,</span>label</code></pre><h2 id="VggNet定义"><a href="#VggNet定义" class="headerlink" title="VggNet定义"></a>VggNet定义</h2><p>这里加了BN层以此来抑制模型的过拟合。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> visualdl <span class="token keyword">import</span> LogWriter<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">import</span> shutil<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pickle<span class="token keyword">import</span> paddle<span class="token comment" spellcheck="true"># VGG加BN层抑制过拟合</span><span class="token keyword">class</span> <span class="token class-name">VGG_BN</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name_scope<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> layer<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>VGG_BN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name_scope<span class="token punctuation">)</span>        name_scope <span class="token operator">=</span> self<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer <span class="token operator">=</span> layer        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>bn64 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn128 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn256 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn512 <span class="token operator">=</span> BatchNorm<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv4 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv5 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv6 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv7 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv8 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv9 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv10 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv11 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv12 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv13 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv14 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv15 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv16 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">512</span> <span class="token operator">*</span><span class="token number">9</span>  <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span>num_classes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 网络的前向计算过程</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn64(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn64(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn128(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn128<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv5<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn256(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv6<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn256(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv7<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn256(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">19</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv8<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn256(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv9<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn512<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv10<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv11<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">19</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv12<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv13<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv14<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv15<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>layer <span class="token operator">>=</span> <span class="token number">19</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv16<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># x = self.bn512(x)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>         x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span> <span class="token operator">*</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span>dropout_prob<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre><h2 id="进行训练"><a href="#进行训练" class="headerlink" title="进行训练"></a>进行训练</h2><p>这里的迭代轮数选了30，batch_size用了50需要比较好的GPU来跑才能快一点。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>epoch_num<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> model<span class="token punctuation">,</span> log_dir_name<span class="token operator">=</span><span class="token string">'log'</span><span class="token punctuation">,</span> lr_decay<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_loader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>trainDataReader<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>    valid_loader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>trainDataReader<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">)</span>    log_dir <span class="token operator">=</span> <span class="token string">'/home/aistudio/'</span><span class="token operator">+</span>log_dir_name<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'^.*_'</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span>    train_loss_wrt <span class="token operator">=</span> LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span>log_dir<span class="token operator">+</span><span class="token string">'/train_loss'</span><span class="token punctuation">)</span>    train_acc_wrt <span class="token operator">=</span> LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span>log_dir<span class="token operator">+</span><span class="token string">'/train_acc'</span><span class="token punctuation">)</span>    val_loss_wrt <span class="token operator">=</span> LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span>log_dir<span class="token operator">+</span><span class="token string">'/val_loss'</span><span class="token punctuation">)</span>    val_acc_wrt <span class="token operator">=</span> LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span>log_dir<span class="token operator">+</span><span class="token string">'/val_acc'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> lr_decay <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>        opt <span class="token operator">=</span> fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>Momentum<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> parameter_list<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># opt=fluid.optimizer.Momentum(learning_rate=fluid.dygraph.ExponentialDecay(</span>        <span class="token comment" spellcheck="true">#         learning_rate=0.002,</span>        <span class="token comment" spellcheck="true">#         decay_steps=1000,</span>        <span class="token comment" spellcheck="true">#         decay_rate=0.1,</span>        <span class="token comment" spellcheck="true">#         staircase=True), momentum=0.9 , parameter_list=model.parameters())</span>        opt<span class="token operator">=</span>fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>ExponentialDecay<span class="token punctuation">(</span>                learning_rate<span class="token operator">=</span><span class="token number">0.002</span><span class="token punctuation">,</span>                decay_steps<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                decay_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>                staircase<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameter_list<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># model_dict, _ = fluid.load_dygraph(model.full_name())</span>    <span class="token comment" spellcheck="true"># model.load_dict(model_dict)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epoch_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        avg_loss_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            xd <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            yd <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            img <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>xd<span class="token punctuation">)</span>            label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>yd<span class="token punctuation">)</span>            logits <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            pred <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>logits<span class="token punctuation">)</span>            loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax_with_cross_entropy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            avg_loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>            acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>input<span class="token operator">=</span>pred<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch:'</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">', batch:'</span><span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> <span class="token string">', train loss:'</span><span class="token punctuation">,</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">', train acc:'</span><span class="token punctuation">,</span> acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        avg_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_loss<span class="token punctuation">)</span>            model<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># break</span>        model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>valid_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            xd <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            yd <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            img <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>xd<span class="token punctuation">)</span>            label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>yd<span class="token punctuation">)</span>            logits <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            pred <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>logits<span class="token punctuation">)</span>            loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax_with_cross_entropy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            avg_loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>            acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>input<span class="token operator">=</span>pred<span class="token punctuation">,</span> label<span class="token operator">=</span>label<span class="token punctuation">)</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+=</span> acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            avg_loss_acc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'validation loss:'</span><span class="token punctuation">,</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">', validation acc:'</span><span class="token punctuation">,</span> acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        fluid<span class="token punctuation">.</span>save_dygraph<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        avg_loss_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        avg_loss_acc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">/</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>        avg_loss_acc <span class="token operator">=</span> np<span class="token punctuation">.</span>around<span class="token punctuation">(</span>avg_loss_acc<span class="token punctuation">,</span> decimals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'epoch:'</span><span class="token punctuation">,</span> epoch<span class="token punctuation">,</span> <span class="token string">'train loss:'</span><span class="token punctuation">,</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">', train acc:'</span><span class="token punctuation">,</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">', validation loss:'</span><span class="token punctuation">,</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">', validation acc:'</span><span class="token punctuation">,</span> avg_loss_acc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        train_loss_wrt<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">'train_loss'</span><span class="token punctuation">,</span> step<span class="token operator">=</span>epoch<span class="token punctuation">,</span> value<span class="token operator">=</span>avg_loss_acc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        train_acc_wrt<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">'train_acc'</span><span class="token punctuation">,</span> step<span class="token operator">=</span>epoch<span class="token punctuation">,</span> value<span class="token operator">=</span>avg_loss_acc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        val_loss_wrt<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">'val_loss'</span><span class="token punctuation">,</span> step<span class="token operator">=</span>epoch<span class="token punctuation">,</span> value<span class="token operator">=</span>avg_loss_acc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        val_acc_wrt<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span> step<span class="token operator">=</span>epoch<span class="token punctuation">,</span> value<span class="token operator">=</span>avg_loss_acc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                avg_loss_acc <span class="token operator">=</span> <span class="token number">0.0</span><span class="token comment" spellcheck="true"># 训练</span><span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> VGG_BN<span class="token punctuation">(</span><span class="token string">"VGG19_BN"</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> layer<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span>    train<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span></code></pre><h2 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h2><p>预测完之后把预测结果的csv保存到本地。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">preprocess</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">evalReader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"work/test"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        fullpath<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>name<span class="token punctuation">)</span>        img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>fullpath<span class="token punctuation">)</span>        img<span class="token operator">=</span>preprocess<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span>        <span class="token keyword">assert</span> img<span class="token punctuation">.</span>shape<span class="token operator">==</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> img<span class="token punctuation">,</span>name<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start predict ... '</span><span class="token punctuation">)</span>    model_dict<span class="token punctuation">,</span> _ <span class="token operator">=</span> fluid<span class="token punctuation">.</span>load_dygraph<span class="token punctuation">(</span>model<span class="token punctuation">.</span>full_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item<span class="token punctuation">,</span>name <span class="token keyword">in</span> evalReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        item<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>item<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># item2=np.array(item*255,dtype='int32').reshape(28,28)</span>        <span class="token comment" spellcheck="true"># plt.imshow(item[0])</span>        <span class="token comment" spellcheck="true"># plt.show()</span>        img<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        result <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(result)</span>        <span class="token comment" spellcheck="true"># print("预测结果为",np.argmax(result.numpy()[0]))</span>        df<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>result<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># time.sleep(0.5)</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>df<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">,</span><span class="token string">"label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>to_numeric<span class="token punctuation">)</span>    df<span class="token operator">=</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"result.csv"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建模型</span>    <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> VGG_BN<span class="token punctuation">(</span><span class="token string">"VGG19_BN"</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> layer<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span>        predict<span class="token punctuation">(</span>model<span class="token punctuation">)</span></code></pre><h2 id="查看预测结果"><a href="#查看预测结果" class="headerlink" title="查看预测结果"></a>查看预测结果</h2><p> 自己也人工看了看预测结果表示还不错，就传到lintcode上去看看结果。最终的准确率大概在93%的样子。<br><img src="/images/catdogP2.jpg"><br><img src="/images/lintcodeP2.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> paddlepaddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用paddlepaddle手写数字识别</title>
      <link href="/2020/08/15/%E5%88%A9%E7%94%A8paddlepaddle%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2020/08/15/%E5%88%A9%E7%94%A8paddlepaddle%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为百度的AIStudio平台提供了免费的GPU算力,而且帮我配好了运行环境，只不过需要使用paddlepaddle这个框架，我就打算顺便在学习paddlepaddle的同时完成lintcode上面的刷题任务。</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://www.lintcode.com/ai/digit-recognition/overview" target="_blank" rel="noopener external nofollow noreferrer">题目链接</a><br><br><br>MNIST是计算机视觉领域的“hello world”数据集。 自1999年发布以来，这种手写图像的经典数据集已经成为基准分类算法的基础。 随着新的机器学习技术的出现，MNIST仍然是研究人员和学习者的可靠资源。</p><p>这个题目，您的目标是正确识别数以万计的手写图像数据集中的数字。<br>每一张图片，图片里面写了一个数字可能是0-9，然后需要设计算法判断出这个数字是0-9中哪一个数字。 我们鼓励您尝试不同的算法，以便第一手掌握哪些方法或者技术可行。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>对于手写数字识别，简单的网络即可完成这个任务，但是最让人难忘的是<strong>LeNet</strong>在这上面的表现，我这次用的就是LeNet看看最终究竟有多好的效果,优化器采用<strong>Aadm</strong>。<br><br><br>LeNet是最早的卷积神经网络之一。1998年，Yan LeCun第一次将LeNet卷积神经网络应用到图像分类上，在手写数字识别任务中取得了巨大成功。LeNet通过连续使用卷积和池化层的组合提取图像特征，其架构如 <strong>图1</strong> 所示，这里展示的是作者论文中的LeNet-5模型：<br><br></br></p><center><img src="https://ai-studio-static-online.cdn.bcebos.com/33bbff96924e4b36b613f0c1c36a89dfb72e3b56b3be464dbbce22f7ce575b0d" width = "800"></center><center><br>图1：LeNet模型网络结构示意图</br></center><ul><li><p>第一模块：包含5×5的6通道卷积和2×2的池化。卷积提取图像中包含的特征模式（激活函数使用sigmoid），图像尺寸从32减小到28。经过池化层可以降低输出特征图对空间位置的敏感性，图像尺寸减到14。</p></li><li><p>第二模块：和第一模块尺寸相同，通道数由6增加为16。卷积操作使图像尺寸减小到10，经过池化后变成5。</p></li><li><p>第三模块：包含5×5的120通道卷积。卷积之后的图像尺寸减小到1，但是通道数增加为120。将经过第3次卷积提取到的特征图输入到全连接层。第一个全连接层的输出神经元的个数是64，第二个全连接层的输出神经元个数是分类标签的类别数，对于手写数字识别其大小是10。然后使用Softmax激活函数即可计算出每个类别的预测概率。</p></li></ul><h2 id="导入需要的包"><a href="#导入需要的包" class="headerlink" title="导入需要的包"></a>导入需要的包</h2><p>主要是paddlepaddle、numpy等等科学计算的包，plt主要用于测试的时候显示图像。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> paddle<span class="token keyword">import</span> paddle<span class="token punctuation">.</span>fluid <span class="token keyword">as</span> fluid<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>fluid<span class="token punctuation">.</span>dygraph <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span> Pool2D<span class="token punctuation">,</span> Linear<span class="token punctuation">,</span> BatchNorm<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</code></pre><h2 id="数据读取模块的编写"><a href="#数据读取模块的编写" class="headerlink" title="数据读取模块的编写"></a>数据读取模块的编写</h2><p>读取模块分为4个函数，一个是读训练数据，一个是读测试数据，一个是读全部有标签的数据，一个是读待预测的数据。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#数据读取模块</span><span class="token comment" spellcheck="true">#训练数据</span><span class="token keyword">def</span> <span class="token function">trainDatareader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'ml_problems_1_train.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    arr<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    x<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">255.0</span>    y<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#测试数据</span><span class="token keyword">def</span> <span class="token function">testDatareader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'ml_problems_1_train.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    arr<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    x<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">255.0</span>    y<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#全部数据</span><span class="token keyword">def</span> <span class="token function">dataReader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">'ml_problems_1_train.csv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    arr<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    x<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    x<span class="token operator">=</span>x<span class="token operator">/</span><span class="token number">255.0</span>    y<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#待预测数据</span><span class="token keyword">def</span> <span class="token function">evalReader</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"ml_problems_1_test.csv"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    arr<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">)</span>    arr<span class="token operator">=</span>arr<span class="token operator">/</span><span class="token number">255.0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></code></pre><h2 id="网络结构模块"><a href="#网络结构模块" class="headerlink" title="网络结构模块"></a>网络结构模块</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义 LeNet 网络结构</span><span class="token keyword">class</span> <span class="token class-name">LeNet</span><span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>Layer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建卷积和池化层块，每个卷积层使用relu激活函数，后面跟着一个2x2的池化</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> filter_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool1 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> filter_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool2 <span class="token operator">=</span> Pool2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pool_stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> pool_type<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建第3个卷积层</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>num_channels<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> num_filters<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> filter_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建全连接层，第一个全连接层的输出神经元个数为64， 第二个全连接层输出神经元个数为分类标签的类别数</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> act<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> Linear<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> output_dim<span class="token operator">=</span>num_classes<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 网络的前向计算过程</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre><h2 id="训练模块"><a href="#训练模块" class="headerlink" title="训练模块"></a>训练模块</h2><p>一开始的batchsize是10后来改成50效果有所改善，而且小网络训练速度也比较快，可以多调几次参数看看。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># LeNet 识别手写数字 训练模块</span><span class="token comment" spellcheck="true"># 定义训练过程</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start training ... '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># model_dict, _ = fluid.load_dygraph("LeNet")</span>    <span class="token comment" spellcheck="true"># model.load_dict(model_dict)</span>    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    epoch_num <span class="token operator">=</span><span class="token number">30</span>    opt <span class="token operator">=</span>fluid<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>AdamOptimizer<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">,</span> parameter_list<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用Paddle自带的数据读取器</span>    train_loader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>trainDatareader<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    valid_loader <span class="token operator">=</span> paddle<span class="token punctuation">.</span>batch<span class="token punctuation">(</span>testDatareader<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epoch_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 调整输入数据形状和类型</span>            x_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#plt.imshow(x_data[0][0])</span>            <span class="token comment" spellcheck="true">#plt.show()</span>            y_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(y_data[0][0].shape)</span>            <span class="token comment" spellcheck="true"># 将numpy.ndarray转化成Tensor</span>            img <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>            label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>y_data<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算模型输出</span>            <span class="token comment" spellcheck="true">#print(img)</span>            logits <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(logits)</span>            <span class="token comment" spellcheck="true">#print(logits)</span>            <span class="token comment" spellcheck="true"># 计算损失函数</span>            loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax_with_cross_entropy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            avg_loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>            <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">200</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch: {}, batch_id: {}, loss is: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            avg_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            opt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>avg_loss<span class="token punctuation">)</span>            model<span class="token punctuation">.</span>clear_gradients<span class="token punctuation">(</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        accuracies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        losses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>valid_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 调整输入数据形状和类型</span>            x_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>            y_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将numpy.ndarray转化成Tensor</span>            img <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>            label <span class="token operator">=</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>y_data<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算模型输出</span>            logits <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                        pred <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>logits<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 计算损失函数</span>            loss <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>softmax_with_cross_entropy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(pred)</span>            acc <span class="token operator">=</span> fluid<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> label<span class="token punctuation">)</span>            accuracies<span class="token punctuation">.</span>append<span class="token punctuation">(</span>acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            losses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[validation] accuracy/loss: {}/{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>accuracies<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>losses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存模型参数</span>        fluid<span class="token punctuation">.</span>save_dygraph<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'LeNet'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建模型 用GPU训练  没有配置好GPU环境的话把fluid.CUDAPlace(0)删掉就行</span>    <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span>fluid<span class="token punctuation">.</span>CUDAPlace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>LeNet<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#启动训练过程</span>        train<span class="token punctuation">(</span>model<span class="token punctuation">)</span></code></pre><h2 id="预测模块"><a href="#预测模块" class="headerlink" title="预测模块"></a>预测模块</h2><p>预测并且将预测结果保存到csv文件中，到时候用excel打开删除第一列就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start predict ... '</span><span class="token punctuation">)</span>    model_dict<span class="token punctuation">,</span> _ <span class="token operator">=</span> fluid<span class="token punctuation">.</span>load_dygraph<span class="token punctuation">(</span><span class="token string">"LeNet"</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>load_dict<span class="token punctuation">(</span>model_dict<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    i<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> evalReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        item<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>item<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'float32'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># item2=np.array(item*255,dtype='int32').reshape(28,28)</span>        <span class="token comment" spellcheck="true"># plt.imshow(item2)</span>        <span class="token comment" spellcheck="true"># plt.show()</span>        img<span class="token operator">=</span>fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>to_variable<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        result <span class="token operator">=</span> model<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(result)</span>        <span class="token comment" spellcheck="true"># print("预测结果为",np.argmax(result.numpy()[0]))</span>        df<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>result<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># time.sleep(0.5)</span>    df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>df<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"ImageId"</span><span class="token punctuation">,</span><span class="token string">"Label"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"results1.csv"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建模型</span>    <span class="token keyword">with</span> fluid<span class="token punctuation">.</span>dygraph<span class="token punctuation">.</span>guard<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> LeNet<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#启动预测</span>        predict<span class="token punctuation">(</span>model<span class="token punctuation">)</span></code></pre><h2 id="看看成果"><a href="#看看成果" class="headerlink" title="看看成果"></a>看看成果</h2><p>最终的准确率大概在97%左右，期间也尝试了很多其他的更先进的网络，譬如AlexNet但是大网络对于这种小尺度图片的效果也不一定会好，合适最好。<br><br></br></p><center><img src="/images/lintcodeP1.jpg" width = "800"></center><center><br>图2：预测准确率</br></center>]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> paddlepaddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络期末复习</title>
      <link href="/2020/01/05/newwork/"/>
      <url>/2020/01/05/newwork/</url>
      
        <content type="html"><![CDATA[<h1 id="网络及其计算复习"><a href="#网络及其计算复习" class="headerlink" title="网络及其计算复习"></a>网络及其计算复习</h1><hr><p>如有谬误，欢迎指正</p><hr><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="简述分组交换的要点"><a href="#简述分组交换的要点" class="headerlink" title="简述分组交换的要点"></a>简述分组交换的要点</h3><ol><li>报文分组，加首部。</li><li>经路由器储存转发。</li><li>在目的地合并。</li></ol><h3 id="比较电路交换、报文交换和分组交换的主要优缺点"><a href="#比较电路交换、报文交换和分组交换的主要优缺点" class="headerlink" title="比较电路交换、报文交换和分组交换的主要优缺点"></a>比较电路交换、报文交换和分组交换的主要优缺点</h3><p><strong>电路交换</strong>——整个报文的比特流连续地从源点直达终点，好像在一个管道中传送。<br>时延小，但是独占信道，利用率低。<br><strong>报文交换</strong><br>信道利用率相对较高，时延较长。<br><strong>分组交换</strong><br>信道利用率高时延小，总结就是<strong>高效、灵活、迅速、可靠</strong>。<br>缺点是加入了大量控制信息，技术实现复杂。</p><h3 id="网络协议三个要素及其含义"><a href="#网络协议三个要素及其含义" class="headerlink" title="网络协议三个要素及其含义"></a>网络协议三个要素及其含义</h3><ol><li><strong>语法</strong>，即数据与控制信息的结构或格式。</li><li><strong>语义</strong>，即发出何种控制信息，完成何种动作以及做出何种响应。</li><li><strong>同步</strong>，即事件实现顺序的详细说明。</li></ol><h3 id="试解释以下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式"><a href="#试解释以下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式" class="headerlink" title="试解释以下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式"></a>试解释以下名词：协议栈、实体、对等层、协议数据单元、服务访问点、客户、服务器、客户-服务器方式</h3><ol><li>实体(entity) 表示任何可发送或接收信息的硬件或软件进程。<br>协议是控制两个对等实体进行通信的规则的集合。</li><li>客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。客户是服务的请求方，服务器是服务的提供方。客户服务器方式所描述的是进程之间服务和被服务的关系。</li><li>协议栈:指计算机网络体系结构采用分层模型后,每层的主要功能由对等层协议的运行来实现,因而每层可用一些主要协议来表征,几个层次画在一起很像一个栈的结构。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>计算机网络是由<strong>若干结点</strong>和<strong>连接这些节点的链路</strong>组成。</li><li>互联网是指<strong>路由器</strong>把一个个网络连接到一起，形成的网络的网络。</li><li>ISP分为：<strong>主干ISP、地区ISP和本地ISP</strong></li><li>IXP指换联网交换点</li><li>网络边缘部分-主机（端系统）组成-<strong>用户使用</strong>-通信和资源共享</li><li>网络核心部分-路由器组成-<strong>为边缘部分提供服务</strong>-连通性和交换</li><li>互联网之所以能够向用户提供许多服务，就是因为两个特点，<strong>连通性</strong>和<strong>共享</strong>。</li><li>共享指<strong>资源共享</strong>，包括<strong>信息共享、软件共享、硬件共享</strong>。</li><li>客户是服务请求方，服务器是服务提供方。</li><li>对等连接指两台主机在通信时不区分请求方和服务方，P2P。</li><li>交换就是按某种方式动态地分配传输线路的资源。</li><li>网络按作用范围分为：<strong>广域网、城域网、局域网、个人区域网</strong>。</li><li>网络按使用者进行分类：<strong>公用网、专用网</strong>。</li><li>通常速率以$10^3$来划分层次k、m、g等，单位bit/s。</li><li>在表示数据块大小的时候采用$2^{10}$来划分K、M、G等,单位应当注意是B(byte)还是b(bit)。</li><li>吞吐量是指单位时间内通过某个网络的实际数据量。</li><li>总时延=发送时延+传播时延+处理时延+排队时间。</li><li>时延带宽积=传播时延 * 带宽</li><li>$有效数据率=\frac{数据长度}{发送时间+RTT}$</li><li>五层协议体系结构：应用层、运输层（TCP\UDP协议）、网络层（IP协议）、数据链路层、物理层。</li><li>集线器特点。</li></ol><ul><li>使用集线器的以太网逻辑上认识一个总线网，同一时刻只允许一个站发送数据。</li><li>有许多接口。</li><li>工作在物理层，不进行碰撞检测。</li><li>采用专门芯片，进行自适应串音回波抵消。</li></ul><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ol><li>物理层四个特性：<strong>机械特性、电气特性、功能特性、过程特性</strong>。</li><li>通信系统分为：<strong>源系统、传输系统和目的系统</strong>。</li><li>信号分为两大类： 模拟信号（连续），数字信号（离散）。</li><li>从通信的双方信息交互的方式看分为：<strong>单向通信（单工通信）、双向交替通信（半双工通信）、双向同时通信（全双工通信）</strong>。</li><li>来自信源的信号称为<strong>基带信号</strong>。</li><li>经过载波调制后的信号称为<strong>带通信号</strong>，而使用载波的调制称为<strong>带通调制</strong>。</li><li>四种编码方式：不归零制、归零制、曼切斯特编码、差分曼切斯特编码。</li><li>信噪比：信号的平均功率和噪声的平均功率之比。</li><li>$信噪比（dB)=10 log_{10}(S/N)(dB)$</li><li>香农公式指明了信道的极限信息传输速率C。<br>$$ C=Wlog_2(1+S/N) $$</li><li>传输媒体也称传输介质或传输媒体。分为导引型传输媒体和非导引型传输媒体。</li><li>同轴电缆是由内导体铜质芯线、绝缘层、网状编织的外导体屏蔽层和保护塑料外层所所组成。<br><img src="/images/timg.jpg" alt="line"></li><li>光纤通常由非常透明的<strong>石英玻璃拉成细丝</strong>，主要由<strong>纤芯</strong>（高折射率）和<strong>包层</strong>（低折射率）构成双层通信圆柱体。</li><li>可以存在多条不同角度入射的光纤在同一光纤中传输，这种光纤称为<strong>多模光纤</strong>。</li><li>光纤直径减小到只有一个光的波长，不会产生多次反射，<strong>单模光纤</strong>。</li><li>传统微波通信：<strong>地面微波接力通信</strong>和<strong>卫星通信</strong>。</li><li>卫星通信，距离远，通信费用与通信距离无关。传播时延较大。</li><li>最基本的复用技术是<strong>频分复用</strong>（FDM）和<strong>时分复用</strong>（TDM）。</li><li>波分复用WDM就是光的频分复用。</li><li>码分复用CDM,更多的是码分多址CDMA，多用户同一时间同样频带通信。抗干扰能力强，类似白噪声的频谱。（我猜有个计算题，信不信由你）</li></ol><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><ol><li>链路是指从一个结点到相邻结点的物理线路。</li><li>数据链路是由通信协议和软件加到链路上构成的。 <strong>网络适配器</strong>来实现这些协议。</li><li>点对点信道的数据链路层的协议数据单元———帧。</li><li>在互联网中，网络层协议数据单元就是<strong>IP数据报</strong>（简称数据报、分组或包）。</li><li>数据链路层协议的三个基本问题：<strong>封装成帧、透明传输和差错检测</strong>。</li><li>封装成帧就是在一段数据的前后<strong>添加首部（SOH 0x01)和尾部(EOT 0x04)，构成帧</strong>。</li><li>数据中出现SOH或者EOT时应当插入转义字符ESC 0x1B，这种方法称为字节填充或者字符填充。</li><li>转义字符本身也需要转义。</li><li>比特在传输中可能出错，叫比特差错。</li><li>在一段时间内，传输错误的比特占传输比特总数的比率称为<strong>误码率BER</strong>。</li><li>数据链路层广泛使用<strong>循环冗余检验CRC</strong>。（计算题，上书上看详细例题）</li><li>需要注意的CRC是并不保证可靠传输。zongxianw</li><li>传输差错两类，比特差错和没有出现比特差错，却出现了帧丢失、帧重复或帧失序。</li><li>在CRC的基础上增加<strong>帧编号、确认和重传机制</strong>。</li><li>点对点协议PPP是目前使用得最广的数据链路层协议。</li><li>PPP协议的组成。<ul><li>一个将IP数据包封装到串行链路的方法。</li><li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP。</li><li>一套网络控制协议NCP。</li></ul></li><li>零比特填充：只要发现5个连续的1，则立刻填入一个0。</li><li>共享信道技术两种方法。静态划分信道和动态媒体介入控制（随机接入和受控接入）。</li><li>计算机与外界局域网的连接是通过通信适配器进行的，接口版形式的适配器，又称网络接口卡，简称为网卡。</li><li>适配器所实现的功能包含了数据链路层及物理层两个层次的功能。</li><li>CSMA/CD意思是载波监听多点接入/碰撞检测。</li><li>载波监听就是用电子技术检测总线上有没有其他计算机也在发送。也就是检测信道，不管在发送前发送中每个站都必须不停地检测信道。</li><li>碰撞检测也就是边发送边监听，即适配器边发送数据边检测信道上的信号电压变化情况。</li><li>CSMA/CD协议使用时，一个站不可能同时进行发送和接受（但必须边发送边监听信道）。因此该协议不可能全双工，只能半双工。</li><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆、最后到双绞线。</li><li>以太网采用星形拓扑，在星形的中心则增加了一些可靠性非常高的设备，叫做集线器。</li><li>10BASE-T的标准802.3i。10代表10Mbit/s的数据率，BASE表示连接线上的信号是基带信号，T表示双绞线。通信距离较短，<strong>每个站到集线器的距离不超过100m。</strong></li><li>以太网中定义了参数$a=\frac{t}{T_0}$ ，其中t表示端到端时延，$T_0$表示帧的发送时间。$a-&gt;0$时，表示只要一发送碰撞就能检测出来，停止发送。</li><li>硬件地址又称物理地址或MAC地址，<strong>是一种48位的全球地址</strong>。</li><li>适配器有过滤功能，收到一个MAC帧就先用硬件检查MAC帧种的目的地址。</li><li>MAC帧包括三种，<strong>单播帧，广播帧，多播帧</strong>。</li><li>在三个系的以太网互连起来之前，每一个系的10BASE-T以太网式一个独立的碰撞域（冲突域）。</li><li>最初拓展以太网使用网桥，对收到的帧根据其MAC帧的目的地址进行转发和过滤。</li><li>后来是<strong>交换机，工作在数据链路层</strong>。</li><li>虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。</li><li>虚拟局域网只是局域网给用户提供的一种服务。</li><li>虚拟局域网限制接收广播信息的计算机数，<strong>避免因为传播过多广播信息（广播风暴）而引起性能恶化。</strong></li></ol><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>1.虚电路服务与数据报服务的对比。</p><table><thead><tr><th align="center">试试</th><th align="center">虚电路服务</th><th align="center">数据报服务</th></tr></thead><tbody><tr><td align="center">思路</td><td align="center">可靠通信应当由网络来保证</td><td align="center">可靠通讯应当由用户主机来保证</td></tr><tr><td align="center">连接的建立</td><td align="center">必须有</td><td align="center">不需要</td></tr><tr><td align="center">终点地址</td><td align="center">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td align="center">每个分组都有终点的完整地址</td></tr><tr><td align="center">分组的转发</td><td align="center">属于同一条虚电路的分组均按照同一路由进行转发</td><td align="center">每个分组独立选择路由进行转发</td></tr><tr><td align="center">当结点出故障时</td><td align="center">所有通过出故障的结点的虚电路均不能工作</td><td align="center">出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td align="center">分组的顺序</td><td align="center">总是按发送顺序到达终点</td><td align="center">到达终点时不一定按发送顺序</td></tr><tr><td align="center">差错处理和流量控制</td><td align="center">由网络负责，也可以由用户主机负责</td><td align="center">由用户主机负责</td></tr></tbody></table><ol start="2"><li>网际协议IP式TCP/IP体系中两个最主要的协议之一。与IP协议配套使用的还有三个协议，<strong>地址解析协议ARP，网际控制报文协议ICMP，网际组管理协议IGMP。</strong></li><li>网络互连的四种中间设备。<strong>物理层-转发器。数据链路层-网桥或桥接器。网络层 -路由器。网络层以上-网关。</strong></li><li>IP地址的编址三个阶段，<strong>分类的IP地址，子网的划分，构成超网。</strong></li><li>IP地址中的网络号字段和主机号字段。<br><img src="/images/u_3D3447840984_2C2899861555_26fm_3D26_26gp_3D0.jpg" alt="ipsort"></li><li>从层次的的角度看，物理地址是数据链路层和物理层使用的地址，而IP地址是网络层和以上各层所用的地址，是一种逻辑地址。</li><li>ARP协议的用途式为了从网络层使用的IP地址，解析出在数据链路层使用的硬件地址。</li><li>划分子网后在本单位内部就变成了三级IP地址:网络号，子网号和主机号。</li><li>路由表必须包括<strong>目的网络地址，子网掩码，下一跳地址</strong>。</li><li>CIDR无分类编址。<br>= =消除了传统的A类B类C类地址以及划分子网的概念。<br>把网络前缀都相同的连续的IP地址组成一个CIDR地址块。</li><li>路由器结构分为两大部分：<strong>路由选择和分组转发</strong>。</li><li>IPV6把地址从IPV4的32位增大到4倍，即增大到128位。</li><li>IPV6数据报目的地址。单播、多播、任播。</li><li>为了使地址简洁，IPV6采用冒号十六进制记法。</li><li>IPV6地址分类了解一下。</li></ol><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><ol><li>面向<strong>连接的TCP和无连接的UDP</strong>。</li><li>用户数据包协议UDP，传输控制协议TCP。</li><li>常用的熟知端口号。</li></ol><ul><li>FTP-21</li><li>TELNET-23</li><li>SMTP-25</li><li>DNS-53</li><li>TFTP-69</li><li>HTTP-80</li><li>SNMP-161</li><li>SNMP-162(trap)</li><li>HTTPS-443</li></ul><ol start="4"><li>UDP 的主要<strong>特点</strong>是：</li></ol><ul><li>UDP是无连接的。</li><li>UDP尽最大努力交付，所以不保证可靠交付。</li><li>UDP是面向报文的。</li><li>UDP没有拥塞控制。</li><li>UDP支持一对一，一对多，多对一和多对多的交互通信。</li><li>UDP的首部开销小(8个字节)。</li></ul><ol start="5"><li>UDP首部<strong>四个字段</strong>。</li></ol><ul><li>源端口</li><li>目的端口</li><li>长度</li><li>检验和</li></ul><ol start="6"><li><p>TCP把连接作为最基本的抽象。</p></li><li><p>套接字socket=IP地址：端口号</p></li><li><p>理想的传输条件有以下两个特点。<br>　- 传输信道不产生差错。<br>　- 不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据。</p></li><li><p>A发送分组的时间为$T_D$,B发送确认分组的时间为$T_A$,往返时间为RTT。<br>$$信道利用率U=\frac{T_D}{T_D+RTT+T_A}$$</p></li><li><p>超时重传机制计算<br>$$新RTT_S＝(1-\alpha)<em>(旧的RTT_S)+\alpha</em>x新的RTT样本$$<br>$$RTO=RTT_S+4<em>RTT_D$$<br>$$新的RTT_D=(1-\beta)</em>(旧的RTT_D)+\beta*|RTT_S-新的RTT样本|$$</p></li><li><p><strong>流量控制</strong>就是让发送方的发送速率不要太快，要让接收方来得及接收。</p></li><li><p>计算机网络中的链路容量、交换节点中的缓存和处理机等都是<strong>网络资源</strong>。</p></li><li><p>对于某一资源需求超过可用资源，即会<strong>拥塞</strong>。</p></li><li><p>拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。</p></li><li><p>流量控制往往指点对点通信量的控制。</p></li><li><p>TCP拥塞控制的算法四种。(计算题）</p></li></ol><ul><li>慢开始 ＊２</li><li>拥塞避免　＋１</li><li>快重传</li><li>快恢复 $cwnd=ssthresh=cwnd*\frac{1}{2}$</li></ul><ol start="17"><li>TCP运输连接就有三个阶段</li></ol><ul><li>连接建立</li><li>数据传送</li><li>连接释放</li></ul><ol start="18"><li>TCP需解决的三问题。</li></ol><ul><li>要使每一方能够确知对方的存在。</li><li>允许双方协商一些参数。</li><li>能够对运输实体资源进行分配。</li></ul><ol start="19"><li>TCP中主动的叫客户，被动的叫服务器。</li><li>　TCP三次握手四次挥手。</li></ol><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><ol><li>域名系统DNS是互联网使用的命名系统，用来把便于人们使用的机器名字转换为IP地址。</li><li>顶级域名分为三大类。<strong>国家顶级域名nTLD,通用顶级域名gTLD,基础结构域名</strong>。</li><li>互联网的域名空间。<br><img src="/images/7604477-3809ca06eb6f5881.jpg" alt="domain"></li><li>树状结构的DNS域名服务器。<br><img src="/images/u_3D137121673_2C1402111241_26fm_3D26_26gp_3D0.jpg" alt="tree-domain"></li><li>根域名服务器是最高层次的域名服务器，也是最重要的域名服务器。</li><li>文件传送协议FTP是互联网上使用得最广泛的<strong>文件传送协议</strong>。</li><li>FTP <strong>主进程工作流程</strong>如下。</li></ol><ul><li>打开熟知端口，使客户进程能够连接上。</li><li>等待客户进程发出连接请求。</li><li>启动从属进程处理客户进程请求。</li><li>回到等待状态，继续接受其他客户进程发来的请求。</li></ul><ol start="8"><li>TELNET是一个简单的<strong>远程终端协议</strong>，也是互联网的正式标准。</li><li>万维网以客户服务器方式工作，客户程序向服务器发出请求，服务器程序向客户程序送回客户所需的万维网文档。</li><li><strong>统一资源定位符URL</strong>。用来表示从互联网上得到的资源位置和访问这些资源的方法。</li><li>&lt;http://&lt;主机&gt;:&lt;端口&gt;/&gt;&lt;路径&gt;</li><li>主页概念。</li></ol><ul><li>一个WWW服务器的最高级别页面。</li><li>某一个组织或部门一个定制的页面或目录。</li><li>由某一个人自己设计的描述他本人情况的WWW页面。</li></ul><ol start="13"><li>电子邮件的两个重要标准：<strong>简单邮件传送协议SMTP和互联网文本报文格式</strong>。</li><li>邮件读取协议POP3和IMAP。</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>非计算题占了四十分，计算题占了六十分。若想看整理好的计算题，有个URL下去下载，支持20次下载,20次下载后文件自动删除。<br><a href="https://send.firefox.com/download/af93107b3d/#uTEMLp2WILU8rG_HFWjk7g" target="_blank" rel="noopener external nofollow noreferrer">下载网址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件构造复习</title>
      <link href="/2019/01/07/software-struct/"/>
      <url>/2019/01/07/software-struct/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最佳食用方法是理解记忆，考试时能扯多少是多少，有小部分直接复制＠hwq的答案．其实有心人想要找出那些题目考的概率大也是相对明显的．答案都是基于我自己理解的，不保证正确，觉得不对的也可以下面评论．</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>解释模块耦合性的含义，对不同的耦合举例说明。<br>(ps:这个题分为两部分，一部分是解释含义，另一部分是举例说明.)<br>(1) 耦合性是一个模块与系统其他模块及外部世界的关联程度的度量．<br>(2) 以下将对不同耦合进行伪代码的举例说明．(ps:考试写那么多不太科学，我选择先随便举两个例子，有时间再回来补其他的)</li></ol><ul><li>非直接耦合．两函数之间没有直接关系．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>数据耦合．一个函数访问另一个函数，通过简单参数来交换输入输出．</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">return</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token function">addOne</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>标记耦合．一组函数通过参数表传递信息．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setAuthor</span><span class="token punctuation">(</span>Book book<span class="token punctuation">,</span>String author<span class="token punctuation">)</span><span class="token punctuation">{</span>　　book<span class="token punctuation">.</span>author<span class="token operator">=</span>author<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"jackson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>控制耦合.一个函数通过传递控制信息来控制另一个函数．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>　　　<span class="token keyword">return</span>  a<span class="token operator">-</span>b<span class="token punctuation">;</span>　　<span class="token keyword">else</span>　　　<span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token function">cal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>外部耦合.一组函数都访问同一个全局简单变量．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">double</span> PI<span class="token operator">=</span><span class="token number">3.1415926</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">return</span> PI\<span class="token operator">*</span>r\<span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">getPerimeter</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">return</span> PI\<span class="token operator">*</span>r\<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>公共耦合.一组函数访问同一个公共数据环境.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> months<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getJan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">return</span> months<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">getDec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">return</span> months<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>内容耦合.一个函数直接修改另一个函数的内容，或直接转入另一个函数等．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　label<span class="token operator">:</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">goto</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>解释模块内聚性的含义，对不同的内聚举例说明。<br>(1) 内聚性是一个模块内部各个元素之间相互结合的紧密程度的度量指标．要求模块功能明确且单一．<br>(2) 以下将利用伪代码对内聚性进行解释．</li></ol><ul><li>偶然内聚．模块中的代码无法定义其不同功能的调用．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>　　<span class="token keyword">int</span> b <span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token punctuation">;</span>　　<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> 　　<span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>逻辑内聚.把几种相关的功能或数据组合在一起，每次被调用的时候，由传送参数来确定该函数应完成哪种功能．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　<span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>　　　<span class="token keyword">return</span>  a<span class="token operator">-</span>b<span class="token punctuation">;</span>　　<span class="token keyword">else</span>　　　<span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><ul><li>时间内聚．把需要同时执行的动作组合在一起形成的函数为时间内聚函数．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　PI<span class="token operator">=</span><span class="token number">3.1415</span><span class="token punctuation">;</span>　　E<span class="token operator">=</span><span class="token number">2.718281</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>过程内聚．一系列有序的操作．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">dealFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　open file<span class="token punctuation">;</span> 　　deal file<span class="token punctuation">;</span>　　close file<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>通信内聚．函数内所有处理元素都在同一个数据结构上．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">deal</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span> 　　p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'zz'</span><span class="token punctuation">;</span>　　p<span class="token punctuation">.</span>old<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>顺序内聚. 前一条语句的输出作为下一条语句的输入．</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">printRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">int</span> number<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>　　<span class="token keyword">int</span> answer<span class="token operator">=</span>number<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>　　<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span></code></pre><ul><li>功能内聚．函数各个部分是为了完成某一项功能必不可少的部分.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">dealFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　open file<span class="token punctuation">;</span> 　　change file<span class="token punctuation">;</span>　　close file<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p>请简要描述模块化设计的原则。<br>(1) 模块可分解性<br>(2) 模块可组装性<br>(3) 模块可理解性<br>(4) 模块连续性<br>(5) 模块保护性</p></li><li><p>请简要描述一下使用JUnit进行单元测试的基本步骤<br>(1) 为待测软件（类）建立一个测试类。<br>(2) 编写用@Before注解的setUp()来进行初始化测试类。<br>(3) 为待测类的成员方法/函数编写测试方法。<br>(4) 运行测试。<br>(5) 每增加一个方法或修改代码时，重复执行(3)、(4)。</p></li><li><p>请简要描述防御性编程及其基本技术。<br>(1) 防御性编程是程序员要预计其他程序员的过错 无效输入 甚至有害数据及使用者的过失,采取适当措施保护自己的程序.<br>(2) 主要有以下两种种技术.<br>　　处理错误<br>　　使用异常</p></li><li><p>交互设计的8条黄金规则是什么？<br>(1) 尽量保持一致<br>(2) 满足普遍可用性<br>(3) 提供信息反馈<br>(4) 设计对话框以产生结束信息.<br>(5) 预防并成立错误<br>(6) 允许撤销操作<br>(7) 支持内部控制点<br>(8) 减轻短时记忆负担</p></li><li><p>简单说明软件调试和软件测试的区别与联系。<br>(1)软件测试是为了找出错误<br>(2)软件调试是为了修正错误<br>(3)软件测试得到错误后要调试<br>(4)软件调试修正错误后要重新测试</p></li><li><p>请简要描述在Eclipse中的调试过程。可以结合代码描述。</p></li></ol><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　<span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>　　<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token keyword">double</span> d<span class="token operator">=</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span>　　<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(0)输入6 5的时候发现输出结果为1.0不符合预期<br>(1)在可能出现错误的地方double d=a/b;设置断点<br>(2)启动调试<br>(3)单步执行查看变量d变化<br>(4)在单步执行时应当注意变量变化,大脑中同步程序运行,观察到变量变化不合理<br>(5)注意到是由于整数相除引起的问题，修正为double d=(double)a/b;<br>(6)再次测试结果正确</p><ol start="9"><li>请写简要描述一下常见的Java编程风格。<br>(1) 不应该出现魔法值（未经定义的常量）．<br>(2) 对于常量名字应当全部大写．<br>(3) 函数与变量命名采用驼峰式．<br>(4) 类名开头字母大写．</li><li>使用下图解释里氏替换原则，尽可能的用代码来解释。<br><img src="/images/E5_9B_BE_E7_89_871.png" alt="图一"></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Testes</span><span class="token punctuation">{</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>Horse horse<span class="token punctuation">)</span><span class="token punctuation">{</span>　　　　System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>horse<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span>　　<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>　　　BlackHorse bh<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BlackHorse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　bh<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小旋风"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　Testes ts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Testes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　　ts<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span>bh<span class="token punctuation">)</span><span class="token punctuation">;</span>　  　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>(1) 图中白马黑马都继承了</p><p>　　　　　　　　　　　　　　　　　　　．－＇　＿．．｀．<br>　　　　　　　　　　　　　　　　　　／　　．＇＿．＇．＇<br>　　　　　　　　　　　　　　　　　｜　．＇　（．）｀．<br>　　　　　　　　　　　　　　　　　；＇　　　，＿　　　｀．<br>　．－－．＿＿＿＿＿＿＿＿＿＿．＇　　　　；　　｀．；－＇<br>｜　　．／　　　　　　　　　　　　　　　／<br>｜　　｜　　　　　　　　　　　　　　　／<br>｀．．＇｀－．＿　　＿＿＿＿＿，　．．＇<br>　　　　　／　｜　｜　　　　　｜　｜＼　＼<br>　　　　／　／｜　｜　　　　　｜　｜　＼　＼<br>　　　／　／　｜　｜　　　　　｜　｜　　＼　＼<br>　　／＿／　　｜＿｜　　　　　｜＿｜　　　＼＿＼<br>　｜＿＿＼　　｜＿＿＼　　　　｜＿＿＼　　｜＿＿<br>，函数要求的参数也是马.<br>(2) 因为白马黑马是马的子类，所以子类黑马的实例可以当做马类来看待并执行函数．<br>(3) 要求子类能够替换基类，这就是里氏替换原则．</p><ol start="11"><li>使用下图解释开闭原则，尽可能的用代码来解释。<br><img src="/images/E5_9B_BE_E7_89_872.png" alt="图二"><br>(1) 开闭原则要求对扩展开放，对修改封闭．<br>(2) 图中东海龙王 西海龙王 太白金星已经是文武仙卿的子类了．<br>(3) 对扩展开放是指可以不改变其他代码的情况下直接增加一个弼马温的类．<br>(4) 对修改封闭是指不能随意修改已完成类或者函数的内部结构．</li><li>解释什么是单一职责原则，在编程实践中该如何实践这一原则。<br>(1) 一个类只有一种功能．<br>(2) 在设计程序前应当做好类图．<br>(3) 虽然实践有时候存在困难，但应尽量避免一个类多功能．</li><li>使用下图解释依赖倒转原则，尽可能的用代码来解释。这里墨子的“爱人”是一个行为，是指施以仁爱。</li></ol><p><img src="/images/E5_9B_BE_E7_89_873.png" alt="图三"></p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">public</span> interface People<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> Yr extends People<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> Lr extends People<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">public</span> Cr extends People<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoZi</span> <span class="token punctuation">{</span>　　<span class="token keyword">protected</span> ArrayList<span class="token operator">&lt;</span>People<span class="token operator">></span> plist<span class="token punctuation">;</span>　　<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">love</span><span class="token punctuation">(</span>People p<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　plist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//强哥代码</span></code></pre><p>(1) 墨子爱人，爱的是抽象的人．<br>(2) 不管是什么人都可以爱(抽象不依赖于细节)．<br>(3) 所以墨子无论是越人　鲁人　楚人都爱．（古代中央空调？？）<br>(4) 前提是这三个都是人,而不是阿猫阿狗，即细节依赖与抽象．<br>(5) 总结一句就是抽象不依赖于细节，细节依赖于抽象．</p><ol><li><p>请简要叙述代码走查。主要说明其形式、目的和意义。<br>(1) 至少两人组成，其中一人协调走查，另一人扮演测试者．<br>(2) 测试者提出测试用例<br>(3) 走查会议上在大脑中执行程序，演变程序执行状态，发现错误．<br>(4) 目的：是为了发现错误．<br>(5) 意义：有助于验证设计和实现之间的一致性．</p></li><li><p>请简要叙述正式审查。主要说明其形式、目的和意义。（Ｐ149）<br>(1)　形式上分为计划　流程　结果和追查．<br>(2) 要求最少四人<br>(3) 目的:　为了发现程序的缺陷．<br>(4) 意义:　确保错误能够被及时发现并及时改正．</p></li><li><p>请简述代码重构的原因、目的和原则。<br>原则：代码重构就是在不改变软件外部行为的前提下改善它的内部结构。<br>原因、目的：改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性</p></li><li><p>什么是设计模式？它是在哪些级别上的复用？<br>设计模式代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。<br>代码级复用。</p></li><li><p>什么是工厂方法？其结构和核心思想有哪些？<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br>结构和核心思想：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p></li><li><p>请简要描述适配器模式及其适用场合？<br>适配器模式是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。<br>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。<br>场合：1、系统需要使用现有的类，而此类的接口不符合系统的需要。 2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。 3、通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</p></li><li><p>软件缺陷管理的状态和级别有哪些？<br>常见的缺陷状态有：“新建”、“待解决”、“已解决”、“已修复”<br>缺陷的严重程度<br>描述缺陷的严重程度，一般分为“致命”、“严重”、“一般”、“细微”四种<br>缺陷的紧急程度<br>描述缺陷的紧急程度，从1－4，1是优先级最高的等级，4是优先级最低的等级<br>缺陷的紧急程度与严重程度虽然是不一样的，但两者密切相关，往往的越是严重，就越是紧急，所以有些组织只用“严重程度”</p></li><li><p>JUNIT需要使用的注解有哪些？<br>@RunWith<br>@Before<br>@Parameters<br>@Test</p></li><li><p>断言的使用原则是什么？<br>(1) 每个assert只检验一个条件 [因为同时检验多个条件时,如果断言失败,无法直观的判断是哪个条件失败 ]<br>(2) 不能使用改变环境(比如变量)的语句 [因为assert只在DEBUG个生效,如果这么做,会使用程序在真正运行时遇到问题 ]<br>(3) 使用断言对函数的参数进行确认。<br>(4) 使用断言捕捉不应该发生的非法情况。</p></li><li><p>框架的概念是什么？是在哪些级别上的复用？<br>就是一些类和接口的集合，通过这些类和接口协调来完成一系列的程序实现。<br>模块级复用</p></li><li><p>在UML类图中，类与类之间有哪些关系？符号是什么？依赖和泛化有什么区别？<br>(1) UML中关系主要有依赖，聚合，组合，泛化和实现<br>(2) 对应上条每点依次是虚线箭头，空心的菱形+实线箭头,实心的菱形+实线箭头，空心三角形+实线，空心三角形+虚线．（ps:dbq,在下记不住)<br>(3) 依赖关系是指两个或多个类之间的依存关系，如植物类依赖于土壤类.<br>(4) 泛化是类之间的继承关系．</p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　本来想把程序题代码也贴一下，想想代码都该不一样，而且自己java编程水平有限．就不贴了吧．</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浙江水利新闻分析</title>
      <link href="/2018/12/17/%E6%B5%99%E6%B1%9F%E6%B0%B4%E5%88%A9%E6%96%B0%E9%97%BB%E5%88%86%E6%9E%90/"/>
      <url>/2018/12/17/%E6%B5%99%E6%B1%9F%E6%B0%B4%E5%88%A9%E6%96%B0%E9%97%BB%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="2013年至今水利新闻标题中的关键词"><a href="#2013年至今水利新闻标题中的关键词" class="headerlink" title="2013年至今水利新闻标题中的关键词"></a>2013年至今水利新闻标题中的关键词</h2><p><img src="/images/output_8_1.png" alt="image"></p><h2 id="文章内容中的关键词"><a href="#文章内容中的关键词" class="headerlink" title="文章内容中的关键词"></a>文章内容中的关键词</h2><p><img src="/images/output_11_1.png" alt="image"><br>可以看出防汛防台工作一直是水利行业的重要组成部分</p><h2 id="哪些地区在水利方面做的很好-频繁出现在水利厅新闻上"><a href="#哪些地区在水利方面做的很好-频繁出现在水利厅新闻上" class="headerlink" title="哪些地区在水利方面做的很好 频繁出现在水利厅新闻上"></a>哪些地区在水利方面做的很好 频繁出现在水利厅新闻上</h2><p><img src="/images/output_17_0.png" alt="image"><br><img src="/images/output_18_0.png" alt="image"><br><img src="/images/output_20_0.png" alt="image"><br>可以看出地级市中绍兴市，温州市在这方面做的很棒，而县级地区中兰溪、海宁、萧山都做的很出色。</p><h2 id="水利厅历年来的发文量"><a href="#水利厅历年来的发文量" class="headerlink" title="水利厅历年来的发文量"></a>水利厅历年来的发文量</h2><p><img src="/images/output_23_0.png" alt="image"><br>治水活动于2015年到顶峰，之后因为取得成效慢慢冷下。</p><h2 id="这几年的水利热词综合"><a href="#这几年的水利热词综合" class="headerlink" title="这几年的水利热词综合"></a>这几年的水利热词综合</h2><p><img src="/images/output_28_1.png" alt="image"></p><h2 id="在时间层面上各个市发文的数量情况"><a href="#在时间层面上各个市发文的数量情况" class="headerlink" title="在时间层面上各个市发文的数量情况"></a>在时间层面上各个市发文的数量情况</h2><p><img src="/images/output_43_0.png" alt="image"><br><img src="/images/output_44_1.png" alt="image"><br>可以看出温州市在多数时间段新闻都较多，有少数时间段较少，而绍兴市一直以来都有较多的新闻。</p><h2 id="利用情感分析模块来分析水利新闻中的情感指数"><a href="#利用情感分析模块来分析水利新闻中的情感指数" class="headerlink" title="利用情感分析模块来分析水利新闻中的情感指数"></a>利用情感分析模块来分析水利新闻中的情感指数</h2><p><img src="/images/output_55_1.png" alt="image"><br>水利新闻的中的用词大多数时间都较为积极，体现出我们的治水成果不断改进。</p><h2 id="各个时间段水利热词的变化"><a href="#各个时间段水利热词的变化" class="headerlink" title="各个时间段水利热词的变化"></a>各个时间段水利热词的变化</h2><p><img src="/images/output_65_0.png" alt="image"><br>2013年中旬开始“河长制”这个词语出现在人们的视线中，并且在2014年达到顶峰，其后一段时间一直在水利新闻中占据着重要地位。</p><h2 id="最后分两张图看看这些年来频繁在为水利奔波的人"><a href="#最后分两张图看看这些年来频繁在为水利奔波的人" class="headerlink" title="最后分两张图看看这些年来频繁在为水利奔波的人"></a>最后分两张图看看这些年来频繁在为水利奔波的人</h2><p><img src="/images/output_68_0.png" alt="image"><br><img src="/images/output_69_0.png" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python文件拷贝</title>
      <link href="/2018/06/18/python%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"/>
      <url>/2018/06/18/python%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h3><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;前段时间准备六级的时候，拿到了一个光盘，里面有很多听力，但是听力分为很多文件夹，还有很多听力的字幕（.lrc）,就想要把里面的听力都拷贝出来全部放到我的手机某个文件夹里，但是一个个文件夹打开，全选，拷贝，粘贴，这一系列操作显得效率不高，因此我想到了使用python来实现这一系列功能。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h3><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;制作出了一个可以实现<strong>筛选该程序所在目录下的所有文件</strong>，通过关键词进行筛选，然后复制到目标文件夹里，高效得实现了文件的整理。还可以用到一些资料的整理上，比如想整理所有关于毕业设计的资料，我就把毕业设计作为关键词，（当然平常命名的时候还得要规范一点），然后把我的程序放到磁盘根目录下运行，就能筛选出当前磁盘下的全部含关键词的文件了。代码如下</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""Created on Fri May 18 13:50:09 2018@author: zhkgo"""</span><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> shutil<span class="token keyword">def</span> <span class="token function">findmykey</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span>head<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dirs<span class="token operator">=</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span>    files<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    pattern<span class="token operator">=</span><span class="token string">'.*'</span><span class="token operator">+</span>keyword<span class="token operator">+</span><span class="token string">'.*'</span>    dirs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>dirs<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mydir<span class="token operator">=</span>dirs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>mydir<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#  print(x)</span>            absp<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>mydir<span class="token punctuation">,</span>x<span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>absp<span class="token punctuation">)</span><span class="token punctuation">:</span>                dirs<span class="token punctuation">.</span>add<span class="token punctuation">(</span>absp<span class="token punctuation">)</span>                       <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>absp<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#    print(pattern+' '+keyword)</span>             <span class="token comment" spellcheck="true">#   print("isfile")    </span>                <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>                    files<span class="token punctuation">.</span>append<span class="token punctuation">(</span>absp<span class="token punctuation">)</span>    <span class="token keyword">return</span> files                     <span class="token comment" spellcheck="true">#shutil.copyfile(r'F:\华研外语\2.六级2套预测\Model Test 2.lrc','F:\\fas\\'+'madel.lrc')</span>goal<span class="token operator">=</span><span class="token string">""</span> goal<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'复制到哪里？ (例如 F:\\文档)\n'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>goal<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"文件夹不存在！"</span><span class="token punctuation">)</span>            goal<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'复制到哪里？ (例如 F:\\文档)\n'</span><span class="token punctuation">)</span>keyword<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'输入关键词(例如 jpg)\n'</span><span class="token punctuation">)</span>ret<span class="token operator">=</span>findmykey<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(ret)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> ret<span class="token punctuation">:</span>        pa<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>goal<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># print(pa)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>x<span class="token punctuation">,</span>pa<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"复制失败"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'复制完成'</span><span class="token punctuation">)</span></code></pre><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h3><p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码肯定是不完善的，没有考虑很多情况，目前这个代码实现的时候 ，对于重复的文件，后面进入的会覆盖已经存在的文件。<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;这个还可以加入输入正则表达式来进行匹配文件名，这样就不是单纯的文件名匹配了，还可以加入运算符，如 “与”，“或”等来进行匹配。就写到这里吧，有错误希望能够指正。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子矩阵</title>
      <link href="/2018/03/08/%E5%AD%90%E7%9F%A9%E9%98%B5/"/>
      <url>/2018/03/08/%E5%AD%90%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<p>题目描述<br>链接如下<br><a href="https://www.luogu.org/problemnew/show/P2258" target="_blank" rel="noopener external nofollow noreferrer">https://www.luogu.org/problemnew/show/P2258</a></p><pre><code>给出如下定义：子矩阵：从一个矩阵当中选取某些行和某些列交叉位置所组成的新矩阵（保持行与列的相对顺序）被称为原矩阵的一个子矩阵。例如，下面左图中选取第2、4行和第2、4、5列交叉位置的元素得到一个2*3的子矩阵如右图所示。9 3 3 3 99 4 8 7 41 7 4 6 66 8 5 6 97 4 5 6 1的其中一个2*3的子矩阵是4 7 48 6 9相邻的元素：矩阵中的某个元素与其上下左右四个元素（如果存在的话）是相邻的。矩阵的分值：矩阵中每一对相邻元素之差的绝对值之和。本题任务：给定一个n行m列的正整数矩阵，请你从这个矩阵中选出一个r行c列的子矩阵，使得这个子矩阵的分值最小，并输出这个分值。(本题目为2014NOIP普及T4)输入输出格式输入格式：第一行包含用空格隔开的四个整数n，m，r，c，意义如问题描述中所述，每两个整数之间用一个空格隔开。接下来的n行，每行包含m个用空格隔开的整数，用来表示问题描述中那个n行m列的矩阵。输出格式：输出共1行，包含1个整数，表示满足题目描述的子矩阵的最小分值。【数据说明】对于50%的数据，1 ≤ n ≤ 12，1 ≤ m ≤ 12，矩阵中的每个元素1 ≤ a[i][j] ≤ 20；对于100%的数据，1 ≤ n ≤ 16，1 ≤ m ≤ 16，矩阵中的每个元素1 ≤ a[i][j] ≤ 1,000，1 ≤ r ≤ n，1 ≤ c ≤ m。</code></pre><p>对于以上的数据范围，我一开始想到的是直接搜索，然后我就估算了一下搜索的代价，最差的情况是，有16行16列，选8行8列，直接枚举的话，有</p><p><img src="http://latex.codecogs.com/gif.latex?(C_%7B16%7D%5E%7B8%7D%20)%5E%7B2%7D*%7Bn%7D%5E2" alt=" "><br>的运算次数，结果是超过100亿的运算次数显然不能再规定时间内完成。</p><p>看到这类矩阵 ，我也能想到是dp，但是对于这种选择分开的dp感觉无从下手。</p><p>后来想到，将dp与搜索结合起来使用，先搜索确定是那几行，然后题目就变成了</p><p>从m列里选择c列 ，找出最小的分值，这样就可以进行dp了,dp的复杂度是16^3。</p><p>最差的情况也只是5000多万次运算。</p><p>首先确定状态，状态为dp[i][j]</p><p>i表示选择的最后一个列，j表示已经选择的列数。</p><p>显然j&lt;=i</p><p>状态转移方程也显而易见</p><p>dp[i][j]=min(dp[k][j-1]+col[i]+cha[k][i]),k&lt;=i;</p><p>其中col[i]表示i列内部之间的分值，cha[k][i]表示第k列与第i列相邻时，他们列之间相差的分值。这两个数组可以在确定行之后预处理出来，预处理的时间是O(n^2)相对于dp的O(n^3）显然可以忽略不计。</p><p>下面附上代码。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>r<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> mp<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> chose<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">myabs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token operator">:</span><span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mymax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">mymin</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">myabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>chose<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mp<span class="token punctuation">[</span>chose<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> col<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>r<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">myabs</span><span class="token punctuation">(</span>mp<span class="token punctuation">[</span>chose<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mp<span class="token punctuation">[</span>chose<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> minc<span class="token operator">=</span>i<span class="token operator">&lt;</span>c<span class="token operator">?</span>i<span class="token operator">:</span>c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>minc<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token number">-1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">mymin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>c<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token operator">=</span><span class="token function">mymin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> now<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>x<span class="token operator">></span>n<span class="token operator">-</span>now<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>now<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        chose<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
